{"version":3,"sources":["components/QuarterlyGrowthByCity.js","utils/dataProcessor.js","utils/ProjectionImplementation.js","components/Dashboard.js","App.js","index.js"],"names":["QuarterlyGrowthByCity","_ref","_currentCityData$data","_currentCityData$data2","_currentCityData$data3","_currentCityData$annu","_currentCityData$annu2","_currentCityData$data4","_currentCityData$data5","_currentCityData$data7","_currentCityData$data8","_currentCityData$data9","_currentCityData$data10","_currentCityData$data11","_currentCityData$data12","selectedCity","propSelectedCity","cityMapping","loading","setLoading","useState","quarterlyData","setQuarterlyData","tableExpanded","setTableExpanded","useEffect","generateQuarterlyData","cityConfigs","all","name","startDate","growthFactor","baseValue","color","LYGRRATQ7EGG2","L4NE8GPX89J3A","LDK6Z980JTKXY","LXMC6DWVJ5N7W","LG0VGFKQ25XED","quarterlySeason","Q1","Q2","Q3","Q4","allCityQuarterly","combinedQuarterly","Object","keys","forEach","cityId","config","quarterlyGrowth","Date","startYear","getFullYear","startQuarter","Math","floor","getMonth","currentDate","currentYear","currentQuarter","totalQuarters","previousValue","currentValue","i","quarterYear","quarter","quarterKey","isProjected","quarterlyGrowthFactor","pow","seasonalFactor","randomFactor","random","round","growthRate","quarterData","year","value","parseFloat","toFixed","projected","push","total","cities","data","annualGrowthTarget","combinedQuarterlyArray","values","sort","a","b","allCitiesGrowth","previousTotal","currentCityData","getAnnualGrowthRate","projectedQuarterIndex","findIndex","q","length","nextYearSameQuarter","find","getCityName","React","createElement","Box","sx","width","height","display","alignItems","justifyContent","Typography","variant","projectionStartIndex","slice","mb","fontWeight","Grid","container","spacing","item","xs","md","Paper","p","borderRadius","boxShadow","background","getWeeklyAverage","currentQuarterIndex","currentQuarterValue","toLocaleString","getProjectedAnnualOrders","reduce","sum","bgcolor","getStartDate","_currentCityData$data6","growth","target","ResponsiveContainer","BarChart","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","tick","fill","YAxis","Tooltip","contentStyle","backgroundColor","border","formatter","labelFormatter","label","items","_items$","dataPoint","payload","Legend","wrapperStyle","paddingTop","ReferenceLine","x","position","Bar","entry","opacity","radius","mt","pt","borderTop","fontSize","mr","filter","domain","_items$2","y","strokeWidth","getGrowthColor","cursor","borderBottom","&:hover","onClick","IconButton","size","KeyboardArrowUpIcon","KeyboardArrowDownIcon","Collapse","in","overflowX","style","minWidth","borderCollapse","borderSpacing","padding","textAlign","map","idx","key","marginLeft","CITY_MAPPING","LAUNDROMAT_COLORS","CITY_CENTERS","lat","lng","LAUNDROMAT_LOCATIONS","Tommy Suds","city","address","London Sudz","Royal City Cleaners","Browns","Ace Cleaners","Khawla","Spins","Centreville Laundry","KW Washateria","Laundry Closet","Soapy Bubbles","Marbank","Calgary Cleaners","CITY_LAUNDROMAT_MAPPING","CITY_LAUNDROMATS","index","_LAUNDROMAT_LOCATIONS","laundromatId","substring","replace","id","neededCount","cityName","suffixes","isCurrentMonth","dateString","date","parseISO","now","e","normalizeCityId","appointment","city_id","entries","toLowerCase","CITY_DATA","population","yearlyGrowthFactor","operationalSince","marketMaturity","minWeeklyOrders","WEEKLY_SEASONALITY","0","1","2","3","4","MONTHLY_SEASONALITY","5","6","7","8","9","10","11","generateProjections","monthlyData","weeks","arguments","undefined","combined","metrics","totalAnnualOrders","averageMonthlyOrders","projectedGrowthPercent","historicalData","month","some","orders","preprocessHistoricalData","cutoffDate","filteredHistoricalData","monthDate","parts","split","monthName","parseInt","monthMap","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","isNaN","console","error","lastHistoricalPoint","cityParams","baselineForGrowth","baseWeeklyOrders","max","m","val","yearStr","startMonth","adjustedWeeklyGrowth","projectedData","currentOrders","projectionStartDate","weekDate","addWeeks","weekOfMonth","getDate","formattedDate","format","shortDate","fullname","week","weeklyHistoricalData","weeklyData","monthNumber","daysInMonth","weeksInMonth","ceil","nextMonth","nextMonthOrders","weekDay","min","weekOrders","factor","weekFactor","generateWeeklyHistoricalPoints","totalOrders","totalOrdersMonthly","avgWeeklyOrders","growthPercent","averageWeeklyOrders","COLORS","Dashboard","appointments","setAppointments","setSelectedCity","setStartDate","subMonths","endDate","setEndDate","mapMarkers","setMapMarkers","laundromatLocations","setLaundromatLocations","customerTypeFilter","setCustomerTypeFilter","laundromatFilter","setLaundromatFilter","mapCenter","setMapCenter","mapZoom","setMapZoom","mapInstance","setMapInstance","mapsApi","setMapsApi","laundromatIdToNameMap","useMemo","idMap","knownLocations","laundromat","laundromatAddresses","cleaning","cleaner","pickup","to","cleanerId","addresses","mostCommonAddress","maxCount","bestMatch","bestScore","knownAddress","knownWords","actualWords","matches","word","includes","score","cityFrequency","mostCommonCity","maxCityCount","cleanerIndex","indexOf","async","log","response","fetch","status","ok","Error","json","_sample$pickup","sample","serviceDate","service_date","createdAt","updatedAt","validDates","d","_d$pickup","dateStr","getTime","earliest","latest","toISOString","dateError","fallbackData","Array","from","_","customer_type","laundromat_id","laundromat_name","revenue","fetchData","panTo","setZoom","cityOrderCounts","acc","app","appointmentId","normalizedCityId","filteredAppointments","laundromats","laundromatsByCityId","cityIds","Set","add","randomIndex","allLaundromats","flat","cityCenter","locationInfo","angle","PI","cos","sin","getLaundromatLocations","cityDistribution","sampleSize","sampledAppointments","laundromatsById","laundromatsByName","markers","_laundromatsById$laun","laundromatName","laundromatColor","laundromatLocation","orderDetails","customerType","invoiceTotal","getOrderLocations","loadMapData","options","totalAppointments","sampleAppointment","filtered","_appointments$","inDateRange","dateChecked","_appointments$2","_appointments$3","pickupDate","createdDate","laundromatStats","cityStats","avgOrderValue","customers","customerTypes","Residential","Commercial","Airbnb","Monthly","customerId","stats","getCityStatistics","customerToLaundromat","returningCustomers","retentionRate","avgTurnaroundDays","turnaroundTimes","orderWeights","avgOrderWeight","dropoff","dropoffDate","turnaroundDays","differenceInDays","weight","washFoldWeight","days","getLaundromatStatistics","simpleRetentionRate","customerTypeDistribution","typeCounts","getCustomerTypeDistribution","monthlyOrdersTrend","trends","monthsToShow","monthKey","localeCompare","getMonthlyOrdersTrend","avgOrderValueTrend","orderCount","totalRevenue","_ref2","getAvgOrderValueTrend","weightDistribution","customerOrders","customerFirstOrderDate","customerLastOrderDate","orderDate","totalCustomers","count","averageOrdersPerCustomer","totalLifetimeDays","customersWithMultipleOrders","averageCustomerLifetime","getCustomerRetentionMetrics","driverStats","driver","driverId","totalPickups","totalDropoffs","totalDistance","totalPay","completedPickups","completedDropoffs","cancelledServices","distance","pay","basePay","totalServices","completedServices","completionRate","avgDistancePerService","avgPayPerDistance","getDriverPerformanceMetrics","getSeasonalTrends","weightRanges","0-5kg","range","6-10kg","11-15kg","16-20kg","21-30kg","31kg+","getWeightDistribution","aggregateMetrics","Boolean","totalLaundromats","avgWeight","arr","retentionRateTrend","monthlyAppointments","has","orderFrequencyTrend","weeklyAppointments","weekKey","weekName","shortName","customerCount","fullName","ordersPerCustomer","processingTimeTrend","monthlyProcessingTimes","deliveryDate","delivery","totalHours","hours","avgProcessingHours","customerTypeTrend","monthlyTypeSplit","residential","commercial","unknown","residentialPercent","commercialPercent","selectedChartType","setSelectedChartType","types","cleaners","Map","set","getMapCenter","centers","sortColumn","setSortColumn","sortDirection","setSortDirection","handleSort","column","SortIcon","cityInfo","info","laundromatCount","marketShare","avgOrderFrequency","projectionData","combinedOrderTrend","referenceDate","addProjectionsToComponent","existingDataMap","projection","CircularProgress","flexDirection","minHeight","AppBar","Toolbar","component","flexGrow","gap","flexWrap","FormControl","Select","onChange","displayEmpty",".MuiSelect-select","py","pr","&:focus","IconComponent","Icon","right","top","transform","pointerEvents","MenuItem","event","type","Container","maxWidth","gutterBottom","sm","l","join","marginTop","marginBottom","borderLeft","px","minimumFractionDigits","maximumFractionDigits","LineChart","interval","minTickGap","tickMargin","props","Line","dot","r","activeDot","isAnimationActive","animationDuration","connectNulls","PieChart","Pie","cx","cy","labelLine","outerRadius","_ref3","percent","Cell","tickFormatter","_items$2$payload","barGap","barCategoryGap","ComposedChart","Area","fillOpacity","fullWidth","InputLabel","textTransform","letterSpacing","renderLaundromatTable","filteredLaundromats","valueA","valueB","marginRight","title","overflow","GoogleMapReact","bootstrapURLKeys","libraries","center","zoom","bounds","fullscreenControl","zoomControl","mapTypeControl","streetViewControl","gestureHandling","minZoom","maxZoom","styles","featureType","elementType","stylers","lightness","left","bottom","zIndex","align","toLocaleDateString","supabase","createClient","App","setData","setError","supabaseData","supabaseError","select","message","statusText","jsonData","err","loadData","handleRetry","Button","theme","createTheme","palette","primary","main","secondary","default","typography","fontFamily","h5","h6","components","MuiPaper","defaultProps","elevation","styleOverrides","root","MuiButton","MuiSelect","ReactDOM","createRoot","document","getElementById","render","StrictMode","ThemeProvider","CssBaseline"],"mappings":"siBA2pBeA,MArpBeC,IAAkE,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAA/DC,aAAcC,EAAmB,MAAKC,YAAEA,EAAc,IAAIhB,EACzF,MAAOiB,EAASC,GAAcC,oBAAS,IAChCC,EAAeC,GAAoBF,mBAAS,KAC5CG,EAAeC,GAAoBJ,oBAAS,GAEnDK,oBAAU,KACRC,KACC,IAEH,MAAMA,EAAwBA,KAE5B,MAAMC,EAAc,CAClBC,IAAK,CACHC,KAAM,aACNC,UAAW,aACXC,aAAc,KACdC,UAAW,IACXC,MAAO,WAETC,cAAe,CACbL,KAAM,SACNC,UAAW,aACXC,aAAc,KACdC,UAAW,GACXC,MAAO,WAETE,cAAe,CACbN,KAAM,SACNC,UAAW,aACXC,aAAc,KACdC,UAAW,GACXC,MAAO,WAETG,cAAe,CACbP,KAAM,qBACNC,UAAW,aACXC,aAAc,IACdC,UAAW,GACXC,MAAO,WAETI,cAAe,CACbR,KAAM,WACNC,UAAW,aACXC,aAAc,KACdC,UAAW,GACXC,MAAO,WAETK,cAAe,CACbT,KAAM,UACNC,UAAW,aACXC,aAAc,KACdC,UAAW,GACXC,MAAO,YAKLM,EAAkB,CACtBC,GAAM,GACNC,GAAM,KACNC,GAAM,IACNC,GAAM,GAIFC,EAAmB,GACnBC,EAAoB,GAE1BC,OAAOC,KAAKpB,GAAaqB,QAAQC,IAC/B,GAAe,QAAXA,EAAkB,OAEtB,MAAMC,EAASvB,EAAYsB,GACrBE,EAAkB,GAGlBrB,EAAY,IAAIsB,KAAKF,EAAOpB,WAC5BuB,EAAYvB,EAAUwB,cACtBC,EAAeC,KAAKC,MAAM3B,EAAU4B,WAAa,GAAK,EAGtDC,EAAc,IAAIP,KAClBQ,EAAcD,EAAYL,cAC1BO,EAAiBL,KAAKC,MAAME,EAAYD,WAAa,GAAK,EAG1DI,EAA4C,GAA3BF,EAAcP,IAAkBQ,EAAiBN,GAAgB,EAExF,IAAIQ,EAAgB,KAChBC,EAAed,EAAOlB,UAG1B,IAAK,IAAIiC,EAAI,EAAGA,EAAIH,EAAeG,IAAK,CACtC,MAAMC,EAAcb,EAAYG,KAAKC,OAAOF,EAAeU,EAAI,GAAK,GAC9DE,GAAYZ,EAAeU,EAAI,GAAK,EAAK,EACzCG,MAAiBD,KAAWD,IAC5BG,EAAcH,EAAcN,GAAgBM,IAAgBN,GAAeO,EAAUN,EAGrFS,EAAwBd,KAAKe,IAAIrB,EAAOnB,aAAc,KACtDyC,EAAiBjC,MAAoB4B,KACrCM,EAAe,IAAwB,GAAhBjB,KAAKkB,SAIhCV,EADQ,IAANC,EACaT,KAAKmB,MAAMzB,EAAOlB,UAAYwC,EAAiBC,GAG/CjB,KAAKmB,MAAMZ,EAAgBO,EAAwBE,EAAiBC,GAIrF,IAAIG,EAAa,KACK,OAAlBb,IACFa,EAAoD,KAArCZ,EAAeD,EAAiB,IAGjD,MAAMc,EAAc,CAClBhD,KAAMuC,EACNU,KAAMZ,EACNC,QAASA,EACTY,MAAOf,EACPY,WAA2B,OAAfA,EAAsBI,WAAWJ,EAAWK,QAAQ,IAAM,KACtEC,UAAWb,GAGblB,EAAgBgC,KAAKN,GAGhBhC,EAAkBuB,KACrBvB,EAAkBuB,GAAc,CAC9BvC,KAAMuC,EACNU,KAAMZ,EACNC,QAASA,EACTiB,MAAO,EACPF,UAAWb,EACXgB,OAAQ,KAIZxC,EAAkBuB,GAAYgB,OAASpB,EACvCnB,EAAkBuB,GAAYiB,OAAOnC,EAAOrB,MAAQmC,EAEpDD,EAAgBC,EAGlBpB,EAAiBK,GAAU,CACzBqC,KAAMnC,EACNlB,MAAOiB,EAAOjB,MACdsD,mBAAgD,KAA3BrC,EAAOnB,aAAe,GAC3CD,UAAWoB,EAAOpB,aAKtB,MAAM0D,EAAyB1C,OAAO2C,OAAO5C,GAC1C6C,KAAK,CAACC,EAAGC,IACJD,EAAEb,OAASc,EAAEd,KAAaa,EAAEb,KAAOc,EAAEd,KAClCa,EAAExB,QAAUyB,EAAEzB,SAInB0B,EAAkB,GACxB,IAAIC,EAAgB,KAEpBN,EAAuBxC,QAAQmB,IAC7B,IAAIS,EAAa,KACK,OAAlBkB,IACFlB,EAAqD,KAAtCT,EAAQiB,MAAQU,EAAiB,IAGlDD,EAAgBV,KAAK,CACnBtD,KAAMsC,EAAQtC,KACdiD,KAAMX,EAAQW,KACdX,QAASA,EAAQA,QACjBY,MAAOZ,EAAQiB,MACfR,WAA2B,OAAfA,EAAsBI,WAAWJ,EAAWK,QAAQ,IAAM,KACtEC,UAAWf,EAAQe,YAGrBY,EAAgB3B,EAAQiB,QAG1BxC,EAAsB,IAAI,CACxB0C,KAAMO,EACN5D,MAAON,EAAiB,IAAEM,MAC1BsD,mBAA4D,KAAvC5D,EAAiB,IAAEI,aAAe,GACvDD,UAAWH,EAAiB,IAAEG,WAGhCR,EAAiBsB,GACjBzB,GAAW,IAIP4E,EAAkB1E,EAAcL,IAAqBK,EAAcO,IAgCnEoE,EAAsBA,KAC1B,IAAKD,IAAoBA,EAAgBT,KAAM,OAAO,EAEtD,MAAMW,EAAwBF,EAAgBT,KAAKY,UAAUC,GAAKA,EAAEjB,WACpE,GAAIe,GAAyB,GAAKA,GAAyBF,EAAgBT,KAAKc,OAAS,EAAG,OAAO,EAGnG,MAAMvC,EAAiBkC,EAAgBT,KAAKW,EAAwB,GAC9DI,EAAsBN,EAAgBT,KAAKgB,KAC/CH,GAAKA,EAAEhC,UAAYN,EAAeM,SAAWgC,EAAErB,OAASjB,EAAeiB,KAAO,GAGhF,OAAKuB,EAG6D,KAAzDA,EAAoBtB,MAAQlB,EAAekB,MAAS,GAH5B,GAgB7BwB,EAAetD,IACnB,GAAIhC,EAAYgC,GAAS,OAAOhC,EAAYgC,GAE5C,OAAOA,GACL,IAAK,MAAO,MAAO,aACnB,IAAK,gBAAiB,MAAO,SAC7B,IAAK,gBAAiB,MAAO,SAC7B,IAAK,gBAAiB,MAAO,qBAC7B,IAAK,gBAAiB,MAAO,WAC7B,IAAK,gBAAiB,MAAO,UAC7B,QAAS,OAAOA,IAiBpB,GAAI/B,EACF,OACEsF,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEC,MAAO,OAAQC,OAAQ,QAASC,QAAS,OAAQC,WAAY,SAAUC,eAAgB,WAChGR,IAAAC,cAACQ,IAAU,CAACC,QAAQ,MAAK,gCAM/B,MAAMC,EAAsC,OAAfpB,QAAe,IAAfA,OAAe,EAAM,QAAN7F,EAAf6F,EAAiBT,YAAI,IAAApF,OAAA,EAArBA,EAAuBgG,UAAUC,GAAKA,EAAEjB,WAC/B,OAAfa,QAAe,IAAfA,GAAqB,QAAN5F,EAAf4F,EAAiBT,YAAI,IAAAnF,GAArBA,EAAuBiH,MAAM,EAAGD,GAClB,OAAfpB,QAAe,IAAfA,GAAqB,QAAN3F,EAAf2F,EAAiBT,YAAI,IAAAlF,GAArBA,EAAuBgH,MAAMD,GAEnD,OACEX,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEU,GAAI,IACbb,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEU,GAAI,EAAGC,WAAY,SAAUrF,MAAO,YAAa,uBACzDsE,EAAYvF,IAInCwF,IAAAC,cAACc,IAAI,CAACC,WAAS,EAACC,QAAS,EAAGd,GAAI,CAAEU,GAAI,IACpCb,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAACoB,IAAK,CACJlB,GAAI,CACFmB,EAAG,EACHC,aAAc,EACdC,UAAW,wEACXC,WAAY,8CAGdzB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,YAAYP,GAAI,CAAE1E,MAAO,2BAA4BoF,GAAI,IAAK,sBAGlFb,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQrF,MAAO,QAASoF,GAAI,IACpErB,IAAsBf,QAAQ,GAAG,KAEpCuB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQP,GAAI,CAAE1E,MAAO,6BAA8B,WAC7C,OAAf8D,QAAe,IAAfA,OAAe,EAAoB,QAApB1F,EAAf0F,EAAiBR,0BAAkB,IAAAlF,OAAA,EAAnCA,EAAqC4E,QAAQ,GAAG,OAK/DuB,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAACoB,IAAK,CACJlB,GAAI,CACFmB,EAAG,EACHC,aAAc,EACdC,UAAW,wEACXC,WAAY,8CAGdzB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,YAAYP,GAAI,CAAE1E,MAAO,2BAA4BoF,GAAI,IAAK,yBAGlFb,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQrF,MAAO,QAASoF,GAAI,IA1IxDa,MACvB,IAAKnC,IAAoBA,EAAgBT,KAAM,OAAO,EACtD,MAAM6C,EAAsBpC,EAAgBT,KAAKY,UAAUC,GAAKA,EAAEjB,WAAa,EAC/E,GAAIiD,EAAsB,EAAG,OAAO,EAEpC,MAAMC,EAAsBrC,EAAgBT,KAAK6C,GAAqBpD,MAEtE,OAAOvB,KAAKmB,MAAMyD,EAAsB,KAoI7BF,GAAmBG,kBAEtB7B,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQP,GAAI,CAAE1E,MAAO,6BAA8B,8BAM3EuE,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAACoB,IAAK,CACJlB,GAAI,CACFmB,EAAG,EACHC,aAAc,EACdC,UAAW,wEACXC,WAAY,8CAGdzB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,YAAYP,GAAI,CAAE1E,MAAO,2BAA4BoF,GAAI,IAAK,2BAGlFb,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQrF,MAAO,QAASoF,GAAI,IApJhDiB,MAC/B,IAAKvC,IAAoBA,EAAgBT,KAAM,OAAO,EAGtD,MAAM6C,EAAsBpC,EAAgBT,KAAKY,UAAUC,GAAKA,EAAEjB,WAAa,EAC/E,OAAIiD,EAAsB,EAAU,GAGbpC,EAAgBT,KAAK6C,GAGlBpC,EAAgBT,KAAK8B,MAAMe,EAAsB,EAAGA,EAAsB,GAG3EI,OAAO,CAACC,EAAKrE,IAAYqE,EAAMrE,EAAQY,MAAO,KAuI5DuD,GAA2BD,kBAE9B7B,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQP,GAAI,CAAE1E,MAAO,6BAA8B,sBAQ7EuE,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGT,GAAI,EAAGU,aAAc,EAAGC,UAAW,wEAAyES,QAAS,YACtIjC,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEU,GAAI,EAAGC,WAAY,WAC/Cf,EAAYvF,IAEfwF,IAAAC,cAACc,IAAI,CAACC,WAAS,EAACC,QAAS,GACvBjB,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,iBAAiB0E,GAAI,CAAEU,GAAI,IAC3Db,IAAAC,cAAA,cAAQ,uBAA4B,IAzG1BxD,KACpB,OAAOA,GACL,IAAK,MAAO,MAAO,gBACnB,IAAK,gBAAiB,MAAO,gBAC7B,IAAK,gBAAiB,MAAO,aAC7B,IAAK,gBAAiB,MAAO,YAC7B,IAAK,gBAAiB,MAAO,iBAC7B,IAAK,gBAAiB,MAAO,gBAC7B,QAAS,MAAO,YAiG8ByF,CAAa1H,IAErDwF,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,iBAAiB0E,GAAI,CAAEU,GAAI,IAC3Db,IAAAC,cAAA,cAAQ,yBAA8B,IAAiB,OAAfV,QAAe,IAAfA,OAAe,EAAoB,QAApBzF,EAAfyF,EAAiBR,0BAAkB,IAAAjF,OAAA,EAAnCA,EAAqC2E,QAAQ,GAAG,MAG5FuB,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,iBAAiB0E,GAAI,CAAEU,GAAI,IAC3Db,IAAAC,cAAA,cAAQ,4BAAiC,KACxB,OAAfV,QAAe,IAAfA,OAAe,EAAgC,QAAhCxF,EAAfwF,EAAiBT,KAAK6B,EAAuB,UAAE,IAAA5G,OAAA,EAA/CA,EAAiDwE,MAAMsD,mBAAoB,OAG/E7B,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,iBAAiB0E,GAAI,CAAEU,GAAI,IAC3Db,IAAAC,cAAA,cAAQ,wBAA6B,KACpB,OAAfV,QAAe,IAAfA,OAAe,EAA4B,QAA5BvF,EAAfuF,EAAiBT,KAAK6B,UAAqB,IAAA3G,OAAA,EAA3CA,EAA6CuE,MAAMsD,mBAAoB,QAI7E7B,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,iBAAiB0E,GAAI,CAAEU,GAAI,IAC3Db,IAAAC,cAAA,cAAQ,uBAA4B,IAClC,CAACkC,IACC,MAAMC,EAASzB,EAAuB,EAAmB,OAAfpB,QAAe,IAAfA,OAAe,EAAgC,QAAhC4C,EAAf5C,EAAiBT,KAAK6B,EAAuB,UAAE,IAAAwB,OAAA,EAA/CA,EAAiD/D,WAAa,KACxG,OAAkB,OAAXgE,KAAqBA,GAAU,EAAI,IAAM,KAAKA,KAAY,OAFnE,IAMJpC,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,iBAAiB0E,GAAI,CAAEU,GAAI,IAC3Db,IAAAC,cAAA,cAAQ,WAAgB,IACtB,MACE,MAAMmC,EAAS5C,IACT6C,GAAwB,OAAf9C,QAAe,IAAfA,OAAe,EAAfA,EAAiBR,qBAAsB,EACtD,OAAIqD,GAAmB,IAATC,EAAqB,mBAC/BD,GAAmB,GAATC,EAAqB,YAC/BD,GAAmB,GAATC,EAAqB,eAC5B,mBANT,OAeVrC,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGT,GAAI,EAAGU,aAAc,EAAGC,UAAW,0EACpDxB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEU,GAAI,EAAGC,WAAY,WAAY,oBAI9Dd,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEE,OAAQ,UACjBL,IAAAC,cAACqC,IAAmB,CAAClC,MAAM,OAAOC,OAAO,QACvCL,IAAAC,cAACsC,IAAQ,CAACzD,MAAqB,OAAfS,QAAe,IAAfA,OAAe,EAAfA,EAAiBT,OAAQ,IACvCkB,IAAAC,cAACuC,IAAa,CAACC,gBAAgB,MAAMC,OAAO,YAC5C1C,IAAAC,cAAC0C,IAAK,CAACC,QAAQ,OAAOC,KAAM,CAAEC,KAAM,aACpC9C,IAAAC,cAAC8C,IAAK,CAACF,KAAM,CAAEC,KAAM,aACrB9C,IAAAC,cAAC+C,IAAO,CACNC,aAAc,CACZC,gBAAiB,UACjB3B,aAAc,WACdC,UAAW,0EACX2B,OAAQ,QAEVC,UAAWA,CAAC7E,EAAOlD,IAAS,CAC1BkD,EAAMsD,iBACG,UAATxG,EAAmB,SAAWA,GAEhCgI,eAAgBA,CAACC,EAAOC,KAAU,IAAAC,EAChC,MAAMC,EAAiB,OAALF,QAAK,IAALA,OAAK,EAAK,QAALC,EAALD,EAAQ,UAAE,IAAAC,OAAA,EAAVA,EAAYE,QAC9B,SAAUJ,KAAiB,OAATG,QAAS,IAATA,OAAS,EAATA,EAAW/E,WAAY,eAAiB,qBAG9DsB,IAAAC,cAAC0D,IAAM,CAACC,aAAc,CAAEC,WAAY,UAEpC7D,IAAAC,cAAC6D,IAAa,CACZC,EAAkB,OAAfxE,QAAe,IAAfA,OAAe,EAAM,QAANtF,EAAfsF,EAAiBT,YAAI,IAAA7E,OAAA,EAAwB,QAAxBC,EAArBD,EAAwB0G,UAAqB,IAAAzG,OAAA,EAA7CA,EAA+CmB,KAClDqH,OAAO,UACPD,gBAAgB,MAChBa,MAAO,CAAE/E,MAAO,QAASyF,SAAU,gBAAiBlB,KAAM,aAG5D9C,IAAAC,cAACgE,IAAG,CACFrB,QAAQ,QACRvH,KAAK,SACLyH,KAAOoB,IAAe,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOxF,WAAY,WAA2B,OAAfa,QAAe,IAAfA,OAAe,EAAfA,EAAiB9D,QAAS,UAC1E0I,QAAUD,IAAe,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOxF,WAAY,GAAM,EAC7C0F,OAAQ,CAAC,EAAG,EAAG,EAAG,QAO1BpE,IAAAC,cAACC,IAAG,CAACC,GAAI,CACPG,QAAS,OACTE,eAAgB,gBAChB6D,GAAI,EACJC,GAAI,EACJC,UAAW,qBACX9I,MAAO,UACP+I,SAAU,aAEVxE,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,WACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CACPC,MAAO,GACPC,OAAQ,GACR6C,iBAAgC,OAAf3D,QAAe,IAAfA,OAAe,EAAfA,EAAiB9D,QAAS,UAC3C8F,aAAc,EACdkD,GAAI,KAENzE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,SAAQ,oBAE9BV,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,WACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CACPC,MAAO,GACPC,OAAQ,GACR6C,gBAAiB,UACjB3B,aAAc,EACd4C,QAAS,GACTM,GAAI,KAENzE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,SAAQ,qBAMlCV,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGT,GAAI,EAAGU,aAAc,EAAGC,UAAW,0EACpDxB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEU,GAAI,EAAGC,WAAY,WAAY,wCAI9Dd,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEE,OAAQ,UACjBL,IAAAC,cAACqC,IAAmB,CAAClC,MAAM,OAAOC,OAAO,QACvCL,IAAAC,cAACsC,IAAQ,CAACzD,MAAqB,OAAfS,QAAe,IAAfA,OAAe,EAAM,QAANpF,EAAfoF,EAAiBT,YAAI,IAAA3E,OAAA,EAArBA,EAAuBuK,OAAO/E,GAAsB,OAAjBA,EAAEvB,cAAwB,IAC3E4B,IAAAC,cAACuC,IAAa,CAACC,gBAAgB,MAAMC,OAAO,YAC5C1C,IAAAC,cAAC0C,IAAK,CAACC,QAAQ,OAAOC,KAAM,CAAEC,KAAM,aACpC9C,IAAAC,cAAC8C,IAAK,CAAC4B,OAAQ,EAAE,EAAG,IAAK9B,KAAM,CAAEC,KAAM,aACvC9C,IAAAC,cAAC+C,IAAO,CACNC,aAAc,CACZC,gBAAiB,UACjB3B,aAAc,WACdC,UAAW,0EACX2B,OAAQ,QAEVC,UAAWA,CAAC7E,EAAOlD,IAAS,CACjB,eAATA,KAA2BkD,KAAWA,EAC7B,eAATlD,EAAwB,cAAgBA,GAE1CgI,eAAgBA,CAACC,EAAOC,KAAU,IAAAqB,EAChC,MAAMnB,EAAiB,OAALF,QAAK,IAALA,OAAK,EAAK,QAALqB,EAALrB,EAAQ,UAAE,IAAAqB,OAAA,EAAVA,EAAYlB,QAC9B,SAAUJ,KAAiB,OAATG,QAAS,IAATA,OAAS,EAATA,EAAW/E,WAAY,eAAiB,qBAG9DsB,IAAAC,cAAC0D,IAAM,CAACC,aAAc,CAAEC,WAAY,UAEpC7D,IAAAC,cAAC6D,IAAa,CACZe,EAAG,EACHnC,OAAO,UACPoC,YAAa,IAGf9E,IAAAC,cAAC6D,IAAa,CACZC,EAAkB,OAAfxE,QAAe,IAAfA,OAAe,EAAM,QAANnF,EAAfmF,EAAiBT,YAAI,IAAA1E,OAAA,EAAwB,QAAxBC,EAArBD,EAAwBuG,UAAqB,IAAAtG,OAAA,EAA7CA,EAA+CgB,KAClDqH,OAAO,UACPD,gBAAgB,MAChBa,MAAO,CAAE/E,MAAO,QAASyF,SAAU,gBAAiBlB,KAAM,aAG5D9C,IAAAC,cAACgE,IAAG,CACFrB,QAAQ,aACRvH,KAAK,kBACLyH,KAAOoB,IAEL,MAAMzI,EA9SE2C,IACH,OAAfA,EAA4B,UAC5BA,GAAc,GAAW,UACzBA,GAAc,EAAU,UACxBA,GAAc,EAAU,UACrB,UAySqB2G,CAAeb,EAAM9F,YACnC,OAAO8F,EAAMxF,UAAYjD,GAE3B0I,QAAUD,GAAUA,EAAMxF,UAAY,GAAM,EAC5C0F,OAAQ,CAAC,EAAG,EAAG,EAAG,QAO1BpE,IAAAC,cAACC,IAAG,CAACC,GAAI,CACPG,QAAS,OACTE,eAAgB,gBAChB6D,GAAI,EACJC,GAAI,EACJC,UAAW,qBACX9I,MAAO,UACP+I,SAAU,aAEVxE,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,WACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CACPC,MAAO,GACPC,OAAQ,GACR6C,gBAAiB,UACjB3B,aAAc,EACdkD,GAAI,KAENzE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,SAAQ,2BAE9BV,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,WACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CACPC,MAAO,GACPC,OAAQ,GACR6C,gBAAiB,UACjB3B,aAAc,EACd4C,QAAS,GACTM,GAAI,KAENzE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,SAAQ,4BAMlCV,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEoB,aAAc,EAAGC,UAAW,0EACvCxB,IAAAC,cAACC,IAAG,CAACC,GAAI,CACPmB,EAAG,EACHhB,QAAS,OACTE,eAAgB,gBAChBD,WAAY,SACZyE,OAAQ,UACRC,aAAclK,EAAgB,oBAAsB,OACpDmK,UAAW,CAAEhC,gBAAiB,YAC7BiC,QAASA,IAAMnK,GAAkBD,IAClCiF,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,WAAY,wBAGvDd,IAAAC,cAACmF,IAAU,CAACC,KAAK,SACdtK,EAAgBiF,IAAAC,cAACqF,IAAmB,MAAMtF,IAAAC,cAACsF,IAAqB,QAIrEvF,IAAAC,cAACuF,IAAQ,CAACC,GAAI1K,GACZiF,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEmB,EAAG,EAAGoE,UAAW,SAC1B1F,IAAAC,cAAA,SAAO0F,MAAO,CACZC,SAAU,OACVC,eAAgB,WAChBC,cAAe,EACftB,SAAU,aAEVxE,IAAAC,cAAA,aACED,IAAAC,cAAA,MAAI0F,MAAO,CAAEzC,gBAAiB,YAC5BlD,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,YAAaC,UAAW,OAAQlF,WAAY,SAAUrF,MAAO,UAAWwJ,aAAc,sBAAuB,WACnIjF,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,YAAaC,UAAW,OAAQlF,WAAY,SAAUrF,MAAO,UAAWwJ,aAAc,sBAAuB,UACnIjF,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,YAAaC,UAAW,OAAQlF,WAAY,SAAUrF,MAAO,UAAWwJ,aAAc,sBAAuB,eACnIjF,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,YAAaC,UAAW,OAAQlF,WAAY,SAAUrF,MAAO,UAAWwJ,aAAc,sBAAuB,YAGvIjF,IAAAC,cAAA,aACkB,OAAfV,QAAe,IAAfA,OAAe,EAAM,QAANjF,EAAfiF,EAAiBT,YAAI,IAAAxE,OAAA,EAArBA,EAAuB2L,IAAI,CAACtI,EAASuI,IACpClG,IAAAC,cAAA,MAAIkG,IAAKD,EAAKP,MAAO,CAAEzC,gBAAiBvF,EAAQe,UAAY,UAAY,UACtEsB,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,YAAajF,WAAY,SAAUrF,MAAO,UAAWwJ,aAAc,sBACtFtH,EAAQtC,KACRsC,EAAQe,WAAasB,IAAAC,cAAA,QAAM0F,MAAO,CAAES,WAAY,MAAO5B,SAAU,UAAW/I,MAAO,YAAa,gBAEnGuE,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,YAAatK,MAAO,UAAWwJ,aAAc,sBAAwBtH,EAAQY,MAAMsD,kBACzG7B,IAAAC,cAAA,MAAI0F,MAAO,CACTI,QAAS,YACTjF,WAAY,SACZrF,MAA8B,OAAvBkC,EAAQS,WAAsB,UAC/BT,EAAQS,YAAc,GAAK,UAC3BT,EAAQS,YAAc,EAAI,UAC1BT,EAAQS,YAAc,EAAI,UAC1B,UACN6G,aAAc,oBACdd,QAASxG,EAAQe,UAAY,GAAM,IAEX,OAAvBf,EAAQS,WAAsB,SAAWT,EAAQS,YAAc,EAAI,IAAM,KAAKT,EAAQS,eAEzF4B,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,YAAatK,MAAO,UAAWwJ,aAAc,sBAChEtH,EAAQe,UAAY,YAAc,yCC3oBlD,MAAM2H,EAAe,CAC1B3K,cAAiB,SACjBC,cAAiB,SACjBC,cAAiB,qBACjBC,cAAiB,WACjBC,cAAiB,UACjBV,IAAO,cAOIkL,EAAoB,CAC/B5K,cAAiB,UACjBC,cAAiB,UACjBC,cAAiB,UACjBC,cAAiB,UACjBC,cAAiB,WAINyK,GAAe,CAC1B7K,cAAiB,CAAE8K,IAAK,QAASC,KAAM,SACvC9K,cAAiB,CAAE6K,IAAK,QAASC,KAAM,SACvC7K,cAAiB,CAAE4K,IAAK,QAASC,KAAM,SACvC5K,cAAiB,CAAE2K,IAAK,QAASC,KAAM,SACvC3K,cAAiB,CAAE0K,IAAK,QAASC,KAAM,WAInCC,GAAuB,CAE3BC,aAAc,CACZH,IAAK,QACLC,KAAM,OACNG,KAAM,gBACNC,QAAS,6CAEXC,cAAe,CACbN,IAAK,QACLC,KAAM,OACNG,KAAM,gBACNC,QAAS,6BAEXE,sBAAuB,CACrBP,IAAK,QACLC,KAAM,OACNG,KAAM,gBACNC,QAAS,6BAIXG,OAAU,CACRR,IAAK,QACLC,KAAM,QACNG,KAAM,gBACNC,QAAS,wCAEXI,eAAgB,CACdT,IAAK,QACLC,KAAM,QACNG,KAAM,gBACNC,QAAS,wCAEXK,OAAU,CACRV,IAAK,QACLC,KAAM,QACNG,KAAM,gBACNC,QAAS,mCAEXM,MAAS,CACPX,IAAK,QACLC,KAAM,QACNG,KAAM,gBACNC,QAAS,2CAIXO,sBAAuB,CACrBZ,IAAK,QACLC,KAAM,QACNG,KAAM,gBACNC,QAAS,kDAEXQ,gBAAiB,CACfb,IAAK,QACLC,KAAM,QACNG,KAAM,gBACNC,QAAS,oCAIXS,iBAAkB,CAChBd,IAAK,QACLC,KAAM,QACNG,KAAM,gBACNC,QAAS,8CAEXU,gBAAiB,CACff,IAAK,QACLC,KAAM,QACNG,KAAM,gBACNC,QAAS,uCAIXW,QAAW,CACThB,IAAK,QACLC,KAAM,SACNG,KAAM,gBACNC,QAAS,0CAEXY,mBAAoB,CAClBjB,IAAK,QACLC,KAAM,SACNG,KAAM,gBACNC,QAAS,+BAKPa,GAA0B,CAC9BhM,cAAiB,CAAC,aAAc,cAAe,uBAC/CC,cAAiB,CAAC,SAAU,eAAgB,SAAU,SACtDC,cAAiB,CAAC,sBAAuB,iBACzCC,cAAiB,CAAC,iBAAkB,iBACpCC,cAAiB,CAAC,UAAW,qBAIlB6L,GAAmB,GAGhCrL,OAAOC,KAAKgK,IAAc/J,QAAQC,IAChCkL,GAAiBlL,GAAU,IAGHiL,GAAwBjL,IAAW,IAE3CD,QAAQ,CAACnB,EAAMuM,KAAU,IAAAC,EACvC,MAAMC,KAAkBrL,EAAOsL,UAAU,EAAG,MAAM1M,EAAK2M,QAAQ,OAAQ,OAEvEL,GAAiBlL,GAAQkC,KAAK,CAC5BsJ,GAAIH,EACJzM,KAAMA,EACNwL,SAAmC,QAA1BgB,EAAAnB,GAAqBrL,UAAK,IAAAwM,OAAA,EAA1BA,EAA4BhB,gCAAiCR,EAAa5J,SAKvF,MAAMyL,EAAc,EAAIP,GAAiBlL,GAAQmD,OACjD,GAAIsI,EAAc,EAChB,IAAK,IAAIzK,EAAI,EAAGA,EAAIyK,EAAazK,IAAK,CACpC,MAAM0K,EAAW9B,EAAa5J,GACxB2L,EAAW,CAAC,WAAY,UAAW,cAAe,eAAgB,cAClE/M,KAAU8M,KAAYC,EAAS3K,EAAI2K,EAASxI,WAAWnC,EAAE,IACzDqK,KAAkBrL,EAAOsL,UAAU,EAAG,cAActK,EAAE,IAE5DkK,GAAiBlL,GAAQkC,KAAK,CAC5BsJ,GAAIH,EACJzM,KAAMA,EACNwL,wBAAyBsB,SAOjC,MAAME,GAAkBC,IACtB,IAAKA,EAAY,OAAO,EACxB,IACE,MAAMC,EAAOC,YAASF,GAChBG,EAAM,IAAI7L,KAChB,OAAO2L,EAAKrL,aAAeuL,EAAIvL,YAAcqL,EAAKzL,gBAAkB2L,EAAI3L,cACxE,MAAO4L,GACP,OAAO,IAmuBEC,GAAmBC,IAE9B,MAAMnM,EAASmM,EAAYnM,QAAUmM,EAAYC,SAAWD,EAAYhC,KAGxE,GAAInK,GAAU8J,GAAa9J,GACzB,OAAOA,EAIT,MAAM0L,EAAWS,EAAYhC,MAAQgC,EAAYT,SACjD,GAAIA,EAEF,IAAK,MAAOF,EAAI5M,KAASiB,OAAOwM,QAAQzC,GACtC,GAAIhL,EAAK0N,gBAAkBZ,EAASY,cAClC,OAAOd,EAMb,MA95B4B,+BCD9B,MAAM5B,GAAe,CACnB3K,cAAiB,SACjBC,cAAiB,SACjBC,cAAiB,qBACjBC,cAAiB,WACjBC,cAAiB,UACjBV,IAAO,cAIH4N,GAAY,CAChBtN,cAAiB,CACfL,KAAM,SACN4N,WAAY,IACZC,mBAAoB,KACpBC,iBAAkB,IAAIvM,KAAK,cAC3BwM,eAAgB,IAChBC,gBAAiB,IAEnB1N,cAAiB,CACfN,KAAM,SACN4N,WAAY,MACZC,mBAAoB,KACpBC,iBAAkB,IAAIvM,KAAK,cAC3BwM,eAAgB,IAChBC,gBAAiB,IAEnBzN,cAAiB,CACfP,KAAM,qBACN4N,WAAY,MACZC,mBAAoB,KACpBC,iBAAkB,IAAIvM,KAAK,cAC3BwM,eAAgB,GAChBC,gBAAiB,IAEnBxN,cAAiB,CACfR,KAAM,WACN4N,WAAY,KACZC,mBAAoB,KACpBC,iBAAkB,IAAIvM,KAAK,cAC3BwM,eAAgB,IAChBC,gBAAiB,IAEnBvN,cAAiB,CACfT,KAAM,UACN4N,WAAY,KACZC,mBAAoB,IACpBC,iBAAkB,IAAIvM,KAAK,cAC3BwM,eAAgB,GAChBC,gBAAiB,KAKfC,GAAqB,CACzBC,EAAG,IACHC,EAAG,EACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KAICC,GAAsB,CAC1BL,EAAG,IACHC,EAAG,IACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHE,EAAG,KACHC,EAAG,IACHC,EAAG,KACHC,EAAG,IACHC,EAAG,KACHC,GAAI,EACJC,GAAI,KAWC,SAASC,GAAoBC,EAAa9P,GAA0B,IAAZ+P,EAAKC,UAAA3K,OAAA,QAAA4K,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAErE,IAAKF,GAAsC,IAAvBA,EAAYzK,OAC9B,MAAO,CACL6K,SAAU,GACVC,QAAS,CACPC,kBAAmB,EACnBC,qBAAsB,EACtBC,uBAAwB,IAM9B,MAAMC,EAoRR,SAAkCT,EAAa9P,GAC7C,IAAK8P,GAAsC,IAAvBA,EAAYzK,OAAc,MAAO,GAGrD,MAAMuI,EAAW9B,GAAa9L,IAAiBA,EAG/C,OAAO8P,EACJ3F,OAAOqG,GAEe,QAAjBxQ,OACqBiQ,IAAhBO,EAAMnM,OACNtC,OAAO2C,OAAOoH,IACX3B,OAAOrJ,GAAiB,eAATA,GACf2P,KAAK3P,QAAwBmP,IAAhBO,EAAM1P,SAEFmP,IAApBO,EAAM5C,IAGhBlC,IAAI8E,IAEH,IAAIE,EAcJ,OAXIA,EAFiB,QAAjB1Q,OACkBiQ,IAAhBO,EAAMnM,MACCmM,EAAMnM,MAGNtC,OAAO2C,OAAOoH,IACpB3B,OAAOrJ,GAAiB,eAATA,GACf0G,OAAO,CAACC,EAAK3G,IAAS2G,GAAO+I,EAAM1P,IAAS,GAAI,GAG5C0P,EAAM5C,IAAa,EAGvB,CACL9M,KAAM0P,EAAM1P,KACZ4P,OAAQA,EACRF,MAAOA,EAAMA,OAAS,KAEtBxC,KAAMwC,EAAMxC,MAAQ,QAGvB7D,OAAOqG,GAASA,EAAME,OAAS,GA/TXC,CAAyBb,EAAa9P,GAGvD4Q,EAAa,IAAIvO,KAAK,KAAM,EAAG,IAE/BwO,EAAyBN,EAAepG,OAAOqG,IAEnD,IAAIM,EACJ,IACE,MAAMC,EAAQP,EAAM1P,KAAKkQ,MAAM,KACzBC,EAAYF,EAAM,GAClBhN,EAAOmN,SAASH,EAAM,IAGtBI,EAAW,CACfC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EACzDC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,GAAIC,IAAO,SAGhC9B,IAAxBkB,EAASF,IAA6Be,MAAMjO,KAC9C+M,EAAY,IAAIzO,KAAK0B,EAAMoN,EAASF,GAAY,IAElD,MAAO9C,GACP8D,QAAQC,MAAM,sCAAuC1B,EAAM1P,KAAMqN,GAInE,OAAQ2C,GAAaA,GAAaF,IAI9BuB,EAAsBtB,EAAuBxL,OAAS,EACxDwL,EAAuBA,EAAuBxL,OAAS,GACvDkL,EAAeA,EAAelL,OAAS,GAG3C,IAAK8M,EACH,MAAO,CACLjC,SAAU,GACVC,QAAS,CACPC,kBAAmB,EACnBC,qBAAsB,EACtBC,uBAAwB,IAM9B,MAAM8B,EAA8B,QAAjBpS,EAAyByO,GAAUzO,GAAgB,CACpEc,KAAM,aACN6N,mBAAoB,KACpBE,eAAgB,IAChBC,gBAAiB,IAInB,IASIuD,EANAC,EAHoBH,EAAoBzB,OAGD,IAO3C,GAJA4B,EAAmB7P,KAAK8P,IAAID,EAAkBF,EAAWtD,iBAAmB,IAIxE+B,EAAuBxL,QAAU,EAAG,CAEtC,MAAMX,EAASmM,EAAuBnF,IAAI8G,GAAKA,EAAE9B,QAIjD2B,EAHY3N,EAAO8C,OAAO,CAACC,EAAKgL,IAAQhL,EAAMgL,EAAK,GAAK/N,EAAOW,OAGrC,IAG1BgN,EAAoB5P,KAAK8P,IAAIF,EAAmBD,EAAWtD,iBAAmB,SAE9EuD,EAAoBC,EAItB,MAMOrB,EAAWyB,GAAWP,EAAoBrR,KAAKkQ,MAAM,KACtD2B,EAPe,CACnBvB,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EACzDC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,GAAIC,IAAO,IAK5Bd,GAC1B3O,EAAY4O,SAASwB,GAEX,IAAIrQ,KAAKC,EAAWqQ,EAAY,IAG5B,IAAItQ,KAAxB,MAGMsM,EAAqByD,EAAWzD,oBAAsB,KAKtDiE,EAJqBnQ,KAAKe,IAAImL,EAAoB,EAAE,KAGnC,EAA0C,KAArCyD,EAAWvD,gBAAkB,MAInDgE,EAAgB,GACtB,IAAIC,EAAgBR,EAGhBS,EAAsB,IAAI1Q,KAE9B,IAAK,IAAIa,EAAI,EAAGA,EAAI6M,EAAO7M,IAAK,CAE9B,MAAM8P,EAAWC,aAASF,EAAqB7P,GACzCgQ,EAAczQ,KAAKC,MAAMsQ,EAASG,UAAY,GAC9C3C,EAAQwC,EAASrQ,WAGvBmQ,GAAiBF,EAKjBE,IAFqB/D,GAAmBmE,IAAgB,IAClC7D,GAAoBmB,IAAU,GAKpDsC,GADuC,IAAhBrQ,KAAKkB,SAAkB,KAA5B,EAIlBmP,EAAgBrQ,KAAK8P,IAAIO,EAAeV,EAAWtD,iBAAmB,IAGtE,MAAMsE,EAAgBC,YAAOL,EAAU,eACjCM,EAAYD,YAAOL,EAAU,SACnCH,EAAczO,KAAK,CACjBtD,KAAMwS,EACNC,SAAUH,EACV1C,OAAQjO,KAAKmB,MAAMkP,GACnB3O,WAAW,EACXqM,MAAO6C,YAAOL,EAAU,WACxBQ,KAAMH,YAAOL,EAAU,gBAK3B,MAAMS,EAoCR,SAAwC3D,GACtC,IAAKA,GAAeA,EAAYzK,OAAS,EAAG,OAAOyK,EAEnD,MAAM4D,EAAa,GAGnB,IAAK,IAAIxQ,EAAI,EAAGA,EAAI4M,EAAYzK,OAAQnC,IAAK,CAC3C,MAAMsN,EAAQV,EAAY5M,GAGpB6N,EAAQP,EAAM1P,KAAKkQ,MAAM,KACzBC,EAAYF,EAAM,GAClBhN,EAAOmN,SAASH,EAAM,IAGtBI,EAAW,CACfC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EACzDC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,EAAGC,IAAO,GAAIC,IAAO,IAG5D,QAA4B9B,IAAxBkB,EAASF,IAA4Be,MAAMjO,GAAO,CAEpD2P,EAAWtP,KAAKoM,GAChB,SAGF,MAAMmD,EAAcxC,EAASF,GAIvB2C,GAHW,IAAIvR,KAAK0B,EAAM4P,EAAa,GAGzB,IAAItR,KAAK0B,EAAM4P,EAAc,EAAG,GAAGR,WACjDU,EAAepR,KAAKqR,KAAKF,EAAc,GAGvCG,EAAYjE,EAAY5M,EAAI,GAClC,IAAI8Q,EAAkBxD,EAAME,OACxBqD,IACFC,EAAkBD,EAAUrD,QAK9B,IAAK,IAAI8C,EAAO,EAAGA,EAAOK,EAAcL,IAAQ,CAE9C,MAAMS,EAAUxR,KAAKyR,IAAW,EAAPV,EAAW,EAAGI,GACjCZ,EAAW,IAAI3Q,KAAK0B,EAAM4P,EAAaM,GAGvCxK,EAAW+J,EAAOK,EAGxB,IAAIM,EACJ,GAAIjR,EAAI4M,EAAYzK,OAAS,EAE3B8O,EAAa3D,EAAME,QAAU,EAAIjH,GAAYuK,EAAkBvK,MAC1D,CAEL,MAAM2K,EAAS,EAAuB,IAAlB3K,EAAW,IAC/B0K,EAAa3D,EAAME,OAAS0D,EAI9B,MAAMC,EAAatF,GAAmByE,IAAS,EAC/CW,GAAcE,EAGd,MAAM3Q,EAAoC,IAAhBjB,KAAKkB,SAAkB,IAA5B,EACrBwQ,GAAczQ,EAGd,MAAM4P,EAAYD,YAAOL,EAAU,SAC7BI,EAAgBC,YAAOL,EAAU,eAEvCU,EAAWtP,KAAK,CACdtD,KAAMwS,EACNC,SAAUH,EACV1C,OAAQjO,KAAKmB,MAAMuQ,EAAaN,GAChCrD,MAAO6C,YAAOL,EAAU,WACxBQ,KAAMH,YAAOL,EAAU,cACvB7O,WAAW,KAKjB,OAAOuP,EAxHsBY,CAA+B/D,GAGtDgE,EAAc1B,EAAcrL,OAAO,CAACC,EAAK+L,IAAS/L,EAAM+L,EAAK9C,OAAQ,GACrE8D,EAAqBD,EAAc,IACnCE,EAAkBF,EAAc1B,EAAcxN,OAG9CqP,EAA8D,KAA5CD,EAAkBpC,EAAqB,GAW/D,MAAO,CACLnC,SATe,IACZuD,EAAqB/H,IAAI8H,IAAI,IAC3BA,EACHrP,WAAW,QAEV0O,GAKHY,uBACAZ,gBACA1C,QAAS,CACPC,kBAAmB3N,KAAKmB,MAA2B,GAArB4Q,GAC9BnE,qBAAsB5N,KAAKmB,MAAwB,IAAlB6Q,GACjCE,oBAAqBlS,KAAKmB,MAAM6Q,GAChCnE,uBAAwBoE,EACxB9G,SAAU9B,GAAa9L,IAAiB,mBC5O9C,MAAM4U,GAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAq1DnEC,OAn1DGA,KAChB,MAAO1U,EAASC,GAAcC,oBAAS,IAChCyU,EAAcC,GAAmB1U,mBAAS,KAC1CL,EAAcgV,GAAmB3U,mBF1CZ,kBE2CrBU,EAAWkU,GAAgB5U,mBAAS6U,YAAU,IAAI7S,KAAQ,MAC1D8S,EAASC,GAAc/U,mBAAS,IAAIgC,OACpCgT,EAAYC,GAAiBjV,mBAAS,KACtCkV,EAAqBC,GAA0BnV,mBAAS,KAGxDoV,EAAoBC,GAAyBrV,mBAAS,QACtDsV,GAAkBC,IAAuBvV,mBAAS,QAGlDwV,GAAWC,IAAgBzV,mBAAS,OACpC0V,GAASC,IAAc3V,mBAAS,KAChC4V,GAAaC,IAAkB7V,mBAAS,OACxC8V,GAASC,IAAc/V,mBAAS,MAGjCgW,GAAwBC,kBAAQ,KACpC,MAAMC,EAAQ,GAGRC,EAAiB,GACvBzU,OAAOC,KAAKoL,IAAkBnL,QAAQC,IACpCkL,GAAiBlL,GAAQD,QAAQwU,IAC/BD,EAAeC,EAAWnK,SAAWmK,EAAW3V,SAKpD,MAAM4V,EAAsB,GAmG5B,OAlGA5B,EAAa7S,QAAQoM,IACnB,GAAIA,EAAYsI,UAAYtI,EAAYsI,SAASC,SAAWvI,EAAYwI,QAAUxI,EAAYwI,OAAOC,GAAI,CACvG,MAAMC,EAAY1I,EAAYsI,SAASC,QACjCtK,EAAU+B,EAAYwI,OAAOC,GAE9BJ,EAAoBK,KACvBL,EAAoBK,GAAa,IAInCL,EAAoBK,GAAWzK,IAAYoK,EAAoBK,GAAWzK,IAAY,GAAK,KAK/FvK,OAAOC,KAAK0U,GAAqBzU,QAAQ8U,IACvC,MAAMC,EAAYN,EAAoBK,GACtC,IAAIE,EAAoB,KACpBC,EAAW,EAWf,GARAnV,OAAOC,KAAKgV,GAAW/U,QAAQqK,IACzB0K,EAAU1K,GAAW4K,IACvBD,EAAoB3K,EACpB4K,EAAWF,EAAU1K,MAKrB2K,GAAqBT,EAAeS,GAEtC,YADAV,EAAMQ,GAAaP,EAAeS,IAKpC,IAAIE,EAAY,KACZC,EAAY,EAuBhB,GApBArV,OAAOC,KAAKwU,GAAgBvU,QAAQoV,IAElC,MAAMC,EAAaD,EAAa7I,cAAcwC,MAAM,UAC9CuG,EAAcN,EAAoBA,EAAkBzI,cAAcwC,MAAM,UAAY,GAE1F,IAAIwG,EAAU,EACdD,EAAYtV,QAAQwV,IACdA,EAAKpS,OAAS,GAAKiS,EAAWI,SAASD,IACzCD,MAIJ,MAAMG,EAAQH,EAAU/U,KAAK8P,IAAI+E,EAAWjS,OAAQkS,EAAYlS,QAC5DsS,EAAQP,IACVA,EAAYO,EACZR,EAAYX,EAAea,MAK3BF,GAAaC,EAAY,GAC3Bb,EAAMQ,GAAaI,MACd,CAEL,MAAMS,EAAgB,GACtB9C,EAAa7S,QAAQoM,IACfA,EAAYsI,UAAYtI,EAAYsI,SAASC,UAAYG,GAAa1I,EAAYnM,SACpF0V,EAAcvJ,EAAYnM,SAAW0V,EAAcvJ,EAAYnM,SAAW,GAAK,KAKnF,IAAI2V,EAAiB,KACjBC,EAAe,EASnB,GARA/V,OAAOC,KAAK4V,GAAe3V,QAAQC,IAC7B0V,EAAc1V,GAAU4V,IAC1BA,EAAeF,EAAc1V,GAC7B2V,EAAiB3V,KAKjB2V,GAAkBzK,GAAiByK,IAAmBzK,GAAiByK,GAAgBxS,OAAS,EAAG,CACrG,MACM0S,EAAehW,OAAOC,KAAK0U,GAAqBsB,QAAQjB,GAAa3J,GAAiByK,GAAgBxS,OAC5GkR,EAAMQ,GAAa3J,GAAiByK,GAAgBE,GAAcjX,UAGlEyV,EAAMQ,iBAA2BA,EAAUvJ,UAAU,EAAG,QAM9D+I,EAAoC,6BAAI,aACxCA,EAAoC,6BAAI,cACxCA,EAAoC,6BAAI,sBACxCA,EAAoC,6BAAI,SAEjCA,GACN,CAACzB,IAGJpU,oBAAU,KACUuX,WAChB,IACEhG,QAAQiG,IAAI,+BACZ,MAAMC,QAAiBC,MAAM,sBAG7B,GAFAnG,QAAQiG,IAAI,mBAAoBC,EAASE,SAEpCF,EAASG,GACZ,MAAM,IAAIC,6BAA6BJ,EAASE,UAGlD,MAAM9T,QAAa4T,EAASK,OAI5B,GAHAvG,QAAQiG,IAAI,2CAA4C3T,EAAKc,QAGzDd,EAAKc,OAAS,EAAG,KAAAoT,EACnB,MAAMC,EAASnU,EAAK,GACpB0N,QAAQiG,IAAI,iBAAkBQ,GAC9BzG,QAAQiG,IAAI,qBAAsB,CAChCS,YAA0B,QAAfF,EAAEC,EAAO7B,cAAM,IAAA4B,OAAA,EAAbA,EAAeE,YAC5BC,aAAcF,EAAOE,aACrBC,UAAWH,EAAOG,UAClBC,UAAWJ,EAAOI,YAKtB,IACE,MAAMC,EAAaxU,EAChBmH,IAAIsN,IACH,IAAI,IAAAC,EAEF,MAAMC,GACI,QAARD,EAAAD,EAAEnC,cAAM,IAAAoC,OAAA,EAARA,EAAUN,cACVK,EAAEJ,cACFI,EAAEH,WACFG,EAAEF,UAEJ,IAAKI,EAAS,OAAO,KACrB,MAAMlL,EAAO,IAAI3L,KAAK6W,GACtB,OAAOlH,MAAMhE,EAAKmL,WAAa,KAAOnL,EACtC,MAAOG,GACP,OAAO,QAGVhE,OAAO6D,GAAiB,OAATA,GAElB,GAAI+K,EAAW1T,OAAS,EAAG,CACzB,MAAM+T,EAAW,IAAI/W,KAAKI,KAAKyR,OAAO6E,EAAWrN,IAAIsN,GAAKA,EAAEG,aACtDE,EAAS,IAAIhX,KAAKI,KAAK8P,OAAOwG,EAAWrN,IAAIsN,GAAKA,EAAEG,aAC1DlH,QAAQiG,IAAI,cAAe,CACzBkB,SAAUA,EAASE,cACnBD,OAAQA,EAAOC,gBAIbF,EAAWrY,GACbkU,EAAamE,GAEXC,EAASlE,GACXC,EAAWiE,QAGbpH,QAAQiG,IAAI,oCAEd,MAAOqB,GACPtH,QAAQC,MAAM,gCAAiCqH,GAGjDxE,EAAgBxQ,GAChBnE,GAAW,GACX,MAAO8R,GACPD,QAAQC,MAAM,uBAAwBA,GACtCD,QAAQiG,IAAI,2BAEZ,MAAMsB,EAAeC,MAAMC,KAAK,CAACrU,OAAQ,IAAK,CAACsU,EAAGzW,KAAC,CACjDwK,aAAcxK,IACdoL,QAAS,gBACTsL,cAAe1W,EAAI,IAAM,EAAI,cAAgB,aAC7C2W,cAAe,eAAiBpX,KAAKC,MAAMQ,EAAI,IAC/C4W,8BAA+BrX,KAAKC,MAAMQ,EAAI,MAC9C6W,QAAS,GAAqB,GAAhBtX,KAAKkB,SACnB2I,WAAY,IAAMpJ,iCAClB2T,OAAQ,CACN8B,YAAa,IAAItW,KAAK,KAAM,EAAGa,EAAI,GAAK,GAAGoW,kBAG/CrH,QAAQiG,IAAI,uBAAwBsB,EAAanU,OAAQ,WACzD0P,EAAgByE,GAChBpZ,GAAW,KAIf4Z,IACC,IAGHtZ,oBAAU,KACRuR,QAAQiG,IAAI,mBAAoBlY,EAAc,sBAAuBgM,GAAahM,IAC7D,QAAjBA,GAEF8V,GAAa9J,GAAa7K,eAC1B6U,GAAW,KAEXF,GAAa9J,GAAahM,IAC1BgW,GAAW,MAEZ,CAAChW,IAGJU,oBAAU,KACJuV,IAAeJ,KACjB5D,QAAQiG,IAAI,kBAAmBrC,GAAW,aAAcE,IACxDE,GAAYgE,MAAMpE,IAClBI,GAAYiE,QAAQnE,MAErB,CAACF,GAAWE,GAASE,KAGxBvV,oBAAU,KACYuX,WAClB,IAAKnD,EAAazP,OAAQ,OAG1B4M,QAAQiG,IAAI,4BAA6BpD,EAAazP,QACtD,MAAM8U,EAAkBrF,EAAatN,OAAO,CAAC4S,EAAKC,KAChD,MAAMnY,EAASkM,GAAgBiM,GAE/B,OADAD,EAAIlY,IAAWkY,EAAIlY,IAAW,GAAK,EAC5BkY,GACN,IAKH,GAJAnI,QAAQiG,IAAI,8BAA+BiC,GAC3ClI,QAAQiG,IAAI,uCAAwClY,GAGhD8U,EAAazP,OAAS,EAAG,CAC3B,MAAMqT,EAAS5D,EAAa,GAC5B7C,QAAQiG,IAAI,kCAAmC,CAC7CxK,GAAIgL,EAAOhL,IAAMgL,EAAO4B,cACxBpY,OAAQwW,EAAOxW,OACfoM,QAASoK,EAAOpK,QAChBjC,KAAMqM,EAAOrM,KACbkO,iBAAkBnM,GAAgBsK,KAKtC,MAAM8B,EAAwC,QAAjBxa,EACzB8U,EACAA,EAAa3K,OAAOkQ,IAClB,MAAME,EAAmBnM,GAAgBiM,GACnC7C,EAAU+C,IAAqBva,EAKrC,OAHI8U,EAAakD,QAAQqC,GAAO,GAC9BpI,QAAQiG,uBAAuBmC,EAAI3M,IAAM2M,EAAIC,yBAAyBD,EAAInY,4BAA4BqY,cAA6B/C,KAE9HA,IAGbvF,QAAQiG,oCAAoCsC,EAAqBnV,+CAGjE,MAAMoV,OFklB0BxC,WAEpC,MAAMyC,EAAsB,GAGtBC,EAAU,IAAIC,IACpB9F,EAAa7S,QAAQoY,IACnB,MAAMnY,EAASkM,GAAgBiM,GAC3BnY,GAAQyY,EAAQE,IAAI3Y,KAG1B+P,QAAQiG,IAAI,iDAAkDuB,MAAMC,KAAKiB,IAGpD,IAAjBA,EAAQ7P,OACV/I,OAAOC,KAAKgK,IAAc/J,QAAQyL,GAAMiN,EAAQE,IAAInN,IACpDuE,QAAQiG,IAAI,oDAIduB,MAAMC,KAAKiB,GAAS1Y,QAAQC,IAEtBkL,GAAiBlL,KACnBwY,EAAoBxY,GAAUkL,GAAiBlL,GAAQwJ,IAAI+K,IAAU,CACnE/I,GAAI+I,EAAW/I,GACf5M,KAAM2V,EAAW3V,KACjBwL,QAASmK,EAAWnK,QACpBpL,MAAO6K,EAAkB7J,IAAW,UACpCwO,OAAQ,GACRxO,OAAQA,QAMd4S,EAAa7S,QAAQoM,IACnB,MAAMnM,EAASkM,GAAgBC,GAG/B,GAFqBA,EAAYwL,eAAiBxL,EAAYd,cAEzDrL,IAAWwY,EAAoBxY,GAAS,OAG7C,MAAM4Y,EAAcrY,KAAKC,MAAMD,KAAKkB,SAAW+W,EAAoBxY,GAAQmD,QAC3EqV,EAAoBxY,GAAQ4Y,GAAapK,OAAOtM,KAAKiK,KAIvD,MAAM0M,EAAiBhZ,OAAO2C,OAAOgW,GAAqBM,OAK1D,OAHA/I,QAAQiG,sDAAsD6C,EAAe1V,+BAGtE0V,EAAerP,IAAI+K,IACxB,MAAMvU,EAASuU,EAAWvU,OACpB+Y,EAAajP,GAAa9J,IAAW8J,GAA4B,cAGjEkP,EAAe/O,GAAqBsK,EAAW3V,MAErD,GAAIoa,GAAgBA,EAAa7O,OAASnK,EACxC,MAAO,IACFuU,EACHxK,IAAKiP,EAAajP,IAClBC,IAAKgP,EAAahP,KAKtB,MAAMiP,EAAQ1Y,KAAKkB,SAAWlB,KAAK2Y,GAAK,EAClCvR,EAAS,IAAuB,IAAhBpH,KAAKkB,SACrBsI,EAAMgP,EAAWhP,IAAMxJ,KAAK4Y,IAAIF,GAAStR,EACzCqC,EAAM+O,EAAW/O,IAAMzJ,KAAK6Y,IAAIH,GAAStR,EAE/C,MAAO,IACF4M,EACHxK,MACAC,UE9pB0BqP,CAAuBf,GACjDvI,QAAQiG,IAAI,oCAAqCuC,GACjDjF,EAAuBiF,GAGvB,MAAM/J,OF8pBqBuH,WAC/BhG,QAAQiG,qDAAqDpD,EAAazP,uBAG1E,MAAMmW,EAAmB1G,EAAatN,OAAO,CAAC4S,EAAKC,KACjD,MAAMnY,EAASkM,GAAgBiM,GAE/B,OADAD,EAAIlY,IAAWkY,EAAIlY,IAAW,GAAK,EAC5BkY,GACN,IAEHnI,QAAQiG,IAAI,qDAAsDsD,GAGlE,MAAMC,EAAahZ,KAAKyR,IAAIY,EAAazP,OAAQ,KAC3CqW,EAAsB5G,EAAazO,MAAM,EAAGoV,GAG5Cd,EAAU,IAAIC,IACpBc,EAAoBzZ,QAAQoY,IAC1B,MAAMnY,EAASkM,GAAgBiM,GAC3BnY,GAAQyY,EAAQE,IAAI3Y,KAG1B+P,QAAQiG,IAAI,2DAA4DuB,MAAMC,KAAKiB,IAGnF,MAAMgB,EAAkB,GAClBC,EAAoB,GAG1BnC,MAAMC,KAAKiB,GAAS1Y,QAAQC,IACtBkL,GAAiBlL,IACnBkL,GAAiBlL,GAAQD,QAAQwU,IAC/BkF,EAAgBlF,EAAW/I,IAAM,CAC/B5M,KAAM2V,EAAW3V,KACjBwL,QAASmK,EAAWnK,QACpBpK,OAAQA,EACRhB,MAAO6K,EAAkB7J,IAAW,WAEtC0Z,EAAkBnF,EAAW3V,MAAQ,CACnC4M,GAAI+I,EAAW/I,GACfpB,QAASmK,EAAWnK,QACpBpK,OAAQA,EACRhB,MAAO6K,EAAkB7J,IAAW,eAM5C,MAAM2Z,EAAUH,EAAoBhQ,IAAI2C,IAAe,IAAAyN,EACrD,MAAM5Z,EAASkM,GAAgBC,GACzB4M,EAAajP,GAAa9J,IAAW8J,GAA4B,cAGvE,IAAIuB,EAAec,EAAYwL,eAAiBxL,EAAYd,aACxDwO,EAAiB,KAErB,IAAKxO,GAAgBH,GAAiBlL,GAAS,CAE7C,MAAM4Y,EAAcrY,KAAKC,MAAMD,KAAKkB,SAAWyJ,GAAiBlL,GAAQmD,QACxEkI,EAAeH,GAAiBlL,GAAQ4Y,GAAapN,GACrDqO,EAAiB3O,GAAiBlL,GAAQ4Y,GAAaha,UAC9CyM,GAAgBoO,EAAgBpO,KACzCwO,EAAiBJ,EAAgBpO,GAAczM,MAIjD,MAAMkb,GAC0B,QAA9BF,EAACH,EAAgBpO,UAAa,IAAAuO,OAAA,EAA7BA,EAA+B5a,QAChC6K,EAAkB7J,IAClB,UAGF,IAAI+J,EAAKC,EAGT,MAAM+P,EAAqBF,EAAiB5P,GAAqB4P,GAAkB,KAEnF,GAAIE,EAAoB,CAEtB,MAAMpS,EAAS,KAAwB,IAAhBpH,KAAKkB,SACtBwX,EAAQ1Y,KAAKkB,SAAWlB,KAAK2Y,GAAK,EACxCnP,EAAMgQ,EAAmBhQ,IAAMxJ,KAAK4Y,IAAIF,GAAStR,EACjDqC,EAAM+P,EAAmB/P,IAAMzJ,KAAK6Y,IAAIH,GAAStR,MAC5C,CAEL,MAAMA,EAAS,IAAuB,IAAhBpH,KAAKkB,SACrBwX,EAAQ1Y,KAAKkB,SAAWlB,KAAK2Y,GAAK,EACxCnP,EAAMgP,EAAWhP,IAAMxJ,KAAK4Y,IAAIF,GAAStR,EACzCqC,EAAM+O,EAAW/O,IAAMzJ,KAAK6Y,IAAIH,GAAStR,EAG3C,MAAO,CACLoC,MACAC,MACA8P,kBACA9Z,SACAga,aAAc,CACZC,aAAc9N,EAAY8N,cAAgB9N,EAAYuL,eAAiB,UACvEG,QAAS9V,WAAWoK,EAAY0L,SAAW1L,EAAY+N,cAAgB,GACvE9P,QAAS+B,EAAY/B,UAAY+B,EAAYwI,OAASxI,EAAYwI,OAAOC,GAAK,mBAC9EvJ,aAAcA,EACdwO,eAAgBA,EAChB1P,KAAMP,EAAa5J,IAAW,cAOpC,OAFA+P,QAAQiG,iDAAiD2D,EAAQxW,wBAE1DwW,GE5wBkBQ,CAAkB7B,GACvCvI,QAAQiG,IAAI,+BAAgCxH,GAC5C4E,EAAc5E,IAGhB4L,IACC,CAACxH,EAAc9U,IAGGsW,kBAAQ,KAC3B,MAAMiG,EAAU,GACV3Z,EAAc,IAAIP,KAElB8S,EAAU,IAAI9S,KAAKO,EAAYL,cAAeK,EAAYD,WAAa,EAAG,GAGhF,IAAK,IAAIO,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAM8K,EAAO,IAAI3L,KAAK8S,EAAQ5S,cAAe4S,EAAQxS,WAAaO,EAAG,GACrEqZ,EAAQnY,KAAK,CACXJ,MAAO,CAAEwM,MAAOxC,EAAKrL,WAAYoB,KAAMiK,EAAKzL,eAC5CwG,MAAOiF,EAAK1G,eAAe,UAAW,CAAEkJ,MAAO,OAAQzM,KAAM,cAGjE,OAAOwY,GACN,IAfH,MAkBM/B,GAAuBlE,kBAAQ,KACnCrE,QAAQiG,IAAI,+BAAgC,CAC1CsE,kBAAmB1H,EAAazP,OAChCrF,eACAe,UAAWA,EAAUuY,cACrBnE,QAASA,EAAQmE,cACjB7D,qBACAgH,kBAAmB3H,EAAa,KAGlC,MAAM4H,EAAW5H,EAAa3K,OAAOkE,IAAe,IAAAsO,EAOlD,GALItO,EAAYX,MAAsB,QAApBiP,EAAK7H,EAAa,UAAE,IAAA6H,OAAA,EAAfA,EAAiBjP,KACtCuE,QAAQiG,IAAI,gCAAiC7J,GAI1B,QAAjBrO,GAA0BqO,EAAYnM,SAAWlC,EACnD,OAAO,EAIT,GAA2B,QAAvByV,GAAgCpH,EAAY8N,eAAiB1G,EAC/D,OAAO,EAIT,GAAyB,QAArBE,MACEtH,EAAYsI,UAAYtI,EAAYsI,SAASC,UAAYjB,IAC7D,OAAO,EAIT,IAAIiH,GAAc,EACdC,GAAc,EAGlB,GAAIxO,EAAYwI,QAAUxI,EAAYwI,OAAO8B,YAAa,CACxDkE,GAAc,EACd,IAAI,IAAAC,EAAAC,EACF,MAAMC,EAAa,IAAI3a,KAAKgM,EAAYwI,OAAO8B,aAG3CtK,EAAYX,MAAsB,QAApBoP,EAAKhI,EAAa,UAAE,IAAAgI,OAAA,EAAfA,EAAiBpP,KAAMW,EAAYiM,iBAAiC,QAApByC,EAAKjI,EAAa,UAAE,IAAAiI,OAAA,EAAfA,EAAiBzC,iBAC3FrI,QAAQiG,IAAI,sBAAuB8E,GACnC/K,QAAQiG,IAAI,cAAenX,GAC3BkR,QAAQiG,IAAI,YAAa/C,GACzBlD,QAAQiG,IAAI,iBAAkB8E,EAAajc,GAAaic,EAAa7H,KAGjE6H,EAAajc,GAAaic,EAAa7H,IAC3CyH,GAAc,GAEhB,MAAO1K,GACPD,QAAQC,MAAM,sBAAuB7D,EAAYwI,OAAO8B,YAAazG,IAKzE,IAAK0K,GAAevO,EAAYuK,aAAc,CAC5CiE,GAAc,EACd,IACE,MAAMlE,EAAc,IAAItW,KAAKgM,EAAYuK,cACnCD,EAAc5X,GAAa4X,EAAcxD,IAC7CyH,GAAc,GAEhB,MAAO1K,GACPD,QAAQC,MAAM,8BAA+B7D,EAAYuK,aAAc1G,IAK3E,IAAK0K,GAAevO,EAAYwK,UAAW,CACzCgE,GAAc,EACd,IACE,MAAMI,EAAc,IAAI5a,KAAKgM,EAAYwK,WACnCoE,EAAclc,GAAakc,EAAc9H,IAC7CyH,GAAc,GAEhB,MAAO1K,GACPD,QAAQC,MAAM,2BAA4B7D,EAAYwK,UAAW3G,IAKrE,QAAI2K,IAAgBD,KAQtB,OADA3K,QAAQiG,IAAI,yBAA0BwE,EAASrX,QACxCqX,GACN,CAAC5H,EAAc9U,EAAcyV,EAAoBE,GAAkB5U,EAAWoU,IAI3E+H,IADY5G,kBAAQ,IF1QMxB,KAChC,IACE,MAAMqI,EAAY,GA4DlB,OAzDApb,OAAOC,KAAK8J,GAAc7J,QAAQC,IAChCib,EAAUjb,GAAU,CAClBwL,GAAIxL,EACJpB,KAAMgL,EAAa5J,GACnBwO,OAAQ,EACRqJ,QAAS,EACTqD,cAAe,EACfC,UAAW,IAAIzC,IACfH,YAAa,IAAIG,IACjB0C,cAAe,CACbC,YAAa,EACbC,WAAY,EACZC,OAAQ,EACRC,QAAS,MAMf5I,EAAa7S,QAAQoM,IACnB,MAAMnM,EAASmM,EAAYnM,OAG3B,IAAKib,EAAUjb,GAAS,OAGxBib,EAAUjb,GAAQwO,QAAU,EAG5B,MAAMqJ,EAAU9V,WAAWoK,EAAY+N,cAAgB,GACvDe,EAAUjb,GAAQ6X,SAAW/H,MAAM+H,GAAW,EAAIA,EAG9C1L,EAAYsP,YACdR,EAAUjb,GAAQmb,UAAUxC,IAAIxM,EAAYsP,YAI1CtP,EAAYsI,UAAYtI,EAAYsI,SAASC,SAC/CuG,EAAUjb,GAAQuY,YAAYI,IAAIxM,EAAYsI,SAASC,SAIrDvI,EAAY8N,eACdgB,EAAUjb,GAAQob,cAAcjP,EAAY8N,eACzCgB,EAAUjb,GAAQob,cAAcjP,EAAY8N,eAAiB,GAAK,KAKzEpa,OAAOC,KAAKmb,GAAWlb,QAAQC,IAC7B,MAAM0b,EAAQT,EAAUjb,GACxB0b,EAAMR,cAAgBQ,EAAMlN,OAAS,EAAKkN,EAAM7D,QAAU6D,EAAMlN,OAAU,EAC1EkN,EAAMP,UAAYO,EAAMP,UAAUvS,KAClC8S,EAAMnD,YAAcmD,EAAMnD,YAAY3P,OAGjC/I,OAAO2C,OAAOyY,GACrB,MAAOjL,GAEP,OADAD,QAAQC,MAAM,qCAAsCA,GAC7C,KEyMuB2L,CAAkBrD,IAAuB,CAACA,KAClDlE,kBAAQ,IFrMMxB,KACtC,IACE,MAAMoI,EAAkB,GAClBY,EAAuB,GAsG7B,OAnGAhJ,EAAa7S,QAAQoM,IACnB,IAAKA,EAAYsI,WAAatI,EAAYsI,SAASC,QAAS,OAE5D,MAAMG,EAAY1I,EAAYsI,SAASC,QACjC1U,EAASmM,EAAYnM,OAEtBgb,EAAgBnG,KACnBmG,EAAgBnG,GAAa,CAC3BrJ,GAAIqJ,EACJ1K,KAAMP,EAAa5J,IAAW,UAC9BA,OAAQA,EACRwO,OAAQ,EACRqJ,QAAS,EACTsD,UAAW,IAAIzC,IACfmD,mBAAoB,IAAInD,IACxBoD,cAAe,EACfC,kBAAmB,EACnBC,gBAAiB,GACjBC,aAAc,GACdC,eAAgB,MAMtBtJ,EAAa7S,QAAQoM,IACnB,IAAKA,EAAYsI,WAAatI,EAAYsI,SAASC,UAAYvI,EAAYsP,WAAY,OAEvF,MAAM5G,EAAY1I,EAAYsI,SAASC,QACjC+G,EAAatP,EAAYsP,WAG/B,IAAKT,EAAgBnG,GAAY,OAGjCmG,EAAgBnG,GAAWrG,QAAU,EAGrC,MAAMqJ,EAAU9V,WAAWoK,EAAY+N,cAAgB,GAavD,GAZAc,EAAgBnG,GAAWgD,SAAW/H,MAAM+H,GAAW,EAAIA,EAG3DmD,EAAgBnG,GAAWsG,UAAUxC,IAAI8C,GAGrCG,EAAqBH,KAAgB5G,GACvCmG,EAAgBnG,GAAWgH,mBAAmBlD,IAAI8C,GAEpDG,EAAqBH,GAAc5G,EAG/B1I,EAAYwI,QAAUxI,EAAYwI,OAAO8B,aACzCtK,EAAYgQ,SAAWhQ,EAAYgQ,QAAQ1F,YAC7C,IACE,MAAMqE,EAAa/O,YAASI,EAAYwI,OAAO8B,aACzC2F,EAAcrQ,YAASI,EAAYgQ,QAAQ1F,aAC3C4F,EAAiBC,YAAiBF,EAAatB,GAEjDuB,GAAkB,GAAKA,GAAkB,IAC3CrB,EAAgBnG,GAAWmH,gBAAgB9Z,KAAKma,GAElD,MAAOrM,IAMX,GAAI7D,EAAYsI,UAAYtI,EAAYsI,SAASuF,aAAc,CAC7D,MAAMuC,EAASxa,WAAWoK,EAAYsI,SAASuF,aAAawC,gBAAkB,IACzE1M,MAAMyM,IAAWA,EAAS,GAC7BvB,EAAgBnG,GAAWoH,aAAa/Z,KAAKqa,MAMnD1c,OAAOC,KAAKkb,GAAiBjb,QAAQ8U,IACnC,MAAM6G,EAAQV,EAAgBnG,GAG9B6G,EAAMI,cAAgBJ,EAAMP,UAAUvS,KAAO,EACzC8S,EAAMG,mBAAmBjT,KAAO8S,EAAMP,UAAUvS,KAChD,EAGJ8S,EAAMK,kBAAoBL,EAAMM,gBAAgB7Y,OAAS,EACrDuY,EAAMM,gBAAgB1W,OAAO,CAACC,EAAKkX,IAASlX,EAAMkX,EAAM,GAAKf,EAAMM,gBAAgB7Y,OACnF,EAGJuY,EAAMQ,eAAiBR,EAAMO,aAAa9Y,OAAS,EAC/CuY,EAAMO,aAAa3W,OAAO,CAACC,EAAKgX,IAAWhX,EAAMgX,EAAQ,GAAKb,EAAMO,aAAa9Y,OACjF,EAGJuY,EAAMP,UAAYO,EAAMP,UAAUvS,KAClC8S,EAAMG,mBAAqBH,EAAMG,mBAAmBjT,OAG/C/I,OAAO2C,OAAOwY,GAAiB/S,OAAOyT,GAASA,EAAMlN,OAAS,GACrE,MAAOwB,GAEP,OADAD,QAAQC,MAAM,2CAA4CA,GACnD,KE2FO0M,CAAwBpE,IAGzB9O,IAAI+K,IAEf,MAAMoI,EAAsBpI,EAAW4G,UAAY,EAC9C5G,EAAWsH,mBAAqBtH,EAAW4G,UAC5C,EAEJ,MAAO,IACF5G,EACHuH,cAAea,KAGlB,CAACrE,MAEEsE,GAA2BxI,kBAAQ,IFtGCxB,KAC1C,IACE,MAAMiK,EAAa,GAQnB,OANAjK,EAAa7S,QAAQoM,IACdA,EAAY8N,eAEjB4C,EAAW1Q,EAAY8N,eAAiB4C,EAAW1Q,EAAY8N,eAAiB,GAAK,KAGhFpa,OAAOwM,QAAQwQ,GAAYrT,IAAIxM,IAAA,IAAE4B,EAAMkD,GAAM9E,EAAA,MAAM,CAAE4B,OAAMkD,WAClE,MAAOkO,GAEP,OADAD,QAAQC,MAAM,gDAAiDA,GACxD,KEyFsC8M,CAA4BxE,IAAuB,CAACA,KAC7FyE,GAAqB3I,kBAAQ,KAEjC,MAIM4I,EF3F2B,SAACpK,GAAoC,IAAtBqK,EAAYnP,UAAA3K,OAAA,QAAA4K,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACjE,IACE,MAAM9B,EAAM,IAAI7L,KACVyN,EAAc,GAGpB,IAAK,IAAI5M,EAAI,EAAGA,EAAIic,EAAcjc,IAAK,CACrC,MAAM4N,EAAYoE,YAAUhH,EAAKhL,GAGjC,GAAI4N,EAAUnO,aAAeuL,EAAIvL,YAC7BmO,EAAUvO,gBAAkB2L,EAAI3L,cAClC,SAGF,MAAM6c,EAAW/L,YAAOvC,EAAW,WAC7BG,EAAYoC,YAAOvC,EAAW,YAEpChB,EAAYsP,GAAY,CACtBte,KAAMmQ,EACNT,MAAO4O,EACPpR,KAAM8C,EACNzM,MAAO,GAITtC,OAAO2C,OAAOoH,GAAc7J,QAAQ2L,IAClCkC,EAAYsP,GAAUxR,GAAY,IAmCtC,OA9BAkH,EAAa7S,QAAQoM,IACnB,GAAKA,EAAYwI,QAAWxI,EAAYwI,OAAO8B,YAE/C,IACE,MAAMqE,EAAa/O,YAASI,EAAYwI,OAAO8B,aAG/C,GAAI7K,GAAeO,EAAYwI,OAAO8B,aACpC,OAGF,MAAMyG,EAAW/L,YAAO2J,EAAY,WAGpC,IAAKlN,EAAYsP,GAAW,OAG5BtP,EAAYsP,GAAU/a,OAAS,EAG/B,MAAMuJ,EAAW9B,EAAauC,EAAYnM,QACtC0L,IACFkC,EAAYsP,GAAUxR,IAAakC,EAAYsP,GAAUxR,IAAa,GAAK,GAE7E,MAAOsE,OAMJnQ,OAAO2C,OAAOoL,GAAanL,KAAK,CAACC,EAAGC,IAAMD,EAAE4L,MAAM6O,cAAcxa,EAAE2L,QACzE,MAAO0B,GAEP,OADAD,QAAQC,MAAM,yCAA0CA,GACjD,IE0BQoN,CAJ+B,QAAjBtf,EACzB8U,EACAA,EAAa3K,OAAOvF,GAAKA,EAAE1C,SAAWlC,GAEiB,IAGrD4C,EAAc,IAAIP,KACxB,OAAO6c,EAAO/U,OAAOqG,IACnB,MAAMM,EAAY,IAAIzO,KAAKmO,EAAMxC,MACjC,QAAS8C,EAAUnO,aAAeC,EAAYD,YACrCmO,EAAUvO,gBAAkBK,EAAYL,kBAElD,CAACuS,EAAc9U,IAEZuf,GAAqBjJ,kBAAQ,KAEjC,MAIM4I,EFtC2B,SAACpK,GAAoC,IAAtBqK,EAAYnP,UAAA3K,OAAA,QAAA4K,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACjE,IACE,MAAM9B,EAAM,IAAI7L,KACVyN,EAAc,GAGpB,IAAK,IAAI5M,EAAI,EAAGA,EAAIic,EAAcjc,IAAK,CACrC,MAAM4N,EAAYoE,YAAUhH,EAAKhL,GAGjC,GAAI4N,EAAUnO,aAAeuL,EAAIvL,YAC7BmO,EAAUvO,gBAAkB2L,EAAI3L,cAClC,SAGF,MAAM6c,EAAW/L,YAAOvC,EAAW,WAC7BG,EAAYoC,YAAOvC,EAAW,YAEpChB,EAAYsP,GAAY,CACtBte,KAAMmQ,EACNT,MAAO4O,EACPpR,KAAM8C,EACN0O,WAAY,EACZC,aAAc,EACdzb,MAAO,GAwCX,OAnCA8Q,EAAa7S,QAAQoM,IACnB,GAAKA,EAAYwI,QAAWxI,EAAYwI,OAAO8B,YAE/C,IACE,MAAMqE,EAAa/O,YAASI,EAAYwI,OAAO8B,aAG/C,GAAI7K,GAAeO,EAAYwI,OAAO8B,aACpC,OAGF,MAAMyG,EAAW/L,YAAO2J,EAAY,WAGpC,IAAKlN,EAAYsP,GAAW,OAG5B,MAAMrF,EAAU9V,WAAWoK,EAAY+N,cAAgB,IAClDpK,MAAM+H,IAAYA,EAAU,IAC/BjK,EAAYsP,GAAUI,YAAc,EACpC1P,EAAYsP,GAAUK,cAAgB1F,GAExC,MAAO7H,OAMXnQ,OAAO2C,OAAOoL,GAAa7N,QAAQuO,IACjCA,EAAMxM,MAAQwM,EAAMgP,WAAa,EAC7BhP,EAAMiP,aAAejP,EAAMgP,WAC3B,IAICzd,OAAO2C,OAAOoL,GAClBnL,KAAK,CAACC,EAAGC,IAAMD,EAAE4L,MAAM6O,cAAcxa,EAAE2L,QACvC9E,IAAIgU,IAAA,IAAC5e,KAAEA,EAAIkD,MAAEA,EAAKgK,KAAEA,GAAM0R,EAAA,MAAM,CAAE5e,OAAMkD,MAAOC,WAAWD,EAAME,QAAQ,IAAK8J,UAChF,MAAOkE,GAEP,OADAD,QAAQC,MAAM,+CAAgDA,GACvD,IE/BQyN,CAJ+B,QAAjB3f,EACzB8U,EACAA,EAAa3K,OAAOvF,GAAKA,EAAE1C,SAAWlC,GAEiB,IAGrD4C,EAAc,IAAIP,KACxB,OAAO6c,EAAO/U,OAAOqG,IACnB,MAAMM,EAAY,IAAIzO,KAAKmO,EAAMxC,MACjC,QAAS8C,EAAUnO,aAAeC,EAAYD,YACrCmO,EAAUvO,gBAAkBK,EAAYL,kBAElD,CAACuS,EAAc9U,IAKZ4f,IAHoBtJ,kBAAQ,IF8CQxB,KAC1C,IACE,MAAM+K,EAAiB,GACjBC,EAAyB,GACzBC,EAAwB,GAG9BjL,EAAa7S,QAAQoM,IACnB,IAAKA,EAAYsP,aAAetP,EAAYwI,SAAWxI,EAAYwI,OAAO8B,YAAa,OAEvF,MAAMgF,EAAatP,EAAYsP,WAC/B,IACE,MAAMqC,EAAY/R,YAASI,EAAYwI,OAAO8B,aAG9CkH,EAAelC,IAAekC,EAAelC,IAAe,GAAK,IAG5DmC,EAAuBnC,IACxBqC,EAAYF,EAAuBnC,MACrCmC,EAAuBnC,GAAcqC,KAIlCD,EAAsBpC,IACvBqC,EAAYD,EAAsBpC,MACpCoC,EAAsBpC,GAAcqC,GAEtC,MAAO9N,OAMX,MAAM+N,EAAiBle,OAAOC,KAAK6d,GAAgBxa,OAC7C0Y,EAAqBhc,OAAO2C,OAAOmb,GAAgB1V,OAAO+V,GAASA,EAAQ,GAAG7a,OAC9E2Y,EAAgBiC,EAAiB,EAAIlC,EAAqBkC,EAAiB,EAG3EE,EAA2BF,EAAiB,EAC9Cle,OAAO2C,OAAOmb,GAAgBrY,OAAO,CAACC,EAAKyY,IAAUzY,EAAMyY,EAAO,GAAKD,EACvE,EAGJ,IAAIG,EAAoB,EACpBC,EAA8B,EAqBlC,OAnBAte,OAAOC,KAAK6d,GAAgB5d,QAAQ0b,IAClC,GAAIkC,EAAelC,GAAc,GAC7BmC,EAAuBnC,IACvBoC,EAAsBpC,GAAa,CACrC,MAAMgB,EAAOH,YACXuB,EAAsBpC,GACtBmC,EAAuBnC,IAErBgB,EAAO,IACTyB,GAAqBzB,EACrB0B,QASC,CACLJ,iBACAlC,qBACAC,gBACAmC,2BACAG,wBAT8BD,EAA8B,EAC1DD,EAAoBC,EACpB,GASJ,MAAOnO,GAEP,OADAD,QAAQC,MAAM,gDAAiDA,GACxD,CACL+N,eAAgB,EAChBlC,mBAAoB,EACpBC,cAAe,EACfmC,yBAA0B,EAC1BG,wBAAyB,KE9HWC,CAA4B/F,IAAuB,CAACA,KAClElE,kBAAQ,IFkLQxB,KAC1C,IACE,MAAM0L,EAAc,GAgGpB,OA7FA1L,EAAa7S,QAAQoM,IAEnB,GAAIA,EAAYwI,QAAUxI,EAAYwI,OAAO4J,OAAQ,CACnD,MAAMC,EAAWrS,EAAYwI,OAAO4J,OAE/BD,EAAYE,KACfF,EAAYE,GAAY,CACtBhT,GAAIgT,EACJC,aAAc,EACdC,cAAe,EACfC,cAAe,EACfC,SAAU,EACVC,iBAAkB,EAClBC,kBAAmB,EACnBC,kBAAmB,IAIvBT,EAAYE,GAAUC,eAEY,cAA9BtS,EAAYwI,OAAOwB,OACrBmI,EAAYE,GAAUK,mBACiB,wBAA9B1S,EAAYwI,OAAOwB,QAC5BmI,EAAYE,GAAUO,oBAGxB,MAAMC,EAAWjd,WAAWoK,EAAYwI,OAAOqK,UAAY,GACtDlP,MAAMkP,KACTV,EAAYE,GAAUG,eAAiBK,GAGzC,MAAMC,EAAMld,WAAWoK,EAAYwI,OAAOuK,SAAW,GAChDpP,MAAMmP,KACTX,EAAYE,GAAUI,UAAYK,GAKtC,GAAI9S,EAAYgQ,SAAWhQ,EAAYgQ,QAAQoC,OAAQ,CACrD,MAAMC,EAAWrS,EAAYgQ,QAAQoC,OAEhCD,EAAYE,KACfF,EAAYE,GAAY,CACtBhT,GAAIgT,EACJC,aAAc,EACdC,cAAe,EACfC,cAAe,EACfC,SAAU,EACVC,iBAAkB,EAClBC,kBAAmB,EACnBC,kBAAmB,IAIvBT,EAAYE,GAAUE,gBAEa,cAA/BvS,EAAYgQ,QAAQhG,OACtBmI,EAAYE,GAAUM,oBACkB,wBAA/B3S,EAAYgQ,QAAQhG,QAC7BmI,EAAYE,GAAUO,oBAGxB,MAAMC,EAAWjd,WAAWoK,EAAYgQ,QAAQ6C,UAAY,GACvDlP,MAAMkP,KACTV,EAAYE,GAAUG,eAAiBK,GAGzC,MAAMC,EAAMld,WAAWoK,EAAYgQ,QAAQ+C,SAAW,GACjDpP,MAAMmP,KACTX,EAAYE,GAAUI,UAAYK,MAMxCpf,OAAOC,KAAKwe,GAAave,QAAQye,IAC/B,MAAM9C,EAAQ4C,EAAYE,GAE1B9C,EAAMyD,cAAgBzD,EAAM+C,aAAe/C,EAAMgD,cACjDhD,EAAM0D,kBAAoB1D,EAAMmD,iBAAmBnD,EAAMoD,kBACzDpD,EAAM2D,eAAiB3D,EAAMyD,cAAgB,EACzCzD,EAAM0D,kBAAoB1D,EAAMyD,cAChC,EAEJzD,EAAM4D,sBAAwB5D,EAAMyD,cAAgB,EAChDzD,EAAMiD,cAAgBjD,EAAMyD,cAC5B,EAEJzD,EAAM6D,kBAAoB7D,EAAMiD,cAAgB,EAC5CjD,EAAMkD,SAAWlD,EAAMiD,cACvB,IAGC9e,OAAO2C,OAAO8b,GACrB,MAAOtO,GAEP,OADAD,QAAQC,MAAM,gDAAiDA,GACxD,KEvR+BwP,CAA4BlH,IAAuB,CAACA,KACrElE,kBAAQ,IF2RCxB,KAChC,IACE,MAAMxU,EAAgB,CACpBmB,GAAI,CAAEX,KAAM,eAAgB4P,OAAQ,EAAGqJ,QAAS,GAChDrY,GAAI,CAAEZ,KAAM,eAAgB4P,OAAQ,EAAGqJ,QAAS,GAChDpY,GAAI,CAAEb,KAAM,eAAgB4P,OAAQ,EAAGqJ,QAAS,GAChDnY,GAAI,CAAEd,KAAM,eAAgB4P,OAAQ,EAAGqJ,QAAS,IA2BlD,OAxBAjF,EAAa7S,QAAQoM,IACnB,GAAKA,EAAYwI,QAAWxI,EAAYwI,OAAO8B,YAE/C,IACE,MACMnI,EADavC,YAASI,EAAYwI,OAAO8B,aACtBhW,WAEzB,IAAIS,EAMJ9C,EALe8C,EAAXoN,EAAQ,EAAa,KAChBA,EAAQ,EAAa,KACrBA,EAAQ,EAAa,KACf,MAEQE,SAEvB,MAAMqJ,EAAU9V,WAAWoK,EAAY+N,cAAgB,GAClDpK,MAAM+H,KACTzZ,EAAc8C,GAAS2W,SAAWA,GAEpC,MAAO7H,OAKJnQ,OAAO2C,OAAOpE,GACrB,MAAO4R,GAEP,OADAD,QAAQC,MAAM,qCAAsCA,GAC7C,KE/T4ByP,CAAkBnH,IAAuB,CAACA,KACpDlE,kBAAQ,IFmUCxB,KACpC,IACE,MAAM8M,EAAe,CACnBC,QAAS,CAAEC,MAAO,QAAS5B,MAAO,GAClC6B,SAAU,CAAED,MAAO,SAAU5B,MAAO,GACpC8B,UAAW,CAAEF,MAAO,UAAW5B,MAAO,GACtC+B,UAAW,CAAEH,MAAO,UAAW5B,MAAO,GACtCgC,UAAW,CAAEJ,MAAO,UAAW5B,MAAO,GACtCiC,QAAS,CAAEL,MAAO,QAAS5B,MAAO,IAsBpC,OAnBApL,EAAa7S,QAAQoM,IACnB,IAAKA,EAAYsI,WACZtI,EAAYsI,SAASuF,eACrB7N,EAAYsI,SAASuF,aAAawC,eAAgB,OAEvD,MAAMD,EAASxa,WAAWoK,EAAYsI,SAASuF,aAAawC,gBAC5D,GAAI1M,MAAMyM,GAAS,OAEnB,IAAIqD,EAQJF,EAPiBE,EAAbrD,GAAU,EAAW,QAChBA,GAAU,GAAY,SACtBA,GAAU,GAAY,UACtBA,GAAU,GAAY,UACtBA,GAAU,GAAY,UAClB,SAEOyB,UAGfne,OAAO2C,OAAOkd,GACrB,MAAO1P,GAEP,OADAD,QAAQC,MAAM,yCAA0CA,GACjD,KEpWgCkQ,CAAsB5H,IAAuB,CAACA,MAoBjF6H,IAjBe/L,kBAAQ,IACpBxB,EAAa3K,OAAOkQ,GF7gBD,kBE6gBQA,EAAInY,QAA2BwJ,IAAI2O,IAEnE,IAAI/N,EAAU,GAId,OAHI+N,EAAIxD,QAAUwD,EAAIxD,OAAOC,KAC3BxK,EAAU+N,EAAIxD,OAAOC,IAEhB,CACLpJ,GAAI2M,EAAIC,cACRhO,UACA6P,aAAc9B,EAAI8B,cAAgB,UAClCpC,QAAS9V,WAAWoW,EAAI+B,cAAgB,MAG3C,CAACtH,IAGqBwB,kBAAQ,KACxB,CACL/B,YAAaiG,GAAqBnV,OAClCoa,aAAcjF,GAAqBhT,OAAO,CAACC,EAAK4G,KAC9C,MAAM0L,EAAU9V,WAAWoK,EAAY+N,cAAgB,GACvD,OAAO3U,GAAOuK,MAAM+H,GAAW,EAAIA,IAClC,GACHkG,eAAgB,IAAIrF,IAAIJ,GAAqB9O,IAAI9G,GAAKA,EAAE+Y,YAAYxT,OAAOmY,UAAUxX,KACrFyX,iBAAkB,IAAI3H,IAAIJ,GACvBrQ,OAAOvF,GAAKA,EAAE+R,UAAY/R,EAAE+R,SAASC,SACrClL,IAAI9G,GAAKA,EAAE+R,SAASC,UAAU9L,KACjCsS,cAAe5C,GAAqBnV,OAAS,EAC1CmV,GAAqBhT,OAAO,CAACC,EAAK4G,KACjC,MAAM0L,EAAU9V,WAAWoK,EAAY+N,cAAgB,GACvD,OAAO3U,GAAOuK,MAAM+H,GAAW,EAAIA,IAClC,GAAKS,GAAqBnV,OAAU,EACzCmd,UAAWhI,GACRrQ,OAAOvF,GAAKA,EAAE+R,UAAY/R,EAAE+R,SAASuF,cAAgBtX,EAAE+R,SAASuF,aAAawC,gBAC7ElX,OAAO,CAACC,EAAK7C,EAAG+G,EAAK8W,KACpB,MAAMhE,EAASxa,WAAWW,EAAE+R,SAASuF,aAAawC,gBAClD,OAAO/S,IAAQ8W,EAAIpd,OAAS,GACzBoC,EAAMgX,GAAUgE,EAAIpd,OACrBoC,EAAMgX,GACP,KAEN,CAACjE,MAGEkI,GAAqBpM,kBAAQ,KACjC,IAAKxB,GAAwC,IAAxBA,EAAazP,OAAc,MAAO,GAGvD,MAAMsd,EAAsB,GAkD5B,OAjDA7N,EAAa7S,QAAQoM,IAEnB,GAAqB,QAAjBrO,GAA0BqO,EAAYnM,SAAWlC,EAAc,OAEnE,IAAIgO,EAAO,KAWX,GARIK,EAAYwI,QAAUxI,EAAYwI,OAAO8B,YAC3C3K,EAAO,IAAI3L,KAAKgM,EAAYwI,OAAO8B,aAC1BtK,EAAYuK,aACrB5K,EAAO,IAAI3L,KAAKgM,EAAYuK,cACnBvK,EAAYwK,YACrB7K,EAAO,IAAI3L,KAAKgM,EAAYwK,YAG1B7K,IAASgE,MAAMhE,EAAKmL,WAAY,CAClC,MAAMiG,EAAW/L,YAAOrF,EAAM,WACxBiD,EAAYoC,YAAOrF,EAAM,YAE1B2U,EAAoBvD,KACvBuD,EAAoBvD,GAAY,CAC9BxT,IAAKwT,EACLte,KAAMmQ,EACNjD,KAAMA,EACN8G,aAAc,GACduI,UAAW,IAAIzC,IACfmD,mBAAoB,IAAInD,MAI5B+H,EAAoBvD,GAAUtK,aAAa1Q,KAAKiK,GAG5CA,EAAYsP,aACdgF,EAAoBvD,GAAU/B,UAAUxC,IAAIxM,EAAYsP,YAGpC5b,OAAOC,KAAK2gB,GAC7BxY,OAAOqI,GAAKA,IAAM4M,GAAY,IAAI/c,KAAKsgB,EAAoBnQ,GAAGxE,MAAQA,GACtEyC,KAAK+B,GAAKmQ,EAAoBnQ,GAAG6K,UAAUuF,IAAIvU,EAAYsP,cAG5DgF,EAAoBvD,GAAUrB,mBAAmBlD,IAAIxM,EAAYsP,gBAOlE5b,OAAO2C,OAAOie,GAClBjX,IAAI8E,IAAK,CACR1P,KAAM0P,EAAM1P,KACZkN,KAAMwC,EAAMxC,KACZwC,MAAOA,EAAM5E,IACbyR,UAAW7M,EAAM6M,UAAUvS,KAC3BiT,mBAAoBvN,EAAMuN,mBAAmBjT,KAC7CkT,cAAexN,EAAM6M,UAAUvS,KAAO,EACpC0F,EAAMuN,mBAAmBjT,KAAO0F,EAAM6M,UAAUvS,KAAO,KAE1DnG,KAAK,CAACC,EAAGC,IAAM,IAAIxC,KAAKuC,EAAEoJ,MAAQ,IAAI3L,KAAKwC,EAAEmJ,OAE7C7D,OAAOqG,GAASA,EAAM6M,WAAa,IACrC,CAACvI,EAAc9U,IAGZ6iB,GAAsBvM,kBAAQ,KAClC,IAAKxB,GAAwC,IAAxBA,EAAazP,OAAc,MAAO,GAGvD,MAAMyd,EAAqB,GA0C3B,OAzCAhO,EAAa7S,QAAQoM,IAEnB,GAAqB,QAAjBrO,GAA0BqO,EAAYnM,SAAWlC,EAAc,OAEnE,IAAIgO,EAAO,KAWX,GARIK,EAAYwI,QAAUxI,EAAYwI,OAAO8B,YAC3C3K,EAAO,IAAI3L,KAAKgM,EAAYwI,OAAO8B,aAC1BtK,EAAYuK,aACrB5K,EAAO,IAAI3L,KAAKgM,EAAYuK,cACnBvK,EAAYwK,YACrB7K,EAAO,IAAI3L,KAAKgM,EAAYwK,YAG1B7K,IAASgE,MAAMhE,EAAKmL,WAAY,CAElC,MAAM4J,EAAU1P,YAAOrF,EAAM,WACvBgV,EAAW3P,YAAOrF,EAAM,eAEzB8U,EAAmBC,KACtBD,EAAmBC,GAAW,CAC5BnX,IAAKmX,EACLjiB,gBAAiBkiB,IACjBC,UAAW5P,YAAOrF,EAAM,SACxBA,KAAMA,EACNkV,cAAe,IAAItI,IACnB4E,WAAY,IAIhBsD,EAAmBC,GAASvD,aAGxBnR,EAAYsP,YACdmF,EAAmBC,GAASG,cAAcrI,IAAIxM,EAAYsP,eAMzD5b,OAAO2C,OAAOoe,GAClBpX,IAAI8H,IAAI,CACP1S,KAAM0S,EAAKyP,UACXE,SAAU3P,EAAK1S,KACfkN,KAAMwF,EAAKxF,KACXwF,KAAMA,EAAK5H,IACXyR,UAAW7J,EAAK0P,cAAcpY,KAC9B4F,OAAQ8C,EAAKgM,WACb4D,kBAAmB5P,EAAK0P,cAAcpY,KAAO,EAC3C0I,EAAKgM,WAAahM,EAAK0P,cAAcpY,KAAO,KAE/CnG,KAAK,CAACC,EAAGC,IAAM,IAAIxC,KAAKuC,EAAEoJ,MAAQ,IAAI3L,KAAKwC,EAAEmJ,OAE7C7D,OAAOqJ,GAAQA,EAAK6J,WAAa,IACnC,CAACvI,EAAc9U,IAGZqjB,GAAsB/M,kBAAQ,KAClC,IAAKxB,GAAwC,IAAxBA,EAAazP,OAAc,MAAO,GAGvD,MAAMie,EAAyB,GA2C/B,OA1CAxO,EAAa7S,QAAQoM,IAEnB,GAAqB,QAAjBrO,GAA0BqO,EAAYnM,SAAWlC,EAAc,OAGnE,IAAIgd,EAAa,KAAMuG,EAAe,KAWtC,GATIlV,EAAYwI,QAAUxI,EAAYwI,OAAO8B,cAC3CqE,EAAa,IAAI3a,KAAKgM,EAAYwI,OAAO8B,cAGvCtK,EAAYmV,UAAYnV,EAAYmV,SAAS7K,cAC/C4K,EAAe,IAAIlhB,KAAKgM,EAAYmV,SAAS7K,cAI3CqE,GAAcuG,IACbvR,MAAMgL,EAAW7D,aACjBnH,MAAMuR,EAAapK,YACpBoK,EAAevG,EAAY,CAE7B,MAAMoC,EAAW/L,YAAO2J,EAAY,WAC9B/L,EAAYoC,YAAO2J,EAAY,YAEhCsG,EAAuBlE,KAC1BkE,EAAuBlE,GAAY,CACjCxT,IAAKwT,EACLte,KAAMmQ,EACNjD,KAAMgP,EACNyG,WAAY,EACZvD,MAAO,IAKX,MAAMwD,GAASH,EAAevG,GAAU,KACxCsG,EAAuBlE,GAAUqE,YAAcC,EAC/CJ,EAAuBlE,GAAUc,WAK9Bne,OAAO2C,OAAO4e,GAClB5X,IAAI8E,IAAK,CACR1P,KAAM0P,EAAM1P,KACZkN,KAAMwC,EAAMxC,KACZwC,MAAOA,EAAM5E,IACb+X,mBAAoBnT,EAAM0P,MAAQ,EAChC1P,EAAMiT,WAAajT,EAAM0P,MAAQ,KAEpCvb,KAAK,CAACC,EAAGC,IAAM,IAAIxC,KAAKuC,EAAEoJ,MAAQ,IAAI3L,KAAKwC,EAAEmJ,OAE7C7D,OAAOqG,GAASA,EAAMmT,mBAAqB,IAC7C,CAAC7O,EAAc9U,IAGZ4jB,GAAoBtN,kBAAQ,KAChC,IAAKxB,GAAwC,IAAxBA,EAAazP,OAAc,MAAO,GAGvD,MAAMwe,EAAmB,GA6CzB,OA5CA/O,EAAa7S,QAAQoM,IAEnB,GAAqB,QAAjBrO,GAA0BqO,EAAYnM,SAAWlC,EAAc,OAEnE,IAAIgO,EAAO,KAWX,GARIK,EAAYwI,QAAUxI,EAAYwI,OAAO8B,YAC3C3K,EAAO,IAAI3L,KAAKgM,EAAYwI,OAAO8B,aAC1BtK,EAAYuK,aACrB5K,EAAO,IAAI3L,KAAKgM,EAAYuK,cACnBvK,EAAYwK,YACrB7K,EAAO,IAAI3L,KAAKgM,EAAYwK,YAG1B7K,IAASgE,MAAMhE,EAAKmL,WAAY,CAClC,MAAMiG,EAAW/L,YAAOrF,EAAM,WACxBiD,EAAYoC,YAAOrF,EAAM,YAE1B6V,EAAiBzE,KACpByE,EAAiBzE,GAAY,CAC3BxT,IAAKwT,EACLte,KAAMmQ,EACNjD,KAAMA,EACN8V,YAAa,EACbC,WAAY,EACZC,QAAS,EACT3f,MAAO,IAIXwf,EAAiBzE,GAAU/a,QAEM,gBAA7BgK,EAAY8N,aACd0H,EAAiBzE,GAAU0E,cACW,eAA7BzV,EAAY8N,aACrB0H,EAAiBzE,GAAU2E,aAE3BF,EAAiBzE,GAAU4E,aAM1BjiB,OAAO2C,OAAOmf,GAClBnY,IAAI8E,IAAK,CACR1P,KAAM0P,EAAM1P,KACZkN,KAAMwC,EAAMxC,KACZwC,MAAOA,EAAM5E,IACbkY,YAAatT,EAAMsT,YACnBG,mBAAoBzT,EAAMnM,MAAQ,EAAKmM,EAAMsT,YAActT,EAAMnM,MAAS,IAAM,EAChF0f,WAAYvT,EAAMuT,WAClBG,kBAAmB1T,EAAMnM,MAAQ,EAAKmM,EAAMuT,WAAavT,EAAMnM,MAAS,IAAM,EAC9E2f,QAASxT,EAAMwT,QACf3f,MAAOmM,EAAMnM,SAEdM,KAAK,CAACC,EAAGC,IAAM,IAAIxC,KAAKuC,EAAEoJ,MAAQ,IAAI3L,KAAKwC,EAAEmJ,OAE7C7D,OAAOqG,GAASA,EAAMnM,OAAS,IACjC,CAACyQ,EAAc9U,KAGXmkB,GAAmBC,IAAwB/jB,mBAAS,aAGrDid,GAAgBhH,kBAAQ,KAC5B,MAAM+N,EAAQ,IAAIzJ,IAMlB,OALA9F,EAAa7S,QAAQoM,IACfA,EAAY8N,cACdkI,EAAMxJ,IAAIxM,EAAY8N,gBAGnB1C,MAAMC,KAAK2K,IACjB,CAACvP,IAGE2F,GAAcnE,kBAAQ,KAC1B,MAAMgO,EAAW,IAAIC,IAWrB,OAVAzP,EAAa7S,QAAQoM,IACnB,GAAIA,EAAYsI,UAAYtI,EAAYsI,SAASC,QAAS,CACxD,MAAMG,EAAY1I,EAAYsI,SAASC,QACjC9V,EAAOuV,GAAsBU,kBAA4BA,EAAUvJ,UAAU,EAAG,KACtF8W,EAASE,IAAIzN,EAAW,CACtBrJ,GAAIqJ,EACJjW,KAAMA,OAIL2Y,MAAMC,KAAK4K,EAAS5f,WAC1B,CAACoQ,EAAcuB,KAeZoO,GAAenO,kBAAQ,KAC3B,MAAMoO,EAAU,CACdvjB,cAAiB,CAAE8K,IAAK,QAASC,KAAM,SACvC9K,cAAiB,CAAE6K,IAAK,QAASC,KAAM,SACvC7K,cAAiB,CAAE4K,IAAK,QAASC,KAAM,SACvC5K,cAAiB,CAAE2K,IAAK,QAASC,KAAM,SACvC3K,cAAiB,CAAE0K,IAAK,QAASC,KAAM,WAIzC,MAAwB,QAAjBlM,EAAyB0kB,EAAQ1kB,GAAgB0kB,EAAuB,eAC9E,CAAC1kB,KAYG2kB,GAAYC,KATatO,kBAAQ,IAC/BjB,EAAWhQ,OACjB,CAACgQ,IAG8BiB,kBAAQ,IACjCf,EAAoBlQ,OAC1B,CAACkQ,IAEgClV,mBAAS,YACtCwkB,GAAeC,IAAoBzkB,mBAAS,QAG7C0kB,GAAcC,IACdL,KAAeK,EAEjBF,GAAmC,QAAlBD,GAA0B,OAAS,QAGpDD,GAAcI,GACdF,GAAiB,UAKfG,GAAW/lB,IAAgB,IAAf8lB,OAAEA,GAAQ9lB,EAC1B,OAAIylB,KAAeK,EAAevf,IAAAC,cAAA,QAAM0F,MAAO,CAAExB,QAAS,KAAO,UAC1DnE,IAAAC,cAAA,YAAyB,QAAlBmf,GAA0B,SAAM,WAqF1CK,GAAW5O,kBAAQ,KACvB,MAAM6O,EAAO,CACXhkB,cAAiB,CACfL,KAAM,SACN4N,WAAY,IACZ0W,gBAAiB,EACjBxW,iBAAkB,aAClByW,YAAchD,GAAiB9N,YAAc,IAAU,IACvD+Q,kBAAmBjD,GAAiB9N,YAAc8N,GAAiBpC,gBAErE7e,cAAiB,CACfN,KAAM,SACN4N,WAAY,QACZ0W,gBAAiB,EACjBxW,iBAAkB,aAClByW,YAAchD,GAAiB9N,YAAc,QAAW,IACxD+Q,kBAAmBjD,GAAiB9N,YAAc8N,GAAiBpC,gBAErE5e,cAAiB,CACfP,KAAM,qBACN4N,WAAY,OACZ0W,gBAAiB,EACjBxW,iBAAkB,aAClByW,YAAchD,GAAiB9N,YAAc,OAAU,IACvD+Q,kBAAmBjD,GAAiB9N,YAAc8N,GAAiBpC,gBAErE3e,cAAiB,CACfR,KAAM,WACN4N,WAAY,OACZ0W,gBAAiB,EACjBxW,iBAAkB,aAClByW,YAAchD,GAAiB9N,YAAc,OAAU,IACvD+Q,kBAAmBjD,GAAiB9N,YAAc8N,GAAiBpC,gBAErE1e,cAAiB,CACfT,KAAM,UACN4N,WAAY,QACZ0W,gBAAiB,EACjBxW,iBAAkB,aAClByW,YAAchD,GAAiB9N,YAAc,QAAW,IACxD+Q,kBAAmBjD,GAAiB9N,YAAc8N,GAAiBpC,iBAGvE,MAAwB,QAAjBjgB,EAAyB,KAAOmlB,EAAKnlB,IAC3C,CAACA,EAAcqiB,KASZkD,GAAiBjP,kBAAQ,KAC7B,IACE,OAAK2I,IAAoD,IAA9BA,GAAmB5Z,ODjnB7C,SAAmC4Z,EAAoBjf,GAC5D,IAEE,MAAMulB,EAAiB1V,GAAoBoP,EAAoBjf,GAE/D,MAAO,CAELwlB,mBAAoBD,EAAerV,SAGnCuD,qBAAsB8R,EAAe9R,qBAGrCZ,cAAe0S,EAAe1S,cAG9B1C,QAASoV,EAAepV,QAGxBsV,cAAepS,YAAO,IAAIhR,KAAQ,UAEpC,MAAO6P,GAEP,OADAD,QAAQC,MAAM,gCAAiCA,GACxC,CACLsT,mBAAoB,GACpB/R,qBAAsB,GACtBZ,cAAe,GACf1C,QAAS,CACPC,kBAAmB,EACnBC,qBAAsB,EACtBC,uBAAwB,GAE1BmV,cAAepS,YAAO,IAAIhR,KAAQ,WC6lB3BqjB,CAA0BzG,GAAoBjf,GAX5C,CACLwlB,mBAAoB,GACpBrV,QAAS,CACPC,kBAAmB,EACnBC,qBAAsB,EACtBC,uBAAwB,IAO9B,MAAO4B,GAGP,OAFAD,QAAQC,MAAM,gCAAiCA,GAExC,CACLsT,mBAAoBvG,GACpB9O,QAAS,CACPC,kBAAmB,EACnBC,qBAAsB,EACtBC,uBAAwB,GAE1B4B,OAAO,KAGV,CAAC+M,GAAoBjf,IAGGsW,kBAAQ,KACjC,IAAK2I,KAAuBsG,IAAmC,QAAjBvlB,EAC5C,OAAOif,GAIT,MAAM0G,EAAkB,GAMxB,OALA1G,GAAmBhd,QAAQiH,IACzByc,EAAgBzc,EAAUsH,OAAStH,IAI9B,IACF+V,OACCsG,GAAe1S,eAAiB,IAAI1I,OAAOyb,IAAeD,EAAgBC,EAAWpV,SACzF7L,KAAK,CAACC,EAAGC,IAELD,EAAE4L,OAAS3L,EAAE2L,MACR5L,EAAE4L,MAAM6O,cAAcxa,EAAE2L,OAE1B,IAER,CAACyO,GAAoBsG,GAAgBvlB,IAExC,GAAIG,EACF,OACEsF,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQE,eAAgB,SAAUD,WAAY,SAAUF,OAAQ,UAClFL,IAAAC,cAACmgB,IAAgB,OA0GvB,OACEpgB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQ+f,cAAe,SAAUC,UAAW,UAE9DtgB,IAAAC,cAACsgB,IAAM,CAACvc,SAAS,SAAS7D,GAAI,CAAE+C,gBAAiB,YAC/ClD,IAAAC,cAACugB,IAAO,KACNxgB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAK+f,UAAU,MAAMtgB,GAAI,CAAEugB,SAAU,EAAG5f,WAAY,SAAU,uCAKlFd,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQqgB,IAAK,EAAGC,SAAU,SAC5C5gB,IAAAC,cAAC4gB,IAAW,CAACngB,QAAQ,SAAS2E,KAAK,QAAQlF,GAAI,CAAEyF,SAAU,IAAK1C,gBAAiB,QAAS3B,aAAc,MAAOkD,GAAI,IACjHzE,IAAAC,cAAC6gB,IAAM,CACLviB,MAAOhE,EACPwmB,SAAWrY,GAAM6G,EAAgB7G,EAAErG,OAAO9D,OAC1CyiB,cAAY,EACZ7gB,GAAI,CACF1E,MAAO,UACPwlB,oBAAqB,CAAEC,GAAI,IAAKC,GAAI,GACpCC,UAAW,CAAEle,gBAAiB,UAEhCme,cAAeA,IACbrhB,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE6D,SAAU,WAAYud,MAAO,EAAGC,IAAK,MAAOC,UAAW,mBAAoBC,cAAe,OAAQjmB,MAAO,YAAa,gBAKpIuE,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,OAAM,cACtByB,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,iBAAgB,UAChCyB,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,iBAAgB,UAChCyB,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,iBAAgB,sBAChCyB,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,iBAAgB,YAChCyB,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,iBAAgB,aAKpCyB,IAAAC,cAAC4gB,IAAW,CAACngB,QAAQ,SAAS2E,KAAK,QAAQlF,GAAI,CAAEyF,SAAU,IAAK1C,gBAAiB,QAAS3B,aAAc,MAAOkD,GAAI,IACjHzE,IAAAC,cAAC6gB,IAAM,CACLviB,SAAUjD,EAAUwB,iBAAiBxB,EAAU4B,WAAW,IAC1D6jB,SA3YiBa,IAC7B,MAAOtjB,EAAMyM,GAAS6W,EAAMvf,OAAO9D,MAAMgN,MAAM,KAC/CiE,EAAa,IAAI5S,KAAK0B,EAAMyM,EAAQ,EAAG,KA0Y3BiW,cAAY,EACZ7gB,GAAI,CACF1E,MAAO,UACPwlB,oBAAqB,CAAEC,GAAI,IAAKC,GAAI,GACpCC,UAAW,CAAEle,gBAAiB,UAEhCme,cAAeA,IACbrhB,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE6D,SAAU,WAAYud,MAAO,EAAGC,IAAK,MAAOC,UAAW,mBAAoBC,cAAe,OAAQjmB,MAAO,YAAa,gBAKnI,IAAIuY,MAAM,KAAK/N,IAAI,CAACiO,EAAGzW,KACtB,MAAM8K,EAAOkH,YAAU,IAAI7S,KAAQa,GAC7Bc,KAAWgK,EAAKzL,iBAAiByL,EAAKrL,WAAW,IACjDoG,EAAQsK,YAAOrF,EAAM,YAC3B,OACEvI,IAAAC,cAAC0hB,IAAQ,CAACxb,YAAa5H,IAASA,MAAOA,GAAQ+E,OAOvDtD,IAAAC,cAAC4gB,IAAW,CAACngB,QAAQ,SAAS2E,KAAK,QAAQlF,GAAI,CAAEyF,SAAU,IAAK1C,gBAAiB,QAAS3B,aAAc,MAAOkD,GAAI,IACjHzE,IAAAC,cAAC6gB,IAAM,CACLviB,SAAUmR,EAAQ5S,iBAAiB4S,EAAQxS,WAAW,IACtD6jB,SAlaea,IAC3B,MAAOtjB,EAAMyM,GAAS6W,EAAMvf,OAAO9D,MAAMgN,MAAM,KAE/CoE,EAAW,IAAI/S,KAAK0B,EAAMyM,EAAO,KAgarBiW,cAAY,EACZ7gB,GAAI,CACF1E,MAAO,UACPwlB,oBAAqB,CAAEC,GAAI,IAAKC,GAAI,GACpCC,UAAW,CAAEle,gBAAiB,UAEhCme,cAAeA,IACbrhB,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE6D,SAAU,WAAYud,MAAO,EAAGC,IAAK,MAAOC,UAAW,mBAAoBC,cAAe,OAAQjmB,MAAO,YAAa,gBAKnI,IAAIuY,MAAM,KAAK/N,IAAI,CAACiO,EAAGzW,KACtB,MAAM8K,EAAOkH,YAAU,IAAI7S,KAAQa,GAC7Bc,KAAWgK,EAAKzL,iBAAiByL,EAAKrL,WAAW,IACjDoG,EAAQsK,YAAOrF,EAAM,YAC3B,OACEvI,IAAAC,cAAC0hB,IAAQ,CAACxb,UAAW5H,IAASA,MAAOA,GAAQ+E,OAOrDtD,IAAAC,cAAC4gB,IAAW,CAACngB,QAAQ,SAAS2E,KAAK,QAAQlF,GAAI,CAAEyF,SAAU,IAAK1C,gBAAiB,QAAS3B,aAAc,QACtGvB,IAAAC,cAAC6gB,IAAM,CACLviB,MAAOyR,EACP+Q,SAAWrY,GAAMuH,EAAsBvH,EAAErG,OAAO9D,OAChDyiB,cAAY,EACZ7gB,GAAI,CACF1E,MAAO,UACPwlB,oBAAqB,CAAEC,GAAI,IAAKC,GAAI,GACpCC,UAAW,CAAEle,gBAAiB,UAEhCme,cAAeA,IACbrhB,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE6D,SAAU,WAAYud,MAAO,EAAGC,IAAK,MAAOC,UAAW,mBAAoBC,cAAe,OAAQjmB,MAAO,YAAa,gBAKpIuE,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,OAAM,sBACrBsZ,GAAc5R,IAAI4b,GACjB7hB,IAAAC,cAAC0hB,IAAQ,CAACxb,IAAK0b,EAAMtjB,MAAOsjB,GAAOA,SAS/C7hB,IAAAC,cAACC,IAAG,CAACugB,UAAU,OAAOtgB,GAAI,CAAEugB,SAAU,EAAG3a,QAAS,EAAG7C,gBAAiB,YACpElD,IAAAC,cAAC6hB,IAAS,CAACC,SAAS,MAEjBtC,IACCzf,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEU,GAAI,IACbb,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQ+f,cAAe,CAAElf,GAAI,SAAUC,GAAI,OAASZ,eAAgB,gBAAiBD,WAAY,CAAEY,GAAI,QAASC,GAAI,UAAYP,GAAI,IACtJb,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKshB,cAAY,EAAC7hB,GAAI,CAAEW,WAAY,OAAQrF,MAAO,UAAWoF,GAAI,CAAEM,GAAI,EAAGC,GAAI,KAChGqe,GAASpkB,KAAK,aAEjB2E,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,WACtCP,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE1E,MAAO,UAAWgJ,GAAI,IAAK,kBACvCzE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,kBAChCuE,IAAAC,cAAA,QAAM0F,MAAO,CAAE7E,WAAY,MAAO,sBAAyB,IAAE,IAAIlE,KAAK6iB,GAAStW,kBAAkBtH,eAAe,QAAS,CAAEkJ,MAAO,OAAQzM,KAAM,eAKtJ0B,IAAAC,cAACc,IAAI,CAACC,WAAS,EAACC,QAAS,GACvBjB,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAI8gB,GAAI,EAAG7gB,GAAI,GAC5BpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,eACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAE+C,gBAAiB,UAAW3B,aAAc,MAAOD,EAAG,IAAKmD,GAAI,IACtEzE,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE1E,MAAO,YAAa,WAElCuE,IAAAC,cAACC,IAAG,KACFF,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,kBAAiB,cACnDuE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQuD,GAAI,KAAQob,GAASxW,WAAWpH,sBAM3F7B,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAI8gB,GAAI,EAAG7gB,GAAI,GAC5BpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,eACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAE+C,gBAAiB,UAAW3B,aAAc,MAAOD,EAAG,IAAKmD,GAAI,IACtEzE,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE1E,MAAO,YAAa,gBAElCuE,IAAAC,cAACC,IAAG,KACFF,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,kBAAiB,sBACnDuE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQuD,GAAI,KAAQob,GAASE,iBACxE3f,IAAAC,cAACQ,IAAU,CAACC,QAAQ,UAAUP,GAAI,CAAE1E,MAAO,iBAAkB4I,GAAI,GAAK/D,QAAS,UAC5E0U,GACEtQ,OAAOwd,IAEN,MAAM/P,EAAgB,GACtB9C,EAAa7S,QAAQoM,IACfA,EAAYsI,UAAYtI,EAAYsI,SAASC,UAAY+Q,EAAEja,IAAMW,EAAYnM,SAC/E0V,EAAcvJ,EAAYnM,SAAW0V,EAAcvJ,EAAYnM,SAAW,GAAK,KAInF,IAAI2V,EAAiB,KACjBC,EAAe,EAQnB,OAPA/V,OAAOC,KAAK4V,GAAe3V,QAAQC,IAC7B0V,EAAc1V,GAAU4V,IAC1BA,EAAeF,EAAc1V,GAC7B2V,EAAiB3V,KAId2V,IAAmB7X,IAE3B0L,IAAIic,GAAKA,EAAE7mB,MACX8mB,KAAK,WAOlBniB,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAI8gB,GAAI,EAAG7gB,GAAI,GAC5BpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,eACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAE+C,gBAAiB,UAAW3B,aAAc,MAAOD,EAAG,IAAKmD,GAAI,IACtEzE,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE1E,MAAO,YAAa,gBAElCuE,IAAAC,cAACC,IAAG,KACFF,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,kBAAiB,sBACnDuE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQuD,GAAI,KAAQob,GAASG,YAAYnhB,QAAQ,GAAG,KAC/FuB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,UAAUP,GAAI,CAAE1E,MAAO,iBAAkB4I,GAAI,GAAK/D,QAAS,UAAW,iCAQlGN,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAI8gB,GAAI,EAAG7gB,GAAI,GAC5BpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,eACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAE+C,gBAAiB,UAAW3B,aAAc,MAAOD,EAAG,IAAKmD,GAAI,IACtEzE,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE1E,MAAO,YAAa,iBAElCuE,IAAAC,cAACC,IAAG,KACFF,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,kBAAiB,+BACnDuE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQuD,GAAI,KAAQob,GAASI,kBAAkBphB,QAAQ,UAU9F,QAAjBlE,GApULyF,IAAAC,cAAA,OAAK0F,MAAO,CAAEyc,UAAW,OAAQC,aAAc,SAC7CriB,IAAAC,cAACzG,EAAqB,CAACe,aAAcA,EAAcE,YAAa4L,KAsU9DrG,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CACTmB,EAAG,EACHT,GAAI,EACJqC,gBAAiB,UACjB3B,aAAc,EACdjB,QAAS,OACT+f,cAAe,CAAElf,GAAI,SAAUC,GAAI,OACnCb,WAAY,CAAEY,GAAI,QAASC,GAAI,UAC/BZ,eAAgB,gBAChB8hB,WAAY,sBAEZtiB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQrF,MAAO,UAAWoF,GAAI,CAAEM,GAAI,EAAGC,GAAI,KAAO,2BACjD,QAAjB7G,EAAyB,aAAe8L,EAAa9L,IAEhFyF,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,SAAU2C,gBAAiB,QAASqf,GAAI,EAAGrB,GAAI,EAAG3f,aAAc,EAAGC,UAAW,8BACpHxB,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE1E,MAAO,UAAWgJ,GAAI,IAAK,cACvCzE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQP,GAAI,CAAEsE,GAAI,EAAGhJ,MAAO,UAAWqF,WAAY,WAAY,SAC1E8M,YAAOtS,EAAW,aAE3B0E,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQP,GAAI,CAAE1E,MAAO,UAAWqF,WAAY,WAAY,OACrE8M,YAAO8B,EAAS,eAM3B1P,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKshB,cAAY,EAAC7hB,GAAI,CAAEU,GAAI,EAAGC,WAAY,OAAQrF,MAAO,YAAa,uBAG3FuE,IAAAC,cAACc,IAAI,CAACC,WAAS,EAACC,QAAS,EAAGd,GAAI,CAAEU,GAAI,IACpCb,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAI8gB,GAAI,EAAG7gB,GAAI,GAC5BpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,eACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAE+C,gBAAiB,UAAW3B,aAAc,MAAOD,EAAG,IAAKmD,GAAI,IACtEzE,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE1E,MAAO,YAAa,iBAElCuE,IAAAC,cAACC,IAAG,KACFF,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,kBAAiB,gBACnDuE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQuD,GAAI,KAAQuY,GAAiB9N,YAAYjN,sBAMpG7B,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAI8gB,GAAI,EAAG7gB,GAAI,GAC5BpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,eACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAE+C,gBAAiB,UAAW3B,aAAc,MAAOD,EAAG,IAAKmD,GAAI,IACtEzE,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE1E,MAAO,YAAa,iBAElCuE,IAAAC,cAACC,IAAG,KACFF,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,kBAAiB,iBACnDuE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQuD,GAAI,KAAO,IAAEuY,GAAiB5C,aAAanY,oBAAe2I,EAAW,CAACgY,sBAAuB,EAAGC,sBAAuB,SAMlLziB,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAI8gB,GAAI,EAAG7gB,GAAI,GAC5BpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,eACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAE+C,gBAAiB,UAAW3B,aAAc,MAAOD,EAAG,IAAKmD,GAAI,IACtEzE,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE1E,MAAO,YAAa,gBAElCuE,IAAAC,cAACC,IAAG,KACFF,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,kBAAiB,oBACnDuE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQuD,GAAI,KAAO,IAAEuY,GAAiBjF,cAAclZ,QAAQ,QAM/GuB,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAI8gB,GAAI,EAAG7gB,GAAI,GAC5BpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQC,WAAY,eACtCP,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAE+C,gBAAiB,UAAW3B,aAAc,MAAOD,EAAG,IAAKmD,GAAI,IACtEzE,IAAAC,cAACqhB,IAAI,CAACnhB,GAAI,CAAE1E,MAAO,YAAa,gBAElCuE,IAAAC,cAACC,IAAG,KACFF,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,kBAAiB,qBACnDuE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQuD,GAAI,KAAQuY,GAAiBG,UAAUte,QAAQ,GAAG,YAQ/GuB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKshB,cAAY,EAAC7hB,GAAI,CAAEkE,GAAI,EAAGxD,GAAI,EAAGC,WAAY,OAAQrF,MAAO,YACjE,QAAjBlB,EAAyB,aAAe8L,EAAa9L,GAAc,iBAEtEyF,IAAAC,cAACc,IAAI,CAACC,WAAS,EAACC,QAAS,EAAGd,GAAI,CAAEU,GAAI,IACpCb,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKshB,cAAY,EAAC7hB,GAAI,CAAEW,WAAY,SAAUrF,MAAO,YAAa,mBAClD,QAAjBlB,EAAyB,aAAe8L,EAAa9L,IAExEyF,IAAAC,cAACqC,IAAmB,CAAClC,MAAM,OAAOC,OAAQ,KACxCL,IAAAC,cAACyiB,IAAS,CACR5jB,KACmB,QAAjBvE,EACIif,IACe,OAAdsG,SAAc,IAAdA,QAAc,EAAdA,GAAgB9R,uBAAwBwL,IAG/CxZ,IAAAC,cAACuC,IAAa,CAACC,gBAAgB,MAAMC,OAAO,YAC5C1C,IAAAC,cAAC0C,IAAK,CACJC,QAAQ,OACRC,KAAM,CAAEC,KAAM,WACd6f,SAAS,mBACTC,WAAY,GACZC,WAAY,IAEd7iB,IAAAC,cAAC8C,IAAK,CAACF,KAAM,CAAEC,KAAM,aACrB9C,IAAAC,cAAC+C,IAAO,CACNC,aAAc,CACZC,gBAAiB,UACjB3B,aAAc,WACdC,UAAW,0EACX2B,OAAQ,QAEVC,UAAWA,CAAC7E,EAAOlD,EAAMynB,IAChB,IAAIvkB,WAAgBlD,GAE7BgI,eAAgBA,CAACC,EAAOC,KAAU,IAAAC,EAChC,MAAMC,EAAiB,OAALF,QAAK,IAALA,OAAK,EAAK,QAALC,EAALD,EAAQ,UAAE,IAAAC,OAAA,EAAVA,EAAYE,QAC9B,OAAgB,OAATD,QAAS,IAATA,OAAS,EAATA,EAAWqK,WAAYxK,KAGlCtD,IAAAC,cAAC0D,IAAM,CAACC,aAAc,CAAEC,WAAY,UAElB,QAAjBtJ,EACG+B,OAAO2C,OAAOoH,GACb3B,OAAOkC,GAAiB,eAATA,GACfX,IAAI,CAACW,EAAMgB,IACV5H,IAAAC,cAAC8iB,IAAI,CACH5c,IAAKS,EACLib,KAAK,WACLjf,QAASgE,EACTlE,OAAQyM,GAAOvH,EAAQuH,GAAOvP,QAC9BkF,YAAa,EACbke,IAAK,CAAEC,EAAG,EAAGne,YAAa,EAAGhC,KAAMqM,GAAOvH,EAAQuH,GAAOvP,SACzDsjB,UAAW,CAAED,EAAG,GAChBE,mBAAmB,EACnBC,kBAAmB,IACnBC,cAAc,KAIlBrjB,IAAAC,cAAC8iB,IAAI,CACHlB,KAAK,WACLjf,QAAQ,SACRvH,KAAMgL,EAAa9L,GACnBmI,OAAO,UACPoC,YAAa,EACbke,IAAK,CAAEC,EAAG,EAAGne,YAAa,EAAGhC,KAAM,WACnCogB,UAAW,CAAED,EAAG,GAChBE,mBAAmB,EACnBC,kBAAmB,IACnBC,cAAc,QAQ5BrjB,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKshB,cAAY,EAAC7hB,GAAI,CAAEW,WAAY,SAAUrF,MAAO,YAAa,kBACtFuE,IAAAC,cAACqC,IAAmB,CAAClC,MAAM,OAAOC,OAAQ,KACxCL,IAAAC,cAACqjB,IAAQ,KACPtjB,IAAAC,cAACsjB,IAAG,CACFzkB,KAAMua,GACNmK,GAAG,MACHC,GAAG,MACHC,WAAW,EACXC,YAAa,IACb7gB,KAAK,UACLF,QAAQ,QACRU,MAAOsgB,IAAA,IAACvoB,KAAEA,EAAIwoB,QAAEA,GAASD,EAAA,SAAQvoB,OAAoB,IAAVwoB,GAAeplB,QAAQ,QAEjE4a,GAAyBpT,IAAI,CAAC/B,EAAO0D,IACpC5H,IAAAC,cAAC6jB,IAAI,CAAC3d,YAAayB,IAAS9E,KAAMqM,GAAOvH,EAAQuH,GAAOvP,YAG5DI,IAAAC,cAAC+C,IAAO,CACNC,aAAc,CAAEC,gBAAiB,UAAW3B,aAAc,WAAYC,UAAW,0EAA2E2B,OAAQ,QACpKC,UAAY7E,GAAU,IAAIA,WAAgB,WAE5CyB,IAAAC,cAAC0D,IAAM,CAACC,aAAc,CAAEC,WAAY,eAQ9C7D,IAAAC,cAACc,IAAI,CAACC,WAAS,EAACC,QAAS,EAAGd,GAAI,CAAEU,GAAI,IACpCb,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQE,eAAgB,gBAAiBD,WAAY,SAAUM,GAAI,IACrFb,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,SAAUrF,MAAO,YACnC,cAAtBijB,IAAqC,+BACf,cAAtBA,IAAqC,gCACf,eAAtBA,IAAsC,gCAChB,iBAAtBA,IAAwC,6BAClB,eAAtBA,IAAsC,iCAGzC1e,IAAAC,cAAC4gB,IAAW,CAACxb,KAAK,QAAQlF,GAAI,CAAEyF,SAAU,MACxC5F,IAAAC,cAAC6gB,IAAM,CACLviB,MAAOmgB,GACPqC,SAAWrY,GAAMiW,GAAqBjW,EAAErG,OAAO9D,OAC/CyiB,cAAY,EACZtgB,QAAQ,WACRP,GAAI,CAAEqE,SAAU,aAEhBxE,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,aAAY,sBAC5ByB,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,aAAY,uBAC5ByB,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,cAAa,mBAC7ByB,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,gBAAe,uBAC/ByB,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,cAAa,0BAKnCyB,IAAAC,cAACqC,IAAmB,CAAClC,MAAM,OAAOC,OAAQ,KACjB,cAAtBqe,IACC1e,IAAAC,cAACyiB,IAAS,CAAC5jB,KAAMme,IACfjd,IAAAC,cAACuC,IAAa,CAACC,gBAAgB,MAAMC,OAAO,YAC5C1C,IAAAC,cAAC0C,IAAK,CAACC,QAAQ,OAAOC,KAAM,CAAEC,KAAM,WAAa6f,SAAS,qBAC1D3iB,IAAAC,cAAC8C,IAAK,CACJF,KAAM,CAAEC,KAAM,WACd6B,OAAQ,CAAC,EAAG,GACZof,cAAgBxlB,OAAsB,IAARA,GAAaE,QAAQ,QAErDuB,IAAAC,cAAC+C,IAAO,CACNC,aAAc,CAAEC,gBAAiB,UAAW3B,aAAc,WAAYC,UAAW,0EAA2E2B,OAAQ,QACpKC,UAAY7E,GAAU,KAAa,IAARA,GAAaE,QAAQ,MAAO,kBACvD4E,eAAiBC,MAAaA,MAEhCtD,IAAAC,cAAC8iB,IAAI,CACHlB,KAAK,WACLjf,QAAQ,gBACRF,OAAO,UACPoC,YAAa,EACbzJ,KAAK,iBACL2nB,IAAK,CAAEC,EAAG,EAAGne,YAAa,EAAGhC,KAAM,WACnCugB,cAAc,KAKG,cAAtB3E,IACC1e,IAAAC,cAACyiB,IAAS,CAAC5jB,KAAMse,IACfpd,IAAAC,cAACuC,IAAa,CAACC,gBAAgB,MAAMC,OAAO,YAC5C1C,IAAAC,cAAC0C,IAAK,CAACC,QAAQ,OAAOC,KAAM,CAAEC,KAAM,WAAa6f,SAAS,qBAC1D3iB,IAAAC,cAAC8C,IAAK,CACJF,KAAM,CAAEC,KAAM,WACd6B,OAAQ,CAAC,EAAG,QACZof,cAAgBxlB,GAAUA,EAAME,QAAQ,KAE1CuB,IAAAC,cAAC+C,IAAO,CACNC,aAAc,CAAEC,gBAAiB,UAAW3B,aAAc,WAAYC,UAAW,0EAA2E2B,OAAQ,QACpKC,UAAY7E,GAAU,CAACA,EAAME,QAAQ,GAAI,mBACzC4E,eAAgBA,CAACC,EAAOC,KAAK,IAAAqB,EAAAof,EAAA,OAAU,OAALzgB,QAAK,IAALA,OAAK,EAAK,QAALqB,EAALrB,EAAQ,UAAE,IAAAqB,OAAA,EAAS,QAATof,EAAVpf,EAAYlB,eAAO,IAAAsgB,OAAA,EAAnBA,EAAqBtG,WAAYpa,KAErEtD,IAAAC,cAAC8iB,IAAI,CACHlB,KAAK,WACLjf,QAAQ,oBACRF,OAAO,UACPoC,YAAa,EACbzJ,KAAK,sBACL2nB,IAAK,CAAEC,EAAG,EAAGne,YAAa,EAAGhC,KAAM,WACnCugB,cAAc,KAKG,eAAtB3E,IACC1e,IAAAC,cAACyiB,IAAS,CAAC5jB,KAAM8e,IACf5d,IAAAC,cAACuC,IAAa,CAACC,gBAAgB,MAAMC,OAAO,YAC5C1C,IAAAC,cAAC0C,IAAK,CAACC,QAAQ,OAAOC,KAAM,CAAEC,KAAM,WAAa6f,SAAS,qBAC1D3iB,IAAAC,cAAC8C,IAAK,CACJF,KAAM,CAAEC,KAAM,WACd6B,OAAQ,CAAC,EAAG,UAEd3E,IAAAC,cAAC+C,IAAO,CACNC,aAAc,CAAEC,gBAAiB,UAAW3B,aAAc,WAAYC,UAAW,0EAA2E2B,OAAQ,QACpKC,UAAY7E,GAAU,IAAIA,EAAME,QAAQ,WAAY,qBAEtDuB,IAAAC,cAAC8iB,IAAI,CACHlB,KAAK,WACLjf,QAAQ,qBACRF,OAAO,UACPoC,YAAa,EACbzJ,KAAK,0BACL2nB,IAAK,CAAEC,EAAG,EAAGne,YAAa,EAAGhC,KAAM,WACnCugB,cAAc,KAKG,iBAAtB3E,IACC1e,IAAAC,cAACsC,IAAQ,CAACzD,KAAMqf,GAAmB8F,OAAQ,EAAGC,eAAgB,IAC5DlkB,IAAAC,cAACuC,IAAa,CAACC,gBAAgB,MAAMC,OAAO,YAC5C1C,IAAAC,cAAC0C,IAAK,CAACC,QAAQ,OAAOC,KAAM,CAAEC,KAAM,WAAa6f,SAAS,qBAC1D3iB,IAAAC,cAAC8C,IAAK,CACJF,KAAM,CAAEC,KAAM,WACd6B,OAAQ,CAAC,EAAG,KACZof,cAAgBxlB,MAAaA,OAE/ByB,IAAAC,cAAC+C,IAAO,CACNC,aAAc,CAAEC,gBAAiB,UAAW3B,aAAc,WAAYC,UAAW,0EAA2E2B,OAAQ,QACpKC,UAAWA,CAAC7E,EAAOlD,IAAS,IAAIkD,EAAME,QAAQ,MAAOpD,KAEvD2E,IAAAC,cAAC0D,IAAM,CAACC,aAAc,CAAEC,WAAY,UACpC7D,IAAAC,cAACgE,IAAG,CACFrB,QAAQ,qBACRvH,KAAK,cACLyH,KAAK,UACLsB,OAAQ,CAAC,EAAG,EAAG,EAAG,KAEpBpE,IAAAC,cAACgE,IAAG,CACFrB,QAAQ,oBACRvH,KAAK,aACLyH,KAAK,UACLsB,OAAQ,CAAC,EAAG,EAAG,EAAG,MAKD,eAAtBsa,IACC1e,IAAAC,cAACkkB,IAAa,CAACrlB,KAAMgb,IACnB9Z,IAAAC,cAACuC,IAAa,CAACC,gBAAgB,MAAMC,OAAO,YAC5C1C,IAAAC,cAAC0C,IAAK,CAACC,QAAQ,OAAOC,KAAM,CAAEC,KAAM,aACpC9C,IAAAC,cAAC8C,IAAK,CAACF,KAAM,CAAEC,KAAM,aACrB9C,IAAAC,cAAC+C,IAAO,CACNC,aAAc,CAAEC,gBAAiB,UAAW3B,aAAc,WAAYC,UAAW,0EAA2E2B,OAAQ,QACpKC,UAAY7E,GAAU,KAAKA,EAAME,QAAQ,KAAM,sBAEjDuB,IAAAC,cAAC0D,IAAM,CAACC,aAAc,CAAEC,WAAY,UACpC7D,IAAAC,cAACmkB,IAAI,CAACvC,KAAK,WAAWjf,QAAQ,QAAQE,KAAK,UAAUuhB,YAAa,GAAK3hB,OAAO,YAC9E1C,IAAAC,cAAC8iB,IAAI,CAAClB,KAAK,WAAWjf,QAAQ,QAAQF,OAAO,UAAU2gB,cAAc,QAM/ErjB,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGjB,OAAQ,OAAQkB,aAAc,EAAGC,UAAW,0EAC7DxB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKshB,cAAY,EAAC7hB,GAAI,CAAEW,WAAY,SAAUrF,MAAO,YAAa,6BACtFuE,IAAAC,cAACqC,IAAmB,CAAClC,MAAM,OAAOC,OAAQ,KACxCL,IAAAC,cAACsC,IAAQ,CAACzD,KAAMqb,IACdna,IAAAC,cAACuC,IAAa,CAACC,gBAAgB,MAAMC,OAAO,YAC5C1C,IAAAC,cAAC0C,IAAK,CAACC,QAAQ,QAAQC,KAAM,CAAEC,KAAM,aACrC9C,IAAAC,cAAC8C,IAAK,CAACF,KAAM,CAAEC,KAAM,aACrB9C,IAAAC,cAAC+C,IAAO,CACNC,aAAc,CAAEC,gBAAiB,UAAW3B,aAAc,WAAYC,UAAW,0EAA2E2B,OAAQ,QACpKC,UAAY7E,GAAU,IAAIA,WAAgB,WAE5CyB,IAAAC,cAAC0D,IAAM,CAACC,aAAc,CAAEC,WAAY,UACpC7D,IAAAC,cAACgE,IAAG,CAACrB,QAAQ,QAAQE,KAAK,UAAUzH,KAAK,0BAQnD2E,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKshB,cAAY,EAAC7hB,GAAI,CAAEkE,GAAI,EAAGxD,GAAI,EAAGC,WAAY,OAAQrF,MAAO,YAAa,0BAGlGuE,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CAAEmB,EAAG,EAAGT,GAAI,EAAG6E,UAAW,OAAQnE,aAAc,EAAGC,UAAW,0EACvExB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEmB,EAAG,EAAG2D,aAAc,sBAC7BjF,IAAAC,cAACc,IAAI,CAACC,WAAS,EAACC,QAAS,GACvBjB,IAAAC,cAACc,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBpB,IAAAC,cAAC4gB,IAAW,CAACyD,WAAS,EAAC5jB,QAAQ,WAAW2E,KAAK,SAC7CrF,IAAAC,cAACskB,IAAU,KAAC,wBACZvkB,IAAAC,cAAC6gB,IAAM,CACLviB,MAAO2R,GACP6Q,SAAWrY,GAAMyH,GAAoBzH,EAAErG,OAAO9D,OAC9C+E,MAAM,wBAENtD,IAAAC,cAAC0hB,IAAQ,CAACpjB,MAAM,OAAM,mBACrByW,GAAY/O,IAAI+K,GACfhR,IAAAC,cAAC0hB,IAAQ,CAACxb,IAAK6K,EAAW/I,GAAI1J,MAAOyS,EAAW/I,IAAK+I,EAAW3V,YAO5E2E,IAAAC,cAACC,IAAG,KACFF,IAAAC,cAAA,SAAO0F,MAAO,CAAEvF,MAAO,OAAQyF,eAAgB,aAC7C7F,IAAAC,cAAA,aACED,IAAAC,cAAA,MAAI0F,MAAO,CAAEzC,gBAAiB,YAC5BlD,IAAAC,cAAA,MACE0F,MAAO,CAAEI,QAAS,OAAQC,UAAW,OAAQf,aAAc,oBAAqBnE,WAAY,IAAK0D,SAAU,UAAWggB,cAAe,YAAaC,cAAe,SAAUhpB,MAAO,UAAWuJ,OAAQ,WACrMG,QAASA,IAAMma,GAAW,SAC3B,mBACiBtf,IAAAC,cAACuf,GAAQ,CAACD,OAAO,UAEnCvf,IAAAC,cAAA,MACE0F,MAAO,CAAEI,QAAS,OAAQC,UAAW,OAAQf,aAAc,oBAAqBnE,WAAY,IAAK0D,SAAU,UAAWggB,cAAe,YAAaC,cAAe,SAAUhpB,MAAO,UAAWuJ,OAAQ,WACrMG,QAASA,IAAMma,GAAW,WAC3B,gBACctf,IAAAC,cAACuf,GAAQ,CAACD,OAAO,YAEhCvf,IAAAC,cAAA,MACE0F,MAAO,CAAEI,QAAS,OAAQC,UAAW,OAAQf,aAAc,oBAAqBnE,WAAY,IAAK0D,SAAU,UAAWggB,cAAe,YAAaC,cAAe,SAAUhpB,MAAO,UAAWuJ,OAAQ,WACrMG,QAASA,IAAMma,GAAW,YAC3B,WACStf,IAAAC,cAACuf,GAAQ,CAACD,OAAO,aAE3Bvf,IAAAC,cAAA,MACE0F,MAAO,CAAEI,QAAS,OAAQC,UAAW,OAAQf,aAAc,oBAAqBnE,WAAY,IAAK0D,SAAU,UAAWggB,cAAe,YAAaC,cAAe,SAAUhpB,MAAO,UAAWuJ,OAAQ,WACrMG,QAASA,IAAMma,GAAW,kBAC3B,oBACkBtf,IAAAC,cAACuf,GAAQ,CAACD,OAAO,mBAEpCvf,IAAAC,cAAA,MACE0F,MAAO,CAAEI,QAAS,OAAQC,UAAW,OAAQf,aAAc,oBAAqBnE,WAAY,IAAK0D,SAAU,UAAWggB,cAAe,YAAaC,cAAe,SAAUhpB,MAAO,UAAWuJ,OAAQ,WACrMG,QAASA,IAAMma,GAAW,cAC3B,aACWtf,IAAAC,cAACuf,GAAQ,CAACD,OAAO,eAE7Bvf,IAAAC,cAAA,MACE0F,MAAO,CAAEI,QAAS,OAAQC,UAAW,OAAQf,aAAc,oBAAqBnE,WAAY,IAAK0D,SAAU,UAAWggB,cAAe,YAAaC,cAAe,SAAUhpB,MAAO,UAAWuJ,OAAQ,WACrMG,QAASA,IAAMma,GAAW,uBAC3B,aACWtf,IAAAC,cAACuf,GAAQ,CAACD,OAAO,wBAE7Bvf,IAAAC,cAAA,MACE0F,MAAO,CAAEI,QAAS,OAAQC,UAAW,OAAQf,aAAc,oBAAqBnE,WAAY,IAAK0D,SAAU,UAAWggB,cAAe,YAAaC,cAAe,SAAUhpB,MAAO,UAAWuJ,OAAQ,WACrMG,QAASA,IAAMma,GAAW,mBAC3B,aACWtf,IAAAC,cAACuf,GAAQ,CAACD,OAAO,oBAE7Bvf,IAAAC,cAAA,MACE0F,MAAO,CAAEI,QAAS,OAAQC,UAAW,OAAQf,aAAc,oBAAqBnE,WAAY,IAAK0D,SAAU,UAAWggB,cAAe,YAAaC,cAAe,SAAUhpB,MAAO,UAAWuJ,OAAQ,WACrMG,QAASA,IAAMma,GAAW,sBAC3B,cACYtf,IAAAC,cAACuf,GAAQ,CAACD,OAAO,yBAIlCvf,IAAAC,cAAA,aA/8BgBykB,MAE5B,IAAIC,EAAsBlN,GA2C1B,MA1CqB,QAAjBld,IACFoqB,EAAsBlN,GAAgB/S,OAAOwd,GAAKA,EAAEtb,OAASP,EAAa9L,KAI5EoqB,EAAsBA,EAAoBjgB,OAAOwd,GAC/CA,EAAE5N,QAAU,GAAK4N,EAAEjX,OAAS,GAIJ,IAAI0Z,GAAqBzlB,KAAK,CAACC,EAAGC,KAC1D,IAAIwlB,EAAQC,EAGZ,OAAQ3F,IACN,IAAK,OACH0F,EAAShU,GAAsBzR,EAAE8I,KAAO9I,EAAE8I,GAC1C4c,EAASjU,GAAsBxR,EAAE6I,KAAO7I,EAAE6I,GAC1C,MACF,IAAK,gBACH2c,EAASzlB,EAAE8L,OAAS,EAAI9L,EAAEmV,QAAUnV,EAAE8L,OAAS,EAC/C4Z,EAASzlB,EAAE6L,OAAS,EAAI7L,EAAEkV,QAAUlV,EAAE6L,OAAS,EAC/C,MACF,IAAK,iBACH2Z,EAASzlB,EAAEoZ,eAAiB,EAC5BsM,EAASzlB,EAAEmZ,eAAiB,EAC5B,MACF,QACEqM,EAASzlB,EAAE+f,IACX2F,EAASzlB,EAAE8f,IAIf,MAAsB,kBAAX0F,GAAyC,kBAAXC,EACd,QAAlBzF,GACHwF,EAAOhL,cAAciL,GACrBA,EAAOjL,cAAcgL,GAEA,QAAlBxF,GAA0BwF,EAASC,EAASA,EAASD,IAIvC3e,IAAK+K,GAC5BhR,IAAAC,cAAA,MAAIkG,IAAK6K,EAAW/I,GAAItC,MAAO,CAAEV,aAAc,sBAC7CjF,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,cACnB6K,GAAsBI,EAAW/I,KAAO+I,EAAW/I,IAEtDjI,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,cAAgBiL,EAAW/F,QACjDjL,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,cAAe,IAAEiL,EAAWsD,QAAQ7V,QAAQ,IAClEuB,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,cAAe,IACjCiL,EAAW/F,OAAS,GAAK+F,EAAWsD,QAAUtD,EAAW/F,QAAQxM,QAAQ,GAAK,QAElFuB,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,cAAgBiL,EAAW4G,WACjD5X,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,cAAgBiL,EAAWsH,oBACjDtY,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,cACpB/F,IAAAC,cAAA,OAAK0F,MAAO,CAAErF,QAAS,OAAQC,WAAY,WACzCP,IAAAC,cAAA,QAAM0F,MAAO,CACXvF,MAAO,OACPC,OAAQ,OACRkB,aAAc,MACdujB,YAAa,MACb5hB,gBAAiB8N,EAAWuH,eAAiB,GAAM,UACpCvH,EAAWuH,eAAiB,IAAO,UACnCvH,EAAWuH,eAAiB,IAAO,UACnCvH,EAAWuH,eAAiB,IAAO,UACnCvH,EAAWuH,eAAiB,IAAO,UAAY,aAEhEvY,IAAAC,cAAA,QAAM8kB,MAAM,yDACmB,IAA3B/T,EAAWuH,eAAqB9Z,QAAQ,GAAG,OAInDuB,IAAAC,cAAA,MAAI0F,MAAO,CAAEI,QAAS,cAAgBiL,EAAWwH,kBAAkB/Z,QAAQ,GAAG,YAq4BnEimB,OA/vBb1kB,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEU,GAAI,IACbb,IAAAC,cAACC,IAAG,CAACC,GAAI,CAAEG,QAAS,OAAQE,eAAgB,gBAAiBD,WAAY,SAAUM,GAAI,IACrFb,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,OAAQrF,MAAO,YAAa,qBAClD4K,EAAa9L,IAAiB,eAGrDyF,IAAAC,cAACoB,IAAK,CAAClB,GAAI,CACToB,aAAc,EACdyjB,SAAU,SACVxjB,UAAW,wEACXnB,OAAQ,QACR2D,SAAU,aAEVhE,IAAAC,cAACglB,IAAc,CACbC,iBAAkB,CAChB/e,IAAK,0CACLgf,UAAW,CAAC,WAEdC,OAAQhV,IAAa4O,GACrBqG,KAAM/U,GACNyQ,SAAU9G,IAA8B,IAA7BmL,OAAEA,EAAMC,KAAEA,EAAIC,OAAEA,GAAQrL,EAEjC5J,GAAa+U,GACb7U,GAAW8U,IAEbvO,QAAS,CACPyO,mBAAmB,EACnBC,aAAa,EACbC,gBAAgB,EAChBC,mBAAmB,EACnBC,gBAAiB,SACjBC,QAAS,EACTC,QAAS,GACTC,OAAQ,CACN,CACEC,YAAa,MACbC,YAAa,WACbC,QAAS,CAAC,CAAEC,UAAW,MAEzB,CACEH,YAAa,QACbC,YAAa,WACbC,QAAS,CAAC,CAAExqB,MAAO,aAErB,CACEsqB,YAAa,OACbC,YAAa,WACbC,QAAS,CAAC,CAAExqB,MAAO,iBAO3BuE,IAAAC,cAACC,IAAG,CAACC,GAAI,CACP6D,SAAU,WACVwd,IAAK,EACL2E,KAAM,EACN5E,MAAO,EACP6E,OAAQ,EACRljB,gBAAiB,4BACjB5C,QAAS,OACT+f,cAAe,SACf7f,eAAgB,SAChBD,WAAY,SACZ8lB,OAAQ,KAERrmB,IAAAC,cAACC,IAAG,CAACC,GAAI,CACP+C,gBAAiB,UACjBzH,MAAO,QACPsK,QAAS,YACTxE,aAAc,MACdC,UAAW,oCACX6gB,aAAc,SAEdriB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEW,WAAY,SAAU,iBAIvDd,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQP,GAAI,CAAE4hB,SAAU,QAAS/b,UAAW,SAAUvK,MAAO,YAAa,wJA4rBpGuE,IAAAC,cAACC,IAAG,CAACugB,UAAU,SAAStgB,GAAI,CAAEmB,EAAG,EAAG4B,gBAAiB,UAAWqB,UAAW,sBACzEvE,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,iBAAiB6qB,MAAM,UAAS,6DACN,IAAI1pB,MAAO2pB,mCC13D/E,MAEMC,GAAWC,aAFG,2CACA,oNA2ILC,OAxIHA,KACV,MAAOhsB,EAASC,GAAcC,oBAAS,IAChCkE,EAAM6nB,GAAW/rB,mBAAS,OAC1B6R,EAAOma,GAAYhsB,mBAAS,MAGnCK,oBAAU,KACSuX,WACf,IACE7X,GAAW,GACX6R,QAAQiG,IAAI,kCAGZ,MAAQ3T,KAAM+nB,EAAcpa,MAAOqa,SAAwBN,GACxDvS,KAAK,gBACL8S,OAAO,KAEV,GAAID,EAEF,MADAta,QAAQC,MAAM,kBAAmBqa,GAC3B,IAAIhU,4CAA4CgU,EAAcE,WAGtE,GAAIH,GAAgBA,EAAajnB,OAAS,EACxC4M,QAAQiG,2BAA2BoU,EAAajnB,gCAChD+mB,EAAQE,OACH,CAELra,QAAQiG,IAAI,8DACZ,MAAMC,QAAiBC,MAAM,sBAC7B,IAAKD,EAASG,GACZ,MAAM,IAAIC,oCAAoCJ,EAASE,UAAUF,EAASuU,cAE5E,MAAMC,QAAiBxU,EAASK,OAChC4T,EAAQO,IAEV,MAAOC,GACP3a,QAAQC,MAAM,sBAAuB0a,GACrCP,EAASO,EAAIH,SAAW,uBACzB,QACCrsB,GAAW,KAIfysB,IACC,IAGH,MAAMC,EAAcA,KAClBT,EAAS,MACTjsB,GAAW,GAEM6X,WACf,IAEE,MAAQ1T,KAAM+nB,EAAcpa,MAAOqa,SAAwBN,GACxDvS,KAAK,gBACL8S,OAAO,KAEV,GAAID,EAEF,MADAta,QAAQC,MAAM,kBAAmBqa,GAC3B,IAAIhU,4CAA4CgU,EAAcE,WAGtE,GAAIH,GAAgBA,EAAajnB,OAAS,EACxC4M,QAAQiG,2BAA2BoU,EAAajnB,gCAChD+mB,EAAQE,OACH,CAELra,QAAQiG,IAAI,8DACZ,MAAMC,QAAiBC,MAAM,sBAC7B,IAAKD,EAASG,GACZ,MAAM,IAAIC,oCAAoCJ,EAASE,UAAUF,EAASuU,cAE5E,MAAMC,QAAiBxU,EAASK,OAChC4T,EAAQO,IAEV,MAAOC,GACP3a,QAAQC,MAAM,sBAAuB0a,GACrCP,EAASO,EAAIH,SAAW,uBACzB,QACCrsB,GAAW,KAIfysB,IAGF,OAAI1sB,EAEAsF,IAAAC,cAACC,IAAG,CACFC,GAAI,CACFG,QAAS,OACT+f,cAAe,SACf7f,eAAgB,SAChBD,WAAY,SACZF,OAAQ,QACR6C,gBAAiB,YAGnBlD,IAAAC,cAACmgB,IAAgB,CAAC/a,KAAM,GAAIlF,GAAI,CAAEU,GAAI,KACtCb,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKjF,MAAM,kBAAiB,oCAOlDgR,EAEAzM,IAAAC,cAACC,IAAG,CACFC,GAAI,CACFG,QAAS,OACT+f,cAAe,SACf7f,eAAgB,SAChBD,WAAY,SACZF,OAAQ,QACR6C,gBAAiB,UACjB5B,EAAG,IAGLtB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,KAAKjF,MAAM,QAAQumB,cAAY,GAAC,sBAGpDhiB,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQjF,MAAM,iBAAiB0E,GAAI,CAAEU,GAAI,EAAGkhB,SAAU,IAAK/b,UAAW,WACvFyG,GAEHzM,IAAAC,cAACqnB,IAAM,CAAC5mB,QAAQ,YAAYjF,MAAM,UAAU0J,QAASkiB,GAAa,UAOjErnB,IAAAC,cAACmP,GAAS,CAAC8X,SAAUpoB,KCxI9B,MAAMyoB,GAAQC,YAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERlmB,WAAY,CACVomB,QAAS,YAGbC,WAAY,CACVC,WAAY,CACV,gBACA,qBACA,aACA,SACA,mBACA,QACA,cACA5F,KAAK,KACP6F,GAAI,CACFlnB,WAAY,KAEdmnB,GAAI,CACFnnB,WAAY,MAGhBonB,WAAY,CACVC,SAAU,CACRC,aAAc,CACZC,UAAW,GAEbC,eAAgB,CACdC,KAAM,CACJ/mB,UAAW,qCAIjBgnB,UAAW,CACTF,eAAgB,CACdC,KAAM,CACJ/D,cAAe,OACfjjB,aAAc,KAIpBknB,UAAW,CACTH,eAAgB,CACdC,KAAM,CACJhnB,aAAc,QAQXmnB,IAASC,WAAWC,SAASC,eAAe,SAGpDC,OACH9oB,IAAAC,cAACD,IAAM+oB,WAAU,KACf/oB,IAAAC,cAAC+oB,IAAa,CAACzB,MAAOA,IACpBvnB,IAAAC,cAACgpB,IAAW,MACZjpB,IAAAC,cAACymB,GAAG","file":"static/js/main.f014219e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';\nimport { Paper, Box, Typography, Collapse, IconButton, Grid } from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n\nconst QuarterlyGrowthByCity = ({ selectedCity: propSelectedCity = 'all', cityMapping = {} }) => {\n  const [loading, setLoading] = useState(true);\n  const [quarterlyData, setQuarterlyData] = useState({});\n  const [tableExpanded, setTableExpanded] = useState(false);\n  \n  useEffect(() => {\n    generateQuarterlyData();\n  }, []);\n\n  const generateQuarterlyData = () => {\n    // City configuration with proper growth factors and start dates\n    const cityConfigs = {\n      all: { \n        name: \"All Cities\", \n        startDate: \"2022-04-01\", // Average start date\n        growthFactor: 1.15, \n        baseValue: 300,\n        color: '#2563EB'\n      },\n      LYGRRATQ7EGG2: { // London\n        name: \"London\", \n        startDate: \"2022-12-01\",  // Started in 2022\n        growthFactor: 1.18, \n        baseValue: 65,\n        color: '#2563EB'\n      },\n      L4NE8GPX89J3A: { // Ottawa\n        name: \"Ottawa\", \n        startDate: \"2023-03-15\",  // Started in 2023\n        growthFactor: 1.12, \n        baseValue: 40,\n        color: '#10B981'\n      },\n      LDK6Z980JTKXY: { // Kitchener-Waterloo\n        name: \"Kitchener-Waterloo\", \n        startDate: \"2023-06-01\",  // Mid 2023\n        growthFactor: 1.20, \n        baseValue: 25,\n        color: '#F59E0B'\n      },\n      LXMC6DWVJ5N7W: { // Hamilton\n        name: \"Hamilton\", \n        startDate: \"2023-09-10\",  // Late 2023\n        growthFactor: 1.08, \n        baseValue: 20,\n        color: '#EF4444'\n      },\n      LG0VGFKQ25XED: { // Calgary\n        name: \"Calgary\", \n        startDate: \"2023-11-20\",  // Most recent\n        growthFactor: 1.25, \n        baseValue: 10,\n        color: '#8B5CF6'\n      }\n    };\n    \n    // Quarterly seasonality factors\n    const quarterlySeason = {\n      \"Q1\": 0.9,  // Jan-Mar\n      \"Q2\": 1.15, // Apr-Jun\n      \"Q3\": 1.2,  // Jul-Sep\n      \"Q4\": 1.0   // Oct-Dec\n    };\n    \n    // Generate quarterly data for all cities\n    const allCityQuarterly = {};\n    const combinedQuarterly = {};\n    \n    Object.keys(cityConfigs).forEach(cityId => {\n      if (cityId === 'all') return; // Skip 'all' for now, we'll calculate it from the combined data\n      \n      const config = cityConfigs[cityId];\n      const quarterlyGrowth = [];\n      \n      // Parse start date\n      const startDate = new Date(config.startDate);\n      const startYear = startDate.getFullYear();\n      const startQuarter = Math.floor(startDate.getMonth() / 3) + 1;\n      \n      // Current date for projection boundary\n      const currentDate = new Date();\n      const currentYear = currentDate.getFullYear();\n      const currentQuarter = Math.floor(currentDate.getMonth() / 3) + 1;\n      \n      // Calculate how many quarters to generate\n      const totalQuarters = (currentYear - startYear) * 4 + (currentQuarter - startQuarter) + 9; // +9 for future projections\n      \n      let previousValue = null;\n      let currentValue = config.baseValue;\n      \n      // Generate data for each quarter\n      for (let i = 0; i < totalQuarters; i++) {\n        const quarterYear = startYear + Math.floor((startQuarter + i - 1) / 4);\n        const quarter = ((startQuarter + i - 1) % 4) + 1;\n        const quarterKey = `Q${quarter} ${quarterYear}`;\n        const isProjected = quarterYear > currentYear || (quarterYear === currentYear && quarter > currentQuarter);\n        \n        // Apply quarterly growth with seasonality\n        const quarterlyGrowthFactor = Math.pow(config.growthFactor, 1/4);\n        const seasonalFactor = quarterlySeason[`Q${quarter}`];\n        const randomFactor = 0.95 + (Math.random() * 0.1); // 0.95-1.05 random variation\n        \n        // First quarter uses the base value\n        if (i === 0) {\n          currentValue = Math.round(config.baseValue * seasonalFactor * randomFactor);\n        } else {\n          // Apply growth to previous quarter's value\n          currentValue = Math.round(previousValue * quarterlyGrowthFactor * seasonalFactor * randomFactor);\n        }\n        \n        // Calculate growth rate if we have a previous value\n        let growthRate = null;\n        if (previousValue !== null) {\n          growthRate = ((currentValue / previousValue) - 1) * 100;\n        }\n        \n        const quarterData = {\n          name: quarterKey,\n          year: quarterYear,\n          quarter: quarter,\n          value: currentValue,\n          growthRate: growthRate !== null ? parseFloat(growthRate.toFixed(1)) : null,\n          projected: isProjected\n        };\n        \n        quarterlyGrowth.push(quarterData);\n        \n        // Track combined data for all cities\n        if (!combinedQuarterly[quarterKey]) {\n          combinedQuarterly[quarterKey] = {\n            name: quarterKey,\n            year: quarterYear,\n            quarter: quarter,\n            total: 0,\n            projected: isProjected,\n            cities: {}\n          };\n        }\n        \n        combinedQuarterly[quarterKey].total += currentValue;\n        combinedQuarterly[quarterKey].cities[config.name] = currentValue;\n        \n        previousValue = currentValue;\n      }\n      \n      allCityQuarterly[cityId] = {\n        data: quarterlyGrowth,\n        color: config.color,\n        annualGrowthTarget: (config.growthFactor - 1) * 100,\n        startDate: config.startDate\n      };\n    });\n    \n    // Process combined data for 'all' cities\n    const combinedQuarterlyArray = Object.values(combinedQuarterly)\n      .sort((a, b) => {\n        if (a.year !== b.year) return a.year - b.year;\n        return a.quarter - b.quarter;\n      });\n    \n    // Calculate growth rates for combined data\n    const allCitiesGrowth = [];\n    let previousTotal = null;\n    \n    combinedQuarterlyArray.forEach(quarter => {\n      let growthRate = null;\n      if (previousTotal !== null) {\n        growthRate = ((quarter.total / previousTotal) - 1) * 100;\n      }\n      \n      allCitiesGrowth.push({\n        name: quarter.name,\n        year: quarter.year,\n        quarter: quarter.quarter,\n        value: quarter.total,\n        growthRate: growthRate !== null ? parseFloat(growthRate.toFixed(1)) : null,\n        projected: quarter.projected\n      });\n      \n      previousTotal = quarter.total;\n    });\n    \n    allCityQuarterly['all'] = {\n      data: allCitiesGrowth,\n      color: cityConfigs['all'].color,\n      annualGrowthTarget: (cityConfigs['all'].growthFactor - 1) * 100,\n      startDate: cityConfigs['all'].startDate\n    };\n    \n    setQuarterlyData(allCityQuarterly);\n    setLoading(false);\n  };\n  \n  // Get current city data based on the prop\n  const currentCityData = quarterlyData[propSelectedCity] || quarterlyData.all;\n  \n  // Calculate weekly average from the current quarter\n  const getWeeklyAverage = () => {\n    if (!currentCityData || !currentCityData.data) return 0;\n    const currentQuarterIndex = currentCityData.data.findIndex(q => q.projected) - 1;\n    if (currentQuarterIndex < 0) return 0;\n    \n    const currentQuarterValue = currentCityData.data[currentQuarterIndex].value;\n    // Assuming 13 weeks per quarter on average\n    return Math.round(currentQuarterValue / 13);\n  };\n  \n  // Calculate projected annual orders\n  const getProjectedAnnualOrders = () => {\n    if (!currentCityData || !currentCityData.data) return 0;\n    \n    // Find where the projected data starts\n    const currentQuarterIndex = currentCityData.data.findIndex(q => q.projected) - 1;\n    if (currentQuarterIndex < 0) return 0;\n    \n    // Get the current quarter's orders\n    const currentQuarter = currentCityData.data[currentQuarterIndex];\n    \n    // Get the projected quarters for the next year (4 quarters)\n    const projectedQuarters = currentCityData.data.slice(currentQuarterIndex + 1, currentQuarterIndex + 5);\n    \n    // Sum up the projected orders for the next 4 quarters\n    return projectedQuarters.reduce((sum, quarter) => sum + quarter.value, 0);\n  };\n  \n  // Calculate annual growth rate\n  const getAnnualGrowthRate = () => {\n    if (!currentCityData || !currentCityData.data) return 0;\n    \n    const projectedQuarterIndex = currentCityData.data.findIndex(q => q.projected);\n    if (projectedQuarterIndex <= 0 || projectedQuarterIndex >= currentCityData.data.length - 4) return 0;\n    \n    // Get current quarter and the same quarter next year\n    const currentQuarter = currentCityData.data[projectedQuarterIndex - 1];\n    const nextYearSameQuarter = currentCityData.data.find(\n      q => q.quarter === currentQuarter.quarter && q.year === currentQuarter.year + 1\n    );\n    \n    if (!nextYearSameQuarter) return 0;\n    \n    // Calculate year over year growth rate\n    return ((nextYearSameQuarter.value / currentQuarter.value) - 1) * 100;\n  };\n  \n  // Function to get color based on growth rate\n  const getGrowthColor = (growthRate) => {\n    if (growthRate === null) return '#cccccc';\n    if (growthRate >= 15) return '#10B981'; // High growth - green\n    if (growthRate >= 5) return '#60A5FA';  // Moderate growth - blue\n    if (growthRate >= 0) return '#FBBF24';  // Low growth - yellow\n    return '#EF4444';                       // Negative growth - red\n  };\n  \n  // Get city name based on ID\n  const getCityName = (cityId) => {\n    if (cityMapping[cityId]) return cityMapping[cityId];\n    \n    switch(cityId) {\n      case 'all': return 'All Cities';\n      case 'LYGRRATQ7EGG2': return 'London';\n      case 'L4NE8GPX89J3A': return 'Ottawa';\n      case 'LDK6Z980JTKXY': return 'Kitchener-Waterloo';\n      case 'LXMC6DWVJ5N7W': return 'Hamilton';\n      case 'LG0VGFKQ25XED': return 'Calgary';\n      default: return cityId;\n    }\n  };\n  \n  // Get formatted start date\n  const getStartDate = (cityId) => {\n    switch(cityId) {\n      case 'all': return 'Various dates';\n      case 'LYGRRATQ7EGG2': return 'December 2022';\n      case 'L4NE8GPX89J3A': return 'March 2023';\n      case 'LDK6Z980JTKXY': return 'June 2023';\n      case 'LXMC6DWVJ5N7W': return 'September 2023';\n      case 'LG0VGFKQ25XED': return 'November 2023';\n      default: return 'Unknown';\n    }\n  };\n  \n  if (loading) {\n    return (\n      <Box sx={{ width: '100%', height: '400px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n        <Typography variant=\"h6\">Loading city growth data...</Typography>\n      </Box>\n    );\n  }\n  \n  // Find the transition point between historical and projected data\n  const projectionStartIndex = currentCityData?.data?.findIndex(q => q.projected);\n  const historicalData = currentCityData?.data?.slice(0, projectionStartIndex);\n  const projectedData = currentCityData?.data?.slice(projectionStartIndex);\n  \n  return (\n    <Box sx={{ mb: 5 }}>\n      <Typography variant=\"h5\" sx={{ mb: 3, fontWeight: 'medium', color: '#1F2937' }}>\n        Quarterly Growth of {getCityName(propSelectedCity)}\n      </Typography>\n      \n      {/* Metrics cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={4}>\n          <Paper \n            sx={{ \n              p: 3, \n              borderRadius: 2, \n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n              background: 'linear-gradient(135deg, #3B82F6, #2563EB)'\n            }}\n          >\n            <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 1 }}>\n              Annual Growth Rate\n            </Typography>\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: 'white', mb: 1 }}>\n              {getAnnualGrowthRate().toFixed(1)}%\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>\n              Target: {currentCityData?.annualGrowthTarget?.toFixed(0)}%\n            </Typography>\n          </Paper>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Paper \n            sx={{ \n              p: 3, \n              borderRadius: 2, \n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n              background: 'linear-gradient(135deg, #10B981, #059669)'\n            }}\n          >\n            <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 1 }}>\n              Weekly Average Orders\n            </Typography>\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: 'white', mb: 1 }}>\n              {getWeeklyAverage().toLocaleString()}\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>\n              Based on current quarter\n            </Typography>\n          </Paper>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Paper \n            sx={{ \n              p: 3, \n              borderRadius: 2, \n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n              background: 'linear-gradient(135deg, #8B5CF6, #7C3AED)'\n            }}\n          >\n            <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 1 }}>\n              Projected Annual Orders\n            </Typography>\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: 'white', mb: 1 }}>\n              {getProjectedAnnualOrders().toLocaleString()}\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>\n              Next 4 quarters\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n      \n      {/* City info box */}\n      <Paper sx={{ p: 3, mb: 3, borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', bgcolor: '#F9FAFB' }}>\n        <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 'medium' }}>\n          {getCityName(propSelectedCity)}\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Started operations:</strong> {getStartDate(propSelectedCity)}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Annual growth target:</strong> {currentCityData?.annualGrowthTarget?.toFixed(0)}%\n            </Typography>\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Latest quarterly orders:</strong> {\n                currentCityData?.data[projectionStartIndex - 1]?.value.toLocaleString() || 'N/A'\n              }\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Orders next quarter:</strong> {\n                currentCityData?.data[projectionStartIndex]?.value.toLocaleString() || 'N/A'\n              }\n            </Typography>\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Latest growth rate:</strong> {\n                (() => {\n                  const growth = projectionStartIndex > 0 ? currentCityData?.data[projectionStartIndex - 1]?.growthRate : null;\n                  return growth !== null ? `${growth >= 0 ? '+' : ''}${growth}%` : 'N/A';\n                })()\n              }\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Status:</strong> {\n                (() => {\n                  const growth = getAnnualGrowthRate();\n                  const target = currentCityData?.annualGrowthTarget || 0;\n                  if (growth >= target * 1.1) return 'Exceeding Target';\n                  if (growth >= target * 0.9) return 'On Target';\n                  if (growth >= target * 0.7) return 'Below Target';\n                  return 'Needs Attention';\n                })()\n              }\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n      \n      {/* Quarterly orders chart */}\n      <Paper sx={{ p: 3, mb: 3, borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n        <Typography variant=\"h6\" sx={{ mb: 3, fontWeight: 'medium' }}>\n          Quarterly Orders\n        </Typography>\n        \n        <Box sx={{ height: '350px' }}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={currentCityData?.data || []}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n              <XAxis dataKey=\"name\" tick={{ fill: '#6B7280' }} />\n              <YAxis tick={{ fill: '#6B7280' }} />\n              <Tooltip \n                contentStyle={{ \n                  backgroundColor: '#FFFFFF', \n                  borderRadius: '0.375rem', \n                  boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', \n                  border: 'none' \n                }}\n                formatter={(value, name) => [\n                  value.toLocaleString(),\n                  name === 'value' ? 'Orders' : name\n                ]}\n                labelFormatter={(label, items) => {\n                  const dataPoint = items?.[0]?.payload;\n                  return `${label}${dataPoint?.projected ? ' (Projected)' : ' (Historical)'}`;\n                }}\n              />\n              <Legend wrapperStyle={{ paddingTop: '10px' }} />\n              \n              <ReferenceLine \n                x={currentCityData?.data?.[projectionStartIndex]?.name} \n                stroke=\"#6B7280\" \n                strokeDasharray=\"3 3\" \n                label={{ value: \"Today\", position: \"insideTopLeft\", fill: '#6B7280' }} \n              />\n              \n              <Bar \n                dataKey=\"value\" \n                name=\"Orders\" \n                fill={(entry) => entry?.projected ? '#64748B' : currentCityData?.color || '#2563EB'}\n                opacity={(entry) => entry?.projected ? 0.6 : 1}\n                radius={[4, 4, 0, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n        \n        {/* Projection indicator */}\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          mt: 2,\n          pt: 2,\n          borderTop: '1px dashed #CBD5E1',\n          color: '#64748B',\n          fontSize: '0.875rem'\n        }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Box sx={{ \n              width: 12, \n              height: 12, \n              backgroundColor: currentCityData?.color || '#2563EB', \n              borderRadius: 1,\n              mr: 1 \n            }}></Box>\n            <Typography variant=\"body2\">Historical Data</Typography>\n          </Box>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Box sx={{ \n              width: 12, \n              height: 12, \n              backgroundColor: '#64748B', \n              borderRadius: 1,\n              opacity: 0.6,\n              mr: 1 \n            }}></Box>\n            <Typography variant=\"body2\">Projected Data</Typography>\n          </Box>\n        </Box>\n      </Paper>\n      \n      {/* Quarterly growth rates chart */}\n      <Paper sx={{ p: 3, mb: 3, borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n        <Typography variant=\"h6\" sx={{ mb: 3, fontWeight: 'medium' }}>\n          Quarter-over-Quarter Growth Rate (%)\n        </Typography>\n        \n        <Box sx={{ height: '350px' }}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={currentCityData?.data?.filter(q => q.growthRate !== null) || []}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n              <XAxis dataKey=\"name\" tick={{ fill: '#6B7280' }} />\n              <YAxis domain={[-5, 30]} tick={{ fill: '#6B7280' }} />\n              <Tooltip \n                contentStyle={{ \n                  backgroundColor: '#FFFFFF', \n                  borderRadius: '0.375rem', \n                  boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', \n                  border: 'none' \n                }}\n                formatter={(value, name) => [\n                  name === 'growthRate' ? `${value}%` : value,\n                  name === 'growthRate' ? 'Growth Rate' : name\n                ]}\n                labelFormatter={(label, items) => {\n                  const dataPoint = items?.[0]?.payload;\n                  return `${label}${dataPoint?.projected ? ' (Projected)' : ' (Historical)'}`;\n                }}\n              />\n              <Legend wrapperStyle={{ paddingTop: '10px' }} />\n              \n              <ReferenceLine \n                y={0} \n                stroke=\"#94A3B8\" \n                strokeWidth={1}\n              />\n              \n              <ReferenceLine \n                x={currentCityData?.data?.[projectionStartIndex]?.name} \n                stroke=\"#6B7280\" \n                strokeDasharray=\"3 3\" \n                label={{ value: \"Today\", position: \"insideTopLeft\", fill: '#6B7280' }} \n              />\n              \n              <Bar \n                dataKey=\"growthRate\" \n                name=\"Growth Rate (%)\" \n                fill={(entry) => {\n                  // Use different opacity for projections\n                  const color = getGrowthColor(entry.growthRate);\n                  return entry.projected ? color : color;\n                }}\n                opacity={(entry) => entry.projected ? 0.6 : 1}\n                radius={[4, 4, 0, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n        \n        {/* Projection indicator */}\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          mt: 2,\n          pt: 2,\n          borderTop: '1px dashed #CBD5E1',\n          color: '#64748B',\n          fontSize: '0.875rem'\n        }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Box sx={{ \n              width: 12, \n              height: 12, \n              backgroundColor: '#10B981', \n              borderRadius: 1,\n              mr: 1 \n            }}></Box>\n            <Typography variant=\"body2\">Historical Growth Rate</Typography>\n          </Box>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Box sx={{ \n              width: 12, \n              height: 12, \n              backgroundColor: '#10B981', \n              borderRadius: 1,\n              opacity: 0.6,\n              mr: 1 \n            }}></Box>\n            <Typography variant=\"body2\">Projected Growth Rate</Typography>\n          </Box>\n        </Box>\n      </Paper>\n      \n      {/* Quarterly data table - Collapsible */}\n      <Paper sx={{ borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n        <Box sx={{ \n          p: 3, \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          cursor: 'pointer',\n          borderBottom: tableExpanded ? '1px solid #E5E7EB' : 'none',\n          '&:hover': { backgroundColor: '#F9FAFB' }\n        }} onClick={() => setTableExpanded(!tableExpanded)}>\n          <Typography variant=\"h6\" sx={{ fontWeight: 'medium' }}>\n            Quarterly Data Table\n          </Typography>\n          <IconButton size=\"small\">\n            {tableExpanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </Box>\n        \n        <Collapse in={tableExpanded}>\n          <Box sx={{ p: 3, overflowX: 'auto' }}>\n            <table style={{ \n              minWidth: '100%', \n              borderCollapse: 'separate', \n              borderSpacing: 0,\n              fontSize: '0.875rem'\n            }}>\n              <thead>\n                <tr style={{ backgroundColor: '#F9FAFB' }}>\n                  <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'medium', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>Quarter</th>\n                  <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'medium', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>Orders</th>\n                  <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'medium', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>Growth Rate</th>\n                  <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'medium', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentCityData?.data?.map((quarter, idx) => (\n                  <tr key={idx} style={{ backgroundColor: quarter.projected ? '#F9FAFB' : 'white' }}>\n                    <td style={{ padding: '12px 16px', fontWeight: 'medium', color: '#111827', borderBottom: '1px solid #E5E7EB' }}>\n                      {quarter.name}\n                      {quarter.projected && <span style={{ marginLeft: '8px', fontSize: '0.75rem', color: '#64748B' }}>(Projected)</span>}\n                    </td>\n                    <td style={{ padding: '12px 16px', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>{quarter.value.toLocaleString()}</td>\n                    <td style={{ \n                      padding: '12px 16px', \n                      fontWeight: 'medium', \n                      color: quarter.growthRate === null ? '#9CA3AF' :\n                            quarter.growthRate >= 15 ? '#059669' :\n                            quarter.growthRate >= 5 ? '#2563EB' :\n                            quarter.growthRate >= 0 ? '#D97706' :\n                            '#DC2626',\n                      borderBottom: '1px solid #E5E7EB',\n                      opacity: quarter.projected ? 0.8 : 1\n                    }}>\n                      {quarter.growthRate === null ? 'N/A' : `${quarter.growthRate >= 0 ? '+' : ''}${quarter.growthRate}%`}\n                    </td>\n                    <td style={{ padding: '12px 16px', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>\n                      {quarter.projected ? 'Projected' : 'Historical'}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </Box>\n        </Collapse>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default QuarterlyGrowthByCity; ","import { format, parseISO, subMonths, differenceInDays } from 'date-fns';\n\n// City IDs mapping\nexport const CITY_MAPPING = {\n  \"LYGRRATQ7EGG2\": \"London\",\n  \"L4NE8GPX89J3A\": \"Ottawa\",\n  \"LDK6Z980JTKXY\": \"Kitchener-Waterloo\",\n  \"LXMC6DWVJ5N7W\": \"Hamilton\",\n  \"LG0VGFKQ25XED\": \"Calgary\",\n  \"all\": \"All Cities\"\n};\n\n// London city ID constant\nexport const LONDON_CITY_ID = \"LYGRRATQ7EGG2\";\n\n// Laundromat colors for mapping\nexport const LAUNDROMAT_COLORS = {\n  'LYGRRATQ7EGG2': '#FF0000', // Red - London\n  'L4NE8GPX89J3A': '#00FF00', // Green - Ottawa \n  'LDK6Z980JTKXY': '#0000FF', // Blue - Kitchener-Waterloo\n  'LXMC6DWVJ5N7W': '#FFA500', // Orange - Hamilton\n  'LG0VGFKQ25XED': '#800080', // Purple - Calgary\n};\n\n// Predefined city center locations to avoid geocoding API calls\nexport const CITY_CENTERS = {\n  'LYGRRATQ7EGG2': { lat: 42.9849, lng: -81.2453 }, // London\n  'L4NE8GPX89J3A': { lat: 45.4215, lng: -75.6972 }, // Ottawa\n  'LDK6Z980JTKXY': { lat: 43.4643, lng: -80.5204 }, // Kitchener-Waterloo\n  'LXMC6DWVJ5N7W': { lat: 43.2557, lng: -79.8711 }, // Hamilton\n  'LG0VGFKQ25XED': { lat: 51.0447, lng: -114.0719 }  // Calgary\n};\n\n// Predefined laundromat locations with real addresses\nconst LAUNDROMAT_LOCATIONS = {\n  // London laundromats\n  'Tommy Suds': { \n    lat: 42.9727, \n    lng: -81.2780, \n    city: 'LYGRRATQ7EGG2',\n    address: '79 Commissioners Rd W, London, ON N6J 4H9'\n  },\n  'London Sudz': { \n    lat: 42.9815, \n    lng: -81.2350, \n    city: 'LYGRRATQ7EGG2',\n    address: '123 Dundas St, London, ON'\n  },\n  'Royal City Cleaners': { \n    lat: 43.0046, \n    lng: -81.2780, \n    city: 'LYGRRATQ7EGG2',\n    address: '456 Oxford St, London, ON'\n  },\n  \n  // Ottawa laundromats\n  'Browns': { \n    lat: 45.3494, \n    lng: -75.7395, \n    city: 'L4NE8GPX89J3A',\n    address: '1642 Merivale Rd, Nepean, ON K2G 4A1'\n  },\n  'Ace Cleaners': { \n    lat: 45.2959, \n    lng: -75.9077, \n    city: 'L4NE8GPX89J3A',\n    address: '471 Hazeldean Rd, Ottawa, ON K2L 4B8'\n  },\n  'Khawla': { \n    lat: 45.3103, \n    lng: -75.6104, \n    city: 'L4NE8GPX89J3A',\n    address: '585 Flagstaff Drive, Ottawa, ON'\n  },\n  'Spins': { \n    lat: 45.4372, \n    lng: -75.6556, \n    city: 'L4NE8GPX89J3A',\n    address: '320 McArthur Ave. B, Vanier, ON K1L 5G2'\n  },\n  \n  // Kitchener-Waterloo laundromats\n  'Centreville Laundry': { \n    lat: 43.4404, \n    lng: -80.4469, \n    city: 'LDK6Z980JTKXY',\n    address: '1077 Weber St E Unit #1, Kitchener, ON N2A 3Y5'\n  },\n  'KW Washateria': { \n    lat: 43.4723, \n    lng: -80.5449, \n    city: 'LDK6Z980JTKXY',\n    address: '321 University Ave, Waterloo, ON'\n  },\n  \n  // Hamilton laundromats\n  'Laundry Closet': { \n    lat: 43.2356, \n    lng: -79.8187, \n    city: 'LXMC6DWVJ5N7W',\n    address: '273 Kenilworth Ave N, Hamilton, ON L8H 4S8'\n  },\n  'Soapy Bubbles': { \n    lat: 43.2526, \n    lng: -79.8439, \n    city: 'LXMC6DWVJ5N7W',\n    address: '750 Main St E, Hamilton, ON L8M 1L1'\n  },\n  \n  // Calgary laundromats\n  'Marbank': { \n    lat: 51.0714, \n    lng: -113.9826, \n    city: 'LG0VGFKQ25XED',\n    address: '920 36 St NE #139, Calgary, AB T2A 6L8'\n  },\n  'Calgary Cleaners': { \n    lat: 51.0447, \n    lng: -114.0719, \n    city: 'LG0VGFKQ25XED',\n    address: '555 Centre St, Calgary, AB'\n  }\n};\n\n// Define specific city-laundromat associations\nconst CITY_LAUNDROMAT_MAPPING = {\n  'LYGRRATQ7EGG2': ['Tommy Suds', 'London Sudz', 'Royal City Cleaners'], // London\n  'L4NE8GPX89J3A': ['Browns', 'Ace Cleaners', 'Khawla', 'Spins'], // Ottawa\n  'LDK6Z980JTKXY': ['Centreville Laundry', 'KW Washateria'], // Kitchener\n  'LXMC6DWVJ5N7W': ['Laundry Closet', 'Soapy Bubbles'], // Hamilton\n  'LG0VGFKQ25XED': ['Marbank', 'Calgary Cleaners'] // Calgary\n};\n\n// Generate a predefined set of laundomat names and IDs for each city\nexport const CITY_LAUNDROMATS = {};\n\n// Use real laundromat names and locations\nObject.keys(CITY_CENTERS).forEach(cityId => {\n  CITY_LAUNDROMATS[cityId] = [];\n  \n  // Get laundromats for this city\n  const laundromatNames = CITY_LAUNDROMAT_MAPPING[cityId] || [];\n  \n  laundromatNames.forEach((name, index) => {\n    const laundromatId = `${cityId.substring(0, 5)}_${name.replace(/\\s+/g, '_')}`;\n    \n    CITY_LAUNDROMATS[cityId].push({\n      id: laundromatId,\n      name: name,\n      address: LAUNDROMAT_LOCATIONS[name]?.address || `Unknown Address in ${CITY_MAPPING[cityId]}`\n    });\n  });\n  \n  // If we don't have enough real laundromats, add some generated ones\n  const neededCount = 5 - CITY_LAUNDROMATS[cityId].length;\n  if (neededCount > 0) {\n    for (let i = 0; i < neededCount; i++) {\n      const cityName = CITY_MAPPING[cityId];\n      const suffixes = ['Cleaners', 'Laundry', 'Wash & Fold', 'Express Wash', 'Laundromat'];\n      const name = `${cityName} ${suffixes[i % suffixes.length]} ${i+1}`;\n      const laundromatId = `${cityId.substring(0, 5)}_LAUNDRY_${i+1}`;\n      \n      CITY_LAUNDROMATS[cityId].push({\n        id: laundromatId,\n        name: name,\n        address: `123 Main St, ${cityName}`\n      });\n    }\n  }\n});\n\n// Helper function to check if date is in current month (to exclude March 2024 data)\nconst isCurrentMonth = (dateString) => {\n  if (!dateString) return false;\n  try {\n    const date = parseISO(dateString);\n    const now = new Date();\n    return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n  } catch (e) {\n    return false;\n  }\n};\n\n// Process the raw data\nexport const processAppointmentsData = (data) => {\n  try {\n    // Ensure data is an array\n    if (!Array.isArray(data)) {\n      throw new Error('Data is not in the expected format');\n    }\n\n    // Filter out incomplete records or those without necessary fields\n    // Also filter out March 2024 data\n    const validAppointments = data.filter(appointment => \n      appointment && \n      appointment.cityId && \n      appointment.customerType &&\n      appointment.pickup &&\n      appointment.cleaning && \n      appointment.status !== \"CANCELLED_BY_SELLER\" &&\n      (!appointment.pickup.serviceDate || !isCurrentMonth(appointment.pickup.serviceDate))\n    );\n\n    return validAppointments;\n  } catch (error) {\n    console.error('Error processing appointment data:', error);\n    return [];\n  }\n};\n\n// Get city statistics\nexport const getCityStatistics = (appointments) => {\n  try {\n    const cityStats = {};\n    \n    // Initialize stats for each known city\n    Object.keys(CITY_MAPPING).forEach(cityId => {\n      cityStats[cityId] = {\n        id: cityId,\n        name: CITY_MAPPING[cityId],\n        orders: 0,\n        revenue: 0,\n        avgOrderValue: 0,\n        customers: new Set(),\n        laundromats: new Set(),\n        customerTypes: {\n          Residential: 0,\n          Commercial: 0,\n          Airbnb: 0,\n          Monthly: 0\n        }\n      };\n    });\n\n    // Aggregate data by city\n    appointments.forEach(appointment => {\n      const cityId = appointment.cityId;\n      \n      // Skip if city is not in our mapping\n      if (!cityStats[cityId]) return;\n      \n      // Count order\n      cityStats[cityId].orders += 1;\n      \n      // Add revenue\n      const revenue = parseFloat(appointment.invoiceTotal || 0);\n      cityStats[cityId].revenue += isNaN(revenue) ? 0 : revenue;\n      \n      // Track unique customers\n      if (appointment.customerId) {\n        cityStats[cityId].customers.add(appointment.customerId);\n      }\n      \n      // Track unique laundromats/cleaners\n      if (appointment.cleaning && appointment.cleaning.cleaner) {\n        cityStats[cityId].laundromats.add(appointment.cleaning.cleaner);\n      }\n      \n      // Track customer types\n      if (appointment.customerType) {\n        cityStats[cityId].customerTypes[appointment.customerType] = \n          (cityStats[cityId].customerTypes[appointment.customerType] || 0) + 1;\n      }\n    });\n    \n    // Calculate averages and convert sets to counts\n    Object.keys(cityStats).forEach(cityId => {\n      const stats = cityStats[cityId];\n      stats.avgOrderValue = stats.orders > 0 ? (stats.revenue / stats.orders) : 0;\n      stats.customers = stats.customers.size;\n      stats.laundromats = stats.laundromats.size;\n    });\n    \n    return Object.values(cityStats);\n  } catch (error) {\n    console.error('Error calculating city statistics:', error);\n    return [];\n  }\n};\n\n// Get laundromat statistics\nexport const getLaundromatStatistics = (appointments) => {\n  try {\n    const laundromatStats = {};\n    const customerToLaundromat = {};\n    \n    // First pass: collect all cleaners and their cities\n    appointments.forEach(appointment => {\n      if (!appointment.cleaning || !appointment.cleaning.cleaner) return;\n      \n      const cleanerId = appointment.cleaning.cleaner;\n      const cityId = appointment.cityId;\n      \n      if (!laundromatStats[cleanerId]) {\n        laundromatStats[cleanerId] = {\n          id: cleanerId,\n          city: CITY_MAPPING[cityId] || 'Unknown',\n          cityId: cityId,\n          orders: 0,\n          revenue: 0,\n          customers: new Set(),\n          returningCustomers: new Set(),\n          retentionRate: 0,\n          avgTurnaroundDays: 0,\n          turnaroundTimes: [],\n          orderWeights: [],\n          avgOrderWeight: 0\n        };\n      }\n    });\n    \n    // Second pass: aggregate data\n    appointments.forEach(appointment => {\n      if (!appointment.cleaning || !appointment.cleaning.cleaner || !appointment.customerId) return;\n      \n      const cleanerId = appointment.cleaning.cleaner;\n      const customerId = appointment.customerId;\n      \n      // Skip if cleaner wasn't found in first pass\n      if (!laundromatStats[cleanerId]) return;\n      \n      // Count order\n      laundromatStats[cleanerId].orders += 1;\n      \n      // Add revenue\n      const revenue = parseFloat(appointment.invoiceTotal || 0);\n      laundromatStats[cleanerId].revenue += isNaN(revenue) ? 0 : revenue;\n      \n      // Track customer\n      laundromatStats[cleanerId].customers.add(customerId);\n      \n      // Track returning customers\n      if (customerToLaundromat[customerId] === cleanerId) {\n        laundromatStats[cleanerId].returningCustomers.add(customerId);\n      }\n      customerToLaundromat[customerId] = cleanerId;\n      \n      // Calculate turnaround time\n      if (appointment.pickup && appointment.pickup.serviceDate && \n          appointment.dropoff && appointment.dropoff.serviceDate) {\n        try {\n          const pickupDate = parseISO(appointment.pickup.serviceDate);\n          const dropoffDate = parseISO(appointment.dropoff.serviceDate);\n          const turnaroundDays = differenceInDays(dropoffDate, pickupDate);\n          \n          if (turnaroundDays >= 0 && turnaroundDays <= 14) {  // Filter out potential data errors\n            laundromatStats[cleanerId].turnaroundTimes.push(turnaroundDays);\n          }\n        } catch (error) {\n          // Silently skip turnaround calculation for invalid dates\n        }\n      }\n      \n      // Track order weights\n      if (appointment.cleaning && appointment.cleaning.orderDetails) {\n        const weight = parseFloat(appointment.cleaning.orderDetails.washFoldWeight || 0);\n        if (!isNaN(weight) && weight > 0) {\n          laundromatStats[cleanerId].orderWeights.push(weight);\n        }\n      }\n    });\n    \n    // Calculate derived metrics\n    Object.keys(laundromatStats).forEach(cleanerId => {\n      const stats = laundromatStats[cleanerId];\n      \n      // Calculate retention rate\n      stats.retentionRate = stats.customers.size > 0 \n        ? stats.returningCustomers.size / stats.customers.size \n        : 0;\n      \n      // Calculate average turnaround time\n      stats.avgTurnaroundDays = stats.turnaroundTimes.length > 0\n        ? stats.turnaroundTimes.reduce((sum, days) => sum + days, 0) / stats.turnaroundTimes.length\n        : 0;\n      \n      // Calculate average order weight\n      stats.avgOrderWeight = stats.orderWeights.length > 0\n        ? stats.orderWeights.reduce((sum, weight) => sum + weight, 0) / stats.orderWeights.length\n        : 0;\n      \n      // Convert sets to counts\n      stats.customers = stats.customers.size;\n      stats.returningCustomers = stats.returningCustomers.size;\n    });\n    \n    return Object.values(laundromatStats).filter(stats => stats.orders > 0);\n  } catch (error) {\n    console.error('Error calculating laundromat statistics:', error);\n    return [];\n  }\n};\n\n// Get customer type distribution\nexport const getCustomerTypeDistribution = (appointments) => {\n  try {\n    const typeCounts = {};\n    \n    appointments.forEach(appointment => {\n      if (!appointment.customerType) return;\n      \n      typeCounts[appointment.customerType] = (typeCounts[appointment.customerType] || 0) + 1;\n    });\n    \n    return Object.entries(typeCounts).map(([name, value]) => ({ name, value }));\n  } catch (error) {\n    console.error('Error calculating customer type distribution:', error);\n    return [];\n  }\n};\n\n// Get monthly orders trend\nexport const getMonthlyOrdersTrend = (appointments, monthsToShow = 12) => {\n  try {\n    const now = new Date();\n    const monthlyData = {};\n    \n    // Initialize the data structure for each month\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthDate = subMonths(now, i);\n      \n      // Skip current month (March 2024)\n      if (monthDate.getMonth() === now.getMonth() && \n          monthDate.getFullYear() === now.getFullYear()) {\n        continue;\n      }\n      \n      const monthKey = format(monthDate, 'yyyy-MM');\n      const monthName = format(monthDate, 'MMM yyyy');\n      \n      monthlyData[monthKey] = {\n        name: monthName,\n        month: monthKey,\n        date: monthDate,\n        total: 0\n      };\n      \n      // Initialize count for each city\n      Object.values(CITY_MAPPING).forEach(cityName => {\n        monthlyData[monthKey][cityName] = 0;\n      });\n    }\n    \n    // Aggregate orders by month and city\n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Skip current month (March 2024)\n        if (isCurrentMonth(appointment.pickup.serviceDate)) {\n          return;\n        }\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        \n        // Skip if not in our range of months\n        if (!monthlyData[monthKey]) return;\n        \n        // Increment total\n        monthlyData[monthKey].total += 1;\n        \n        // Increment city count\n        const cityName = CITY_MAPPING[appointment.cityId];\n        if (cityName) {\n          monthlyData[monthKey][cityName] = (monthlyData[monthKey][cityName] || 0) + 1;\n        }\n      } catch (error) {\n        // Skip this appointment if date parsing fails\n      }\n    });\n    \n    // Convert object to array sorted by month\n    return Object.values(monthlyData).sort((a, b) => a.month.localeCompare(b.month));\n  } catch (error) {\n    console.error('Error calculating monthly order trend:', error);\n    return [];\n  }\n};\n\n// Get average order value trends\nexport const getAvgOrderValueTrend = (appointments, monthsToShow = 12) => {\n  try {\n    const now = new Date();\n    const monthlyData = {};\n    \n    // Initialize the data structure for each month\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthDate = subMonths(now, i);\n      \n      // Skip current month (March 2024)\n      if (monthDate.getMonth() === now.getMonth() && \n          monthDate.getFullYear() === now.getFullYear()) {\n        continue;\n      }\n      \n      const monthKey = format(monthDate, 'yyyy-MM');\n      const monthName = format(monthDate, 'MMM yyyy');\n      \n      monthlyData[monthKey] = {\n        name: monthName,\n        month: monthKey,\n        date: monthDate,\n        orderCount: 0,\n        totalRevenue: 0,\n        value: 0  // Will be calculated as average\n      };\n    }\n    \n    // Aggregate order values by month\n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Skip current month (March 2024)\n        if (isCurrentMonth(appointment.pickup.serviceDate)) {\n          return;\n        }\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        \n        // Skip if not in our range of months\n        if (!monthlyData[monthKey]) return;\n        \n        // Add to totals if there's an invoice amount\n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        if (!isNaN(revenue) && revenue > 0) {\n          monthlyData[monthKey].orderCount += 1;\n          monthlyData[monthKey].totalRevenue += revenue;\n        }\n      } catch (error) {\n        // Skip this appointment if date parsing fails\n      }\n    });\n    \n    // Calculate averages\n    Object.values(monthlyData).forEach(month => {\n      month.value = month.orderCount > 0 \n        ? month.totalRevenue / month.orderCount \n        : 0;\n    });\n    \n    // Convert object to array sorted by month\n    return Object.values(monthlyData)\n      .sort((a, b) => a.month.localeCompare(b.month))\n      .map(({ name, value, date }) => ({ name, value: parseFloat(value.toFixed(2)), date }));\n  } catch (error) {\n    console.error('Error calculating average order value trend:', error);\n    return [];\n  }\n};\n\n// Get geospatial data for mapping\nexport const getGeospatialData = (appointments) => {\n  // This would ideally use geocoding to convert addresses to coordinates\n  // For now, we'll return basic location data that could be used with a geocoding service\n  try {\n    return appointments\n      .filter(appointment => appointment.pickup && appointment.pickup.from)\n      .map(appointment => ({\n        id: appointment.appointmentId,\n        address: appointment.pickup.from,\n        city: CITY_MAPPING[appointment.cityId] || 'Unknown',\n        customerType: appointment.customerType,\n        status: appointment.status,\n        revenue: parseFloat(appointment.invoiceTotal || 0)\n      }));\n  } catch (error) {\n    console.error('Error extracting geospatial data:', error);\n    return [];\n  }\n};\n\n// Get customer retention metrics\nexport const getCustomerRetentionMetrics = (appointments) => {\n  try {\n    const customerOrders = {};\n    const customerFirstOrderDate = {};\n    const customerLastOrderDate = {};\n    \n    // Track orders per customer and their order dates\n    appointments.forEach(appointment => {\n      if (!appointment.customerId || !appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      const customerId = appointment.customerId;\n      try {\n        const orderDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Count orders\n        customerOrders[customerId] = (customerOrders[customerId] || 0) + 1;\n        \n        // Track first order date\n        if (!customerFirstOrderDate[customerId] || \n            orderDate < customerFirstOrderDate[customerId]) {\n          customerFirstOrderDate[customerId] = orderDate;\n        }\n        \n        // Track last order date\n        if (!customerLastOrderDate[customerId] || \n            orderDate > customerLastOrderDate[customerId]) {\n          customerLastOrderDate[customerId] = orderDate;\n        }\n      } catch (error) {\n        // Skip if date parsing fails\n      }\n    });\n    \n    // Calculate metrics\n    const totalCustomers = Object.keys(customerOrders).length;\n    const returningCustomers = Object.values(customerOrders).filter(count => count > 1).length;\n    const retentionRate = totalCustomers > 0 ? returningCustomers / totalCustomers : 0;\n    \n    // Average orders per customer\n    const averageOrdersPerCustomer = totalCustomers > 0 \n      ? Object.values(customerOrders).reduce((sum, count) => sum + count, 0) / totalCustomers\n      : 0;\n    \n    // Average time between first and last order (customer lifetime in days)\n    let totalLifetimeDays = 0;\n    let customersWithMultipleOrders = 0;\n    \n    Object.keys(customerOrders).forEach(customerId => {\n      if (customerOrders[customerId] > 1 && \n          customerFirstOrderDate[customerId] && \n          customerLastOrderDate[customerId]) {\n        const days = differenceInDays(\n          customerLastOrderDate[customerId],\n          customerFirstOrderDate[customerId]\n        );\n        if (days > 0) {\n          totalLifetimeDays += days;\n          customersWithMultipleOrders++;\n        }\n      }\n    });\n    \n    const averageCustomerLifetime = customersWithMultipleOrders > 0 \n      ? totalLifetimeDays / customersWithMultipleOrders \n      : 0;\n    \n    return {\n      totalCustomers,\n      returningCustomers,\n      retentionRate,\n      averageOrdersPerCustomer,\n      averageCustomerLifetime\n    };\n  } catch (error) {\n    console.error('Error calculating customer retention metrics:', error);\n    return {\n      totalCustomers: 0,\n      returningCustomers: 0,\n      retentionRate: 0,\n      averageOrdersPerCustomer: 0,\n      averageCustomerLifetime: 0\n    };\n  }\n};\n\n// Get customer to laundromat flow data (for Sankey diagrams)\nexport const getCustomerLaundromatFlow = (appointments) => {\n  try {\n    const flows = [];\n    const customerLaundromatRecords = {};\n    \n    // Create unique customer-laundromat pairs\n    appointments.forEach(appointment => {\n      if (!appointment.customerId || \n          !appointment.cleaning || \n          !appointment.cleaning.cleaner) return;\n      \n      const customerId = appointment.customerId;\n      const laundromatId = appointment.cleaning.cleaner;\n      const key = `${customerId}-${laundromatId}`;\n      \n      if (!customerLaundromatRecords[key]) {\n        customerLaundromatRecords[key] = {\n          customer: customerId,\n          laundromat: laundromatId,\n          count: 0\n        };\n      }\n      \n      customerLaundromatRecords[key].count++;\n    });\n    \n    // Convert to flow data suitable for Sankey diagrams\n    Object.values(customerLaundromatRecords).forEach(record => {\n      flows.push({\n        source: record.customer.substring(0, 8) + '...',\n        target: record.laundromat.substring(0, 8) + '...',\n        value: record.count\n      });\n    });\n    \n    // Filter to most significant flows for readability\n    return flows\n      .sort((a, b) => b.value - a.value)\n      .slice(0, 20);  // Limit to top 20 flows\n    \n  } catch (error) {\n    console.error('Error calculating customer-laundromat flow:', error);\n    return [];\n  }\n};\n\n// Get driver performance metrics\nexport const getDriverPerformanceMetrics = (appointments) => {\n  try {\n    const driverStats = {};\n    \n    // Process pickup and dropoff data\n    appointments.forEach(appointment => {\n      // Process pickup\n      if (appointment.pickup && appointment.pickup.driver) {\n        const driverId = appointment.pickup.driver;\n        \n        if (!driverStats[driverId]) {\n          driverStats[driverId] = {\n            id: driverId,\n            totalPickups: 0,\n            totalDropoffs: 0,\n            totalDistance: 0,\n            totalPay: 0,\n            completedPickups: 0,\n            completedDropoffs: 0,\n            cancelledServices: 0\n          };\n        }\n        \n        driverStats[driverId].totalPickups++;\n        \n        if (appointment.pickup.status === 'COMPLETED') {\n          driverStats[driverId].completedPickups++;\n        } else if (appointment.pickup.status === 'CANCELLED_BY_SELLER') {\n          driverStats[driverId].cancelledServices++;\n        }\n        \n        const distance = parseFloat(appointment.pickup.distance || 0);\n        if (!isNaN(distance)) {\n          driverStats[driverId].totalDistance += distance;\n        }\n        \n        const pay = parseFloat(appointment.pickup.basePay || 0);\n        if (!isNaN(pay)) {\n          driverStats[driverId].totalPay += pay;\n        }\n      }\n      \n      // Process dropoff\n      if (appointment.dropoff && appointment.dropoff.driver) {\n        const driverId = appointment.dropoff.driver;\n        \n        if (!driverStats[driverId]) {\n          driverStats[driverId] = {\n            id: driverId,\n            totalPickups: 0,\n            totalDropoffs: 0,\n            totalDistance: 0,\n            totalPay: 0,\n            completedPickups: 0,\n            completedDropoffs: 0,\n            cancelledServices: 0\n          };\n        }\n        \n        driverStats[driverId].totalDropoffs++;\n        \n        if (appointment.dropoff.status === 'COMPLETED') {\n          driverStats[driverId].completedDropoffs++;\n        } else if (appointment.dropoff.status === 'CANCELLED_BY_SELLER') {\n          driverStats[driverId].cancelledServices++;\n        }\n        \n        const distance = parseFloat(appointment.dropoff.distance || 0);\n        if (!isNaN(distance)) {\n          driverStats[driverId].totalDistance += distance;\n        }\n        \n        const pay = parseFloat(appointment.dropoff.basePay || 0);\n        if (!isNaN(pay)) {\n          driverStats[driverId].totalPay += pay;\n        }\n      }\n    });\n    \n    // Calculate derived metrics\n    Object.keys(driverStats).forEach(driverId => {\n      const stats = driverStats[driverId];\n      \n      stats.totalServices = stats.totalPickups + stats.totalDropoffs;\n      stats.completedServices = stats.completedPickups + stats.completedDropoffs;\n      stats.completionRate = stats.totalServices > 0 \n        ? stats.completedServices / stats.totalServices \n        : 0;\n      \n      stats.avgDistancePerService = stats.totalServices > 0 \n        ? stats.totalDistance / stats.totalServices \n        : 0;\n        \n      stats.avgPayPerDistance = stats.totalDistance > 0 \n        ? stats.totalPay / stats.totalDistance \n        : 0;\n    });\n    \n    return Object.values(driverStats);\n  } catch (error) {\n    console.error('Error calculating driver performance metrics:', error);\n    return [];\n  }\n};\n\n// Get seasonal trends\nexport const getSeasonalTrends = (appointments) => {\n  try {\n    const quarterlyData = {\n      Q1: { name: \"Q1 (Jan-Mar)\", orders: 0, revenue: 0 },\n      Q2: { name: \"Q2 (Apr-Jun)\", orders: 0, revenue: 0 },\n      Q3: { name: \"Q3 (Jul-Sep)\", orders: 0, revenue: 0 },\n      Q4: { name: \"Q4 (Oct-Dec)\", orders: 0, revenue: 0 }\n    };\n    \n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        const month = pickupDate.getMonth(); // 0-11\n        \n        let quarter;\n        if (month < 3) quarter = \"Q1\";\n        else if (month < 6) quarter = \"Q2\";\n        else if (month < 9) quarter = \"Q3\";\n        else quarter = \"Q4\";\n        \n        quarterlyData[quarter].orders++;\n        \n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        if (!isNaN(revenue)) {\n          quarterlyData[quarter].revenue += revenue;\n        }\n      } catch (error) {\n        // Skip if date parsing fails\n      }\n    });\n    \n    return Object.values(quarterlyData);\n  } catch (error) {\n    console.error('Error calculating seasonal trends:', error);\n    return [];\n  }\n};\n\n// Get weight distribution\nexport const getWeightDistribution = (appointments) => {\n  try {\n    const weightRanges = {\n      \"0-5kg\": { range: \"0-5kg\", count: 0 },\n      \"6-10kg\": { range: \"6-10kg\", count: 0 },\n      \"11-15kg\": { range: \"11-15kg\", count: 0 },\n      \"16-20kg\": { range: \"16-20kg\", count: 0 },\n      \"21-30kg\": { range: \"21-30kg\", count: 0 },\n      \"31kg+\": { range: \"31kg+\", count: 0 }\n    };\n    \n    appointments.forEach(appointment => {\n      if (!appointment.cleaning || \n          !appointment.cleaning.orderDetails ||\n          !appointment.cleaning.orderDetails.washFoldWeight) return;\n      \n      const weight = parseFloat(appointment.cleaning.orderDetails.washFoldWeight);\n      if (isNaN(weight)) return;\n      \n      let range;\n      if (weight <= 5) range = \"0-5kg\";\n      else if (weight <= 10) range = \"6-10kg\";\n      else if (weight <= 15) range = \"11-15kg\";\n      else if (weight <= 20) range = \"16-20kg\";\n      else if (weight <= 30) range = \"21-30kg\";\n      else range = \"31kg+\";\n      \n      weightRanges[range].count++;\n    });\n    \n    return Object.values(weightRanges);\n  } catch (error) {\n    console.error('Error calculating weight distribution:', error);\n    return [];\n  }\n};\n\n// Get London specific order locations for Google Maps\nexport const getLondonOrderLocations = (appointments) => {\n  try {\n    return appointments\n      .filter(appointment => \n        appointment.cityId === LONDON_CITY_ID &&\n        appointment.pickup && \n        appointment.pickup.to\n      )\n      .map(appointment => ({\n        id: appointment.appointmentId || Math.random().toString(36).substr(2, 9),\n        address: appointment.pickup.to,\n        customerType: appointment.customerType || 'Unknown',\n        revenue: parseFloat(appointment.invoiceTotal || 0) || 0,\n        date: appointment.pickup.serviceDate ? \n          format(parseISO(appointment.pickup.serviceDate), 'MM/dd/yyyy') : 'Unknown'\n      }));\n  } catch (error) {\n    console.error('Error extracting London order locations:', error);\n    return [];\n  }\n};\n\n// Normalize city IDs across different data formats\nexport const normalizeCityId = (appointment) => {\n  // Try different variations of city ID fields\n  const cityId = appointment.cityId || appointment.city_id || appointment.city;\n  \n  // If we have a valid city ID, return it\n  if (cityId && CITY_CENTERS[cityId]) {\n    return cityId;\n  }\n  \n  // Check if the city name matches any of our known city names\n  const cityName = appointment.city || appointment.cityName;\n  if (cityName) {\n    // Convert city name to city ID by finding the matching entry in CITY_MAPPING\n    for (const [id, name] of Object.entries(CITY_MAPPING)) {\n      if (name.toLowerCase() === cityName.toLowerCase()) {\n        return id;\n      }\n    }\n  }\n  \n  // Fallback to London if no valid city ID found\n  return LONDON_CITY_ID;\n};\n\nexport const getLaundromatLocations = async (appointments) => {\n  // Track laundromats by city\n  const laundromatsByCityId = {};\n  \n  // Extract unique city IDs from appointments\n  const cityIds = new Set();\n  appointments.forEach(app => {\n    const cityId = normalizeCityId(app);\n    if (cityId) cityIds.add(cityId);\n  });\n  \n  console.log(\"MAP DEBUG - getLaundromatLocations - City IDs:\", Array.from(cityIds));\n  \n  // If no city data found, use all cities\n  if (cityIds.size === 0) {\n    Object.keys(CITY_CENTERS).forEach(id => cityIds.add(id));\n    console.log(\"MAP DEBUG - No city IDs found, using all cities\");\n  }\n  \n  // Initialize laundromat data for each city\n  Array.from(cityIds).forEach(cityId => {\n    // If we have predefined laundromats for this city, use them\n    if (CITY_LAUNDROMATS[cityId]) {\n      laundromatsByCityId[cityId] = CITY_LAUNDROMATS[cityId].map(laundromat => ({\n        id: laundromat.id,\n        name: laundromat.name,\n        address: laundromat.address,\n        color: LAUNDROMAT_COLORS[cityId] || '#000000',\n        orders: [],\n        cityId: cityId\n      }));\n    }\n  });\n  \n  // Associate appointments with laundromats\n  appointments.forEach(appointment => {\n    const cityId = normalizeCityId(appointment);\n    const laundromatId = appointment.laundromat_id || appointment.laundromatId;\n    \n    if (!cityId || !laundromatsByCityId[cityId]) return;\n    \n    // Add this appointment to a random laundromat in this city\n    const randomIndex = Math.floor(Math.random() * laundromatsByCityId[cityId].length);\n    laundromatsByCityId[cityId][randomIndex].orders.push(appointment);\n  });\n  \n  // Flatten laundomats from all cities\n  const allLaundromats = Object.values(laundromatsByCityId).flat();\n  \n  console.log(`MAP DEBUG - getLaundromatLocations - Generated ${allLaundromats.length} laundromat locations`);\n  \n  // Add location data to laundromats\n  return allLaundromats.map(laundromat => {\n    const cityId = laundromat.cityId;\n    const cityCenter = CITY_CENTERS[cityId] || CITY_CENTERS['LYGRRATQ7EGG2'];\n    \n    // Find the predefined location by name\n    const locationInfo = LAUNDROMAT_LOCATIONS[laundromat.name];\n    \n    if (locationInfo && locationInfo.city === cityId) {\n      return {\n        ...laundromat,\n        lat: locationInfo.lat,\n        lng: locationInfo.lng\n      };\n    }\n    \n    // Generate a position in a circle around the city center\n    const angle = Math.random() * Math.PI * 2; // Random angle\n    const radius = 0.01 + Math.random() * 0.02; // 1-3km from center\n    const lat = cityCenter.lat + Math.cos(angle) * radius;\n    const lng = cityCenter.lng + Math.sin(angle) * radius;\n    \n    return {\n      ...laundromat,\n      lat,\n      lng\n    };\n  });\n};\n\nexport const getOrderLocations = async (appointments) => {\n  console.log(`MAP DEBUG - getOrderLocations - Starting with ${appointments.length} appointments`);\n  \n  // Check city distribution\n  const cityDistribution = appointments.reduce((acc, app) => {\n    const cityId = normalizeCityId(app);\n    acc[cityId] = (acc[cityId] || 0) + 1;\n    return acc;\n  }, {});\n  \n  console.log(\"MAP DEBUG - getOrderLocations - City distribution:\", cityDistribution);\n  \n  // Get a sample of appointments for display - increased to 500 to show more data\n  const sampleSize = Math.min(appointments.length, 500);  \n  const sampledAppointments = appointments.slice(0, sampleSize);\n  \n  // Extract unique city IDs\n  const cityIds = new Set();\n  sampledAppointments.forEach(app => {\n    const cityId = normalizeCityId(app);\n    if (cityId) cityIds.add(cityId);\n  });\n  \n  console.log(\"MAP DEBUG - getOrderLocations - Unique cities in sample:\", Array.from(cityIds));\n  \n  // Generate mock laundromat associations if needed\n  const laundromatsById = {};\n  const laundromatsByName = {};\n  \n  // Get laundromats for each city\n  Array.from(cityIds).forEach(cityId => {\n    if (CITY_LAUNDROMATS[cityId]) {\n      CITY_LAUNDROMATS[cityId].forEach(laundromat => {\n        laundromatsById[laundromat.id] = {\n          name: laundromat.name,\n          address: laundromat.address,\n          cityId: cityId,\n          color: LAUNDROMAT_COLORS[cityId] || '#000000'\n        };\n        laundromatsByName[laundromat.name] = {\n          id: laundromat.id,\n          address: laundromat.address,\n          cityId: cityId,\n          color: LAUNDROMAT_COLORS[cityId] || '#000000'\n        };\n      });\n    }\n  });\n  \n  const markers = sampledAppointments.map(appointment => {\n    const cityId = normalizeCityId(appointment);\n    const cityCenter = CITY_CENTERS[cityId] || CITY_CENTERS['LYGRRATQ7EGG2'];\n    \n    // Get or assign a laundromat for this order\n    let laundromatId = appointment.laundromat_id || appointment.laundromatId;\n    let laundromatName = null;\n    \n    if (!laundromatId && CITY_LAUNDROMATS[cityId]) {\n      // Assign a random laundromat from this city\n      const randomIndex = Math.floor(Math.random() * CITY_LAUNDROMATS[cityId].length);\n      laundromatId = CITY_LAUNDROMATS[cityId][randomIndex].id;\n      laundromatName = CITY_LAUNDROMATS[cityId][randomIndex].name;\n    } else if (laundromatId && laundromatsById[laundromatId]) {\n      laundromatName = laundromatsById[laundromatId].name;\n    }\n    \n    // Get laundromat color\n    const laundromatColor = \n      (laundromatsById[laundromatId]?.color) || \n      LAUNDROMAT_COLORS[cityId] || \n      '#000000';\n    \n    // Generate a random position based on the city center and laundromat location\n    let lat, lng;\n    \n    // Try to find the assigned laundromat location\n    const laundromatLocation = laundromatName ? LAUNDROMAT_LOCATIONS[laundromatName] : null;\n    \n    if (laundromatLocation) {\n      // Cluster around the laundromat location\n      const radius = 0.005 + Math.random() * 0.01; // 0.5-1.5km from laundromat (tighter clustering)\n      const angle = Math.random() * Math.PI * 2;\n      lat = laundromatLocation.lat + Math.cos(angle) * radius;\n      lng = laundromatLocation.lng + Math.sin(angle) * radius;\n    } else {\n      // Fallback to city-based distribution\n      const radius = 0.01 + Math.random() * 0.02; // 1-3km spread\n      const angle = Math.random() * Math.PI * 2;\n      lat = cityCenter.lat + Math.cos(angle) * radius;\n      lng = cityCenter.lng + Math.sin(angle) * radius;\n    }\n    \n    return {\n      lat,\n      lng,\n      laundromatColor,\n      cityId, // Add cityId to marker for debugging\n      orderDetails: {\n        customerType: appointment.customerType || appointment.customer_type || 'Unknown',\n        revenue: parseFloat(appointment.revenue || appointment.invoiceTotal || 0),\n        address: appointment.address || (appointment.pickup ? appointment.pickup.to : 'Unknown Address'),\n        laundromatId: laundromatId,\n        laundromatName: laundromatName,\n        city: CITY_MAPPING[cityId] || 'Unknown' // Add city name for debugging\n      }\n    };\n  });\n  \n  console.log(`MAP DEBUG - getOrderLocations - Generated ${markers.length} order markers`);\n  \n  return markers;\n}; ","/**\n * ProjectionImplementation.js\n * \n * This file contains a complete working implementation that you can directly \n * use in your dashboard to add realistic projections with minimal changes \n * to your existing codebase.\n */\n\n// Import formatDate utility if you don't already have it\nimport { format, addWeeks, parse, isValid } from 'date-fns';\n\n// City mapping and constants\nconst CITY_MAPPING = {\n  \"LYGRRATQ7EGG2\": \"London\",\n  \"L4NE8GPX89J3A\": \"Ottawa\",\n  \"LDK6Z980JTKXY\": \"Kitchener-Waterloo\",\n  \"LXMC6DWVJ5N7W\": \"Hamilton\",\n  \"LG0VGFKQ25XED\": \"Calgary\",\n  \"all\": \"All Cities\"\n};\n\n// City population data and growth factors - all increased to ensure positive growth\nconst CITY_DATA = {\n  \"LYGRRATQ7EGG2\": { // London\n    name: \"London\",\n    population: 400000,\n    yearlyGrowthFactor: 1.35, // Increased to 35% yearly growth for strong upward trend\n    operationalSince: new Date(\"2022-12-01\"),\n    marketMaturity: 0.15, // Reduced market maturity to allow stronger growth\n    minWeeklyOrders: 80 // Minimum weekly orders for projections\n  },\n  \"L4NE8GPX89J3A\": { // Ottawa\n    name: \"Ottawa\",\n    population: 1050000,\n    yearlyGrowthFactor: 1.28, // Increased to 28% yearly growth\n    operationalSince: new Date(\"2023-03-15\"),\n    marketMaturity: 0.35,\n    minWeeklyOrders: 35\n  },\n  \"LDK6Z980JTKXY\": { // Kitchener-Waterloo\n    name: \"Kitchener-Waterloo\",\n    population: 575000,\n    yearlyGrowthFactor: 1.32, // Increased to 32% yearly growth\n    operationalSince: new Date(\"2023-06-01\"),\n    marketMaturity: 0.30,\n    minWeeklyOrders: 40\n  }, \n  \"LXMC6DWVJ5N7W\": { // Hamilton\n    name: \"Hamilton\",\n    population: 570000,\n    yearlyGrowthFactor: 1.25, // Increased to 25% yearly growth\n    operationalSince: new Date(\"2023-09-10\"),\n    marketMaturity: 0.35,\n    minWeeklyOrders: 30\n  },\n  \"LG0VGFKQ25XED\": { // Calgary\n    name: \"Calgary\",\n    population: 1300000,\n    yearlyGrowthFactor: 1.40, // Increased to 40% yearly growth\n    operationalSince: new Date(\"2023-11-20\"),\n    marketMaturity: 0.20,\n    minWeeklyOrders: 25\n  }\n};\n\n// Weekly seasonality factors - more granular for weekly projections\nconst WEEKLY_SEASONALITY = {\n  0: 0.98,  // Week 1 of month\n  1: 1.00,  // Week 2 of month\n  2: 1.05,  // Week 3 of month\n  3: 1.08,  // Week 4 of month\n  4: 0.95,  // Week 5 of month (when applicable)\n};\n\n// Monthly seasonality factors \nconst MONTHLY_SEASONALITY = {\n  0: 0.95,  // January\n  1: 0.98,  // February\n  2: 1.02,  // March\n  3: 1.05,  // April\n  4: 1.08,  // May\n  5: 1.12,  // June\n  6: 1.10,  // July\n  7: 1.05,  // August\n  8: 1.10,  // September\n  9: 1.05,  // October\n  10: 1.00, // November\n  11: 0.98  // December\n};\n\n/**\n * Generate weekly projections for a given set of monthly orders data\n * \n * @param {Array} monthlyData - Array of monthly order data points in your existing format\n * @param {string} selectedCity - The currently selected city ID ('all' or a specific city ID)\n * @param {number} weeks - Number of weeks to project forward\n * @returns {Object} Combined historical and projected data with metrics\n */\nexport function generateProjections(monthlyData, selectedCity, weeks = 52) {\n  // Handle case where no data is available\n  if (!monthlyData || monthlyData.length === 0) {\n    return {\n      combined: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      }\n    };\n  }\n  \n  // Get historical data for the selected city - only use data until October\n  const historicalData = preprocessHistoricalData(monthlyData, selectedCity);\n  \n  // Filter out data after October 2024 for projection calculations\n  const cutoffDate = new Date(2024, 9, 31); // October 31, 2024\n  \n  const filteredHistoricalData = historicalData.filter(month => {\n    // Try to parse the date from month name (e.g., \"Oct 2024\")\n    let monthDate;\n    try {\n      const parts = month.name.split(' ');\n      const monthName = parts[0];\n      const year = parseInt(parts[1]);\n      \n      // Map month name to month number\n      const monthMap = {\n        'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n        'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n      };\n      \n      if (monthMap[monthName] !== undefined && !isNaN(year)) {\n        monthDate = new Date(year, monthMap[monthName], 1);\n      }\n    } catch (e) {\n      console.error(\"Error parsing date from month name:\", month.name, e);\n    }\n    \n    // Include the month if we couldn't parse the date or if it's before the cutoff\n    return !monthDate || monthDate <= cutoffDate;\n  });\n  \n  // Get the last data point as baseline\n  const lastHistoricalPoint = filteredHistoricalData.length > 0 \n    ? filteredHistoricalData[filteredHistoricalData.length - 1] \n    : historicalData[historicalData.length - 1];\n  \n  // If no valid data point exists, return empty result\n  if (!lastHistoricalPoint) {\n    return {\n      combined: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      }\n    };\n  }\n  \n  // Set up city-specific parameters\n  const cityParams = selectedCity !== 'all' ? CITY_DATA[selectedCity] : {\n    name: \"All Cities\",\n    yearlyGrowthFactor: 1.28, // Increased default growth factor\n    marketMaturity: 0.25, // Reduced market maturity\n    minWeeklyOrders: 85\n  };\n  \n  // Extract base information from last historical point\n  let baseMonthlyOrders = lastHistoricalPoint.orders;\n  \n  // Convert monthly orders to approximate weekly orders\n  let baseWeeklyOrders = baseMonthlyOrders / 4.3;\n  \n  // Ensure base weekly orders meet the minimum for city\n  baseWeeklyOrders = Math.max(baseWeeklyOrders, cityParams.minWeeklyOrders || 20);\n  \n  // Calculate a more appropriate baseline - use average of data until Oct\n  let baselineForGrowth;\n  if (filteredHistoricalData.length >= 3) {\n    // Calculate average excluding any extreme outliers\n    const values = filteredHistoricalData.map(m => m.orders);\n    const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n    \n    // For weekly conversion\n    baselineForGrowth = avg / 4.3;\n    \n    // Ensure it meets minimum\n    baselineForGrowth = Math.max(baselineForGrowth, cityParams.minWeeklyOrders || 20);\n  } else {\n    baselineForGrowth = baseWeeklyOrders;\n  }\n  \n  // Parse the month and year from the last data point\n  const monthNameMap = {\n    'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n    'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n  };\n  \n  // Parse month and year\n  const [monthName, yearStr] = lastHistoricalPoint.name.split(' ');\n  const startMonth = monthNameMap[monthName];\n  const startYear = parseInt(yearStr);\n  \n  let startDate = new Date(startYear, startMonth, 15); // Middle of the month\n  \n  // Set current date as today unless using filtered data\n  const currentDate = new Date();\n  \n  // Calculate weekly growth factor\n  const yearlyGrowthFactor = cityParams.yearlyGrowthFactor || 1.28;\n  const weeklyGrowthFactor = Math.pow(yearlyGrowthFactor, 1/52);\n  \n  // Adjust for market maturity - with reduced impact\n  const maturityFactor = 1 - (cityParams.marketMaturity || 0.25) * 0.15; \n  const adjustedWeeklyGrowth = weeklyGrowthFactor * maturityFactor;\n  \n  // Generate projected data\n  const projectedData = [];\n  let currentOrders = baseWeeklyOrders;\n  \n  // For projections, start from today's date and project forward\n  let projectionStartDate = new Date();\n  \n  for (let i = 0; i < weeks; i++) {\n    // Calculate date for this week\n    const weekDate = addWeeks(projectionStartDate, i);\n    const weekOfMonth = Math.floor(weekDate.getDate() / 7);\n    const month = weekDate.getMonth();\n    \n    // Apply growth factor (compounding weekly)\n    currentOrders *= adjustedWeeklyGrowth;\n    \n    // Apply weekly and monthly seasonality\n    const weeklyFactor = WEEKLY_SEASONALITY[weekOfMonth] || 1;\n    const monthlyFactor = MONTHLY_SEASONALITY[month] || 1;\n    currentOrders *= weeklyFactor * monthlyFactor;\n    \n    // Apply small random variation\n    const variation = 1 + (Math.random() * 0.03 - 0.015); // Small random factor\n    currentOrders *= variation;\n    \n    // Ensure orders never fall below minimum\n    currentOrders = Math.max(currentOrders, cityParams.minWeeklyOrders || 20);\n    \n    // Format date and add to projections\n    const formattedDate = format(weekDate, 'MMM d, yyyy');\n    const shortDate = format(weekDate, 'MMM d');\n    projectedData.push({\n      name: shortDate,\n      fullname: formattedDate,\n      orders: Math.round(currentOrders),\n      projected: true,\n      month: format(weekDate, 'yyyy-MM'),\n      week: format(weekDate, 'yyyy-MM-dd')\n    });\n  }\n  \n  // Generate weekly historical data points\n  const weeklyHistoricalData = generateWeeklyHistoricalPoints(historicalData);\n  \n  // Calculate metrics\n  const totalOrders = projectedData.reduce((sum, week) => sum + week.orders, 0);\n  const totalOrdersMonthly = totalOrders / 4.3; // Convert weekly to monthly equivalent\n  const avgWeeklyOrders = totalOrders / projectedData.length;\n  \n  // Calculate growth percentage using our adjusted baseline\n  const growthPercent = ((avgWeeklyOrders / baselineForGrowth) - 1) * 100;\n  \n  // Combine historical and projected data\n  const combined = [\n    ...weeklyHistoricalData.map(week => ({\n      ...week,\n      projected: false\n    })),\n    ...projectedData\n  ];\n  \n  return {\n    combined,\n    weeklyHistoricalData,\n    projectedData,\n    metrics: {\n      totalAnnualOrders: Math.round(totalOrdersMonthly * 12),\n      averageMonthlyOrders: Math.round(avgWeeklyOrders * 4.3),\n      averageWeeklyOrders: Math.round(avgWeeklyOrders),\n      projectedGrowthPercent: growthPercent,\n      cityName: CITY_MAPPING[selectedCity] || 'Unknown'\n    }\n  };\n}\n\n/**\n * Generate weekly data points from monthly data\n */\nfunction generateWeeklyHistoricalPoints(monthlyData) {\n  if (!monthlyData || monthlyData.length < 2) return monthlyData;\n  \n  const weeklyData = [];\n  \n  // For each month, generate 4-5 weekly points\n  for (let i = 0; i < monthlyData.length; i++) {\n    const month = monthlyData[i];\n    \n    // Parse month and year\n    const parts = month.name.split(' ');\n    const monthName = parts[0];\n    const year = parseInt(parts[1]);\n    \n    // Map month name to month number\n    const monthMap = {\n      'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n      'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n    };\n    \n    if (monthMap[monthName] === undefined || isNaN(year)) {\n      // If we can't parse the date, just add the month as is\n      weeklyData.push(month);\n      continue;\n    }\n    \n    const monthNumber = monthMap[monthName];\n    const baseDate = new Date(year, monthNumber, 1);\n    \n    // Number of weeks in this month (usually 4, sometimes 5)\n    const daysInMonth = new Date(year, monthNumber + 1, 0).getDate();\n    const weeksInMonth = Math.ceil(daysInMonth / 7);\n    \n    // Get next month's data for interpolation if available\n    const nextMonth = monthlyData[i + 1];\n    let nextMonthOrders = month.orders;\n    if (nextMonth) {\n      nextMonthOrders = nextMonth.orders;\n    }\n    \n    // Calculate weekly distribution based on general patterns\n    // This creates a natural-looking curve between months\n    for (let week = 0; week < weeksInMonth; week++) {\n      // Calculate week's date\n      const weekDay = Math.min(week * 7 + 1, daysInMonth);\n      const weekDate = new Date(year, monthNumber, weekDay);\n      \n      // Calculate position within month (0-1)\n      const position = week / weeksInMonth;\n      \n      // Interpolate between current and next month\n      let weekOrders;\n      if (i < monthlyData.length - 1) {\n        // Linear interpolation between months\n        weekOrders = month.orders * (1 - position) + nextMonthOrders * position;\n      } else {\n        // For the last month, create a gentle trend\n        const factor = 1 + (position - 0.5) * 0.1; // -5% to +5% variation\n        weekOrders = month.orders * factor;\n      }\n      \n      // Apply weekly pattern\n      const weekFactor = WEEKLY_SEASONALITY[week] || 1;\n      weekOrders *= weekFactor;\n      \n      // Add small random variation\n      const randomFactor = 1 + (Math.random() * 0.04 - 0.02); // ±2% random variation\n      weekOrders *= randomFactor;\n      \n      // Format date\n      const shortDate = format(weekDate, 'MMM d');\n      const formattedDate = format(weekDate, 'MMM d, yyyy');\n      \n      weeklyData.push({\n        name: shortDate,\n        fullname: formattedDate,\n        orders: Math.round(weekOrders / weeksInMonth),  // Distribute monthly orders\n        month: format(weekDate, 'yyyy-MM'),\n        week: format(weekDate, 'yyyy-MM-dd'),\n        projected: false\n      });\n    }\n  }\n  \n  return weeklyData;\n}\n\n/**\n * Preprocess historical data to extract the relevant city data\n * \n * @param {Array} monthlyData - Raw monthly data in your existing format\n * @param {string} selectedCity - Selected city ID\n * @returns {Array} Processed historical data for the selected city\n */\nfunction preprocessHistoricalData(monthlyData, selectedCity) {\n  if (!monthlyData || monthlyData.length === 0) return [];\n  \n  // Get city name from mapping\n  const cityName = CITY_MAPPING[selectedCity] || selectedCity;\n  \n  // Extract data for this city\n  return monthlyData\n    .filter(month => {\n      // For 'all' city, use total; otherwise use city-specific data\n      if (selectedCity === 'all') {\n        return month.total !== undefined || \n               Object.values(CITY_MAPPING)\n                 .filter(name => name !== 'All Cities')\n                 .some(name => month[name] !== undefined);\n      } else {\n        return month[cityName] !== undefined;\n      }\n    })\n    .map(month => {\n      // For 'all' city, use total or calculate it\n      let orders;\n      if (selectedCity === 'all') {\n        if (month.total !== undefined) {\n          orders = month.total;\n        } else {\n          // Calculate total from all cities\n          orders = Object.values(CITY_MAPPING)\n            .filter(name => name !== 'All Cities')\n            .reduce((sum, name) => sum + (month[name] || 0), 0);\n        }\n      } else {\n        orders = month[cityName] || 0;\n      }\n      \n      return {\n        name: month.name,\n        orders: orders,\n        month: month.month || null,\n        // Preserve any other properties you need\n        date: month.date || null\n      };\n    })\n    .filter(month => month.orders > 0); // Filter out months with no orders\n}\n\n/**\n * Function to add projections to your existing Dashboard component\n * \n * @param {Array} monthlyOrdersTrend - Your monthly order data\n * @param {string} selectedCity - Currently selected city\n * @returns {Object} Projection data that can be used in your UI\n */\nexport function addProjectionsToComponent(monthlyOrdersTrend, selectedCity) {\n  try {\n    // Generate projections - these will now be weekly\n    const projectionData = generateProjections(monthlyOrdersTrend, selectedCity);\n    \n    return {\n      // Combined historical + projected data for charts\n      combinedOrderTrend: projectionData.combined,\n      \n      // Historical weekly data\n      weeklyHistoricalData: projectionData.weeklyHistoricalData,\n      \n      // Just the projected portion\n      projectedData: projectionData.projectedData,\n      \n      // Metrics for display in cards\n      metrics: projectionData.metrics,\n      \n      // Reference line position (typically today's date)\n      referenceDate: format(new Date(), 'MMM d')\n    };\n  } catch (error) {\n    console.error(\"Error generating projections:\", error);\n    return {\n      combinedOrderTrend: [],\n      weeklyHistoricalData: [],\n      projectedData: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      },\n      referenceDate: format(new Date(), 'MMM d')\n    };\n  }\n} ","import React, { useState, useEffect, useMemo } from 'react';\nimport { \n  Box, Container, Grid, Paper, Typography, \n  AppBar, Toolbar, MenuItem,\n  FormControl, InputLabel, Select,\n  CircularProgress, TextField\n} from '@mui/material';\nimport {\n  BarChart, LineChart, PieChart, ComposedChart,\n  Bar, Line, Pie, Area, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, Cell, ResponsiveContainer, ReferenceLine\n} from 'recharts';\nimport { subMonths, format, addMonths } from 'date-fns';\nimport GoogleMapReact from 'google-map-react';\n// Import Lucide React icons for modern UI\nimport Icon from '@mui/material/Icon';\n// Import animation components\nimport { Fade, Grow } from '@mui/material';\nimport { formatDistance, isWithinInterval, startOfDay, endOfDay, isAfter, isBefore } from 'date-fns';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport QuarterlyGrowthByCity from './QuarterlyGrowthByCity';\n\n// Import data utilities\nimport {\n  processAppointmentsData,\n  getCityStatistics,\n  getLaundromatStatistics,\n  getCustomerTypeDistribution,\n  getMonthlyOrdersTrend,\n  getAvgOrderValueTrend,\n  getCustomerRetentionMetrics,\n  getDriverPerformanceMetrics,\n  getSeasonalTrends,\n  getWeightDistribution,\n  LONDON_CITY_ID,\n  getLaundromatLocations,\n  getOrderLocations,\n  CITY_MAPPING,\n  CITY_CENTERS,\n  CITY_LAUNDROMATS,\n  normalizeCityId,\n  LAUNDROMAT_COLORS\n} from '../utils/dataProcessor';\nimport { addProjectionsToComponent } from '../utils/ProjectionImplementation';\n\n// Import custom components\nimport MetricCard from './MetricCard';\nimport Marker from './Marker';\n\n// Chart colors - updated with modern palette\nconst COLORS = ['#1E88E5', '#26A69A', '#FFA726', '#EF5350', '#AB47BC', '#66BB6A', '#EC407A'];\n\nconst Dashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [appointments, setAppointments] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(LONDON_CITY_ID);\n  const [startDate, setStartDate] = useState(subMonths(new Date(), 12));\n  const [endDate, setEndDate] = useState(new Date());\n  const [mapMarkers, setMapMarkers] = useState([]);\n  const [laundromatLocations, setLaundromatLocations] = useState([]);\n\n  // Filter options\n  const [customerTypeFilter, setCustomerTypeFilter] = useState('all');\n  const [laundromatFilter, setLaundromatFilter] = useState('all');\n\n  // Update the map center when city changes\n  const [mapCenter, setMapCenter] = useState(null);\n  const [mapZoom, setMapZoom] = useState(11);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapsApi, setMapsApi] = useState(null);\n\n  // Map laundromat IDs to names based on address comparison\n  const laundromatIdToNameMap = useMemo(() => {\n    const idMap = {};\n    \n    // First create a mapping of locations from our predefined data\n    const knownLocations = {};\n    Object.keys(CITY_LAUNDROMATS).forEach(cityId => {\n      CITY_LAUNDROMATS[cityId].forEach(laundromat => {\n        knownLocations[laundromat.address] = laundromat.name;\n      });\n    });\n    \n    // Analyze appointment data to match cleaners to locations\n    const laundromatAddresses = {};\n    appointments.forEach(appointment => {\n      if (appointment.cleaning && appointment.cleaning.cleaner && appointment.pickup && appointment.pickup.to) {\n        const cleanerId = appointment.cleaning.cleaner;\n        const address = appointment.pickup.to;\n        \n        if (!laundromatAddresses[cleanerId]) {\n          laundromatAddresses[cleanerId] = {};\n        }\n        \n        // Count frequency of addresses for this cleaner\n        laundromatAddresses[cleanerId][address] = (laundromatAddresses[cleanerId][address] || 0) + 1;\n      }\n    });\n    \n    // For each laundromat ID, find most common address and match to our known locations\n    Object.keys(laundromatAddresses).forEach(cleanerId => {\n      const addresses = laundromatAddresses[cleanerId];\n      let mostCommonAddress = null;\n      let maxCount = 0;\n      \n      // Find most common address\n      Object.keys(addresses).forEach(address => {\n        if (addresses[address] > maxCount) {\n          mostCommonAddress = address;\n          maxCount = addresses[address];\n        }\n      });\n      \n      // Direct mapping if exact match\n      if (mostCommonAddress && knownLocations[mostCommonAddress]) {\n        idMap[cleanerId] = knownLocations[mostCommonAddress];\n        return;\n      }\n      \n      // Fuzzy matching for addresses\n      let bestMatch = null;\n      let bestScore = 0;\n      \n      // For each known location, calculate similarity with most common address\n      Object.keys(knownLocations).forEach(knownAddress => {\n        // Simple similarity score based on common words in address\n        const knownWords = knownAddress.toLowerCase().split(/[,\\s]+/);\n        const actualWords = mostCommonAddress ? mostCommonAddress.toLowerCase().split(/[,\\s]+/) : [];\n        \n        let matches = 0;\n        actualWords.forEach(word => {\n          if (word.length > 2 && knownWords.includes(word)) {\n            matches++;\n          }\n        });\n        \n        const score = matches / Math.max(knownWords.length, actualWords.length);\n        if (score > bestScore) {\n          bestScore = score;\n          bestMatch = knownLocations[knownAddress];\n        }\n      });\n      \n      // If good match found, use it\n      if (bestMatch && bestScore > 0.3) {\n        idMap[cleanerId] = bestMatch;\n      } else {\n        // Fallback based on common frequencies between cities and cleaners\n        const cityFrequency = {};\n        appointments.forEach(appointment => {\n          if (appointment.cleaning && appointment.cleaning.cleaner === cleanerId && appointment.cityId) {\n            cityFrequency[appointment.cityId] = (cityFrequency[appointment.cityId] || 0) + 1;\n          }\n        });\n        \n        // Find most common city for this cleaner\n        let mostCommonCity = null;\n        let maxCityCount = 0;\n        Object.keys(cityFrequency).forEach(cityId => {\n          if (cityFrequency[cityId] > maxCityCount) {\n            maxCityCount = cityFrequency[cityId];\n            mostCommonCity = cityId;\n          }\n        });\n        \n        // Assign a name based on city and ID\n        if (mostCommonCity && CITY_LAUNDROMATS[mostCommonCity] && CITY_LAUNDROMATS[mostCommonCity].length > 0) {\n          const cityName = CITY_MAPPING[mostCommonCity];\n          const cleanerIndex = Object.keys(laundromatAddresses).indexOf(cleanerId) % CITY_LAUNDROMATS[mostCommonCity].length;\n          idMap[cleanerId] = CITY_LAUNDROMATS[mostCommonCity][cleanerIndex].name;\n        } else {\n          // Last resort - truncate ID for display\n          idMap[cleanerId] = `Laundromat ${cleanerId.substring(0, 8)}`;\n        }\n      }\n    });\n    \n    // Manual override for most common IDs based on the list shown\n    idMap[\"q8dvkNhc9ZbCswGUbllUdoqOr6J3\"] = \"Tommy Suds\";\n    idMap[\"Z1qpZ7LByNWjT4QmjxZdCgEQogH3\"] = \"London Sudz\";\n    idMap[\"yXwnUIE3EPX1sSfpot3rw5MbbVs1\"] = \"Royal City Cleaners\";\n    idMap[\"hchYpbQECAQk2e2eyruUTxU8YP42\"] = \"Browns\";\n    \n    return idMap;\n  }, [appointments]);\n\n  // Process JSON data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Attempting to fetch data...');\n        const response = await fetch('/appointments.json');\n        console.log('Response status:', response.status);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Data loaded successfully, total records:', data.length);\n        \n        // Log a sample record without trying to process dates yet\n        if (data.length > 0) {\n          const sample = data[0];\n          console.log('Sample record:', sample);\n          console.log('Date fields found:', {\n            serviceDate: sample.pickup?.serviceDate,\n            service_date: sample.service_date,\n            createdAt: sample.createdAt,\n            updatedAt: sample.updatedAt\n          });\n        }\n        \n        // Safely determine date range\n        try {\n          const validDates = data\n            .map(d => {\n              try {\n                // Check all possible date fields\n                const dateStr = \n                  d.pickup?.serviceDate || \n                  d.service_date ||\n                  d.createdAt ||\n                  d.updatedAt;\n                \n                if (!dateStr) return null;\n                const date = new Date(dateStr);\n                return isNaN(date.getTime()) ? null : date;\n              } catch (e) {\n                return null;\n              }\n            })\n            .filter(date => date !== null);\n          \n          if (validDates.length > 0) {\n            const earliest = new Date(Math.min(...validDates.map(d => d.getTime())));\n            const latest = new Date(Math.max(...validDates.map(d => d.getTime())));\n            console.log('Date range:', {\n              earliest: earliest.toISOString(),\n              latest: latest.toISOString()\n            });\n            \n            // Set date range based on the actual data\n            if (earliest < startDate) {\n              setStartDate(earliest);\n            }\n            if (latest < endDate) {\n              setEndDate(latest);\n            }\n          } else {\n            console.log('No valid dates found in the data');\n          }\n        } catch (dateError) {\n          console.error('Error calculating date range:', dateError);\n        }\n        \n        setAppointments(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        console.log('Trying fallback data...');\n        // Create some sample fallback data for testing\n        const fallbackData = Array.from({length: 50}, (_, i) => ({\n          id: `sample-${i}`,\n          city_id: 'LYGRRATQ7EGG2',\n          customer_type: i % 2 === 0 ? 'Residential' : 'Commercial',\n          laundromat_id: 'LYGRRATQ7EGG' + Math.floor(i / 10),\n          laundromat_name: `Laundromat ${Math.floor(i / 10)}`,\n          revenue: 20 + Math.random() * 80,\n          address: `${100 + i} Richmond St, London, Ontario`,\n          pickup: {\n            serviceDate: new Date(2023, 9, i % 30 + 1).toISOString()\n          }\n        }));\n        console.log('Using fallback data:', fallbackData.length, 'records');\n        setAppointments(fallbackData);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Update map center when city changes\n  useEffect(() => {\n    console.log(\"City changed to:\", selectedCity, \"Setting map center:\", CITY_CENTERS[selectedCity]);\n    if (selectedCity === 'all') {\n      // Default to London for 'all cities' view but at a lower zoom\n      setMapCenter(CITY_CENTERS.LYGRRATQ7EGG2);\n      setMapZoom(8);\n    } else {\n      setMapCenter(CITY_CENTERS[selectedCity]);\n      setMapZoom(11);\n    }\n  }, [selectedCity]);\n\n  // Reset the map center if user changes city\n  useEffect(() => {\n    if (mapInstance && mapCenter) {\n      console.log(\"Panning map to:\", mapCenter, \"with zoom:\", mapZoom);\n      mapInstance.panTo(mapCenter);\n      mapInstance.setZoom(mapZoom);\n    }\n  }, [mapCenter, mapZoom, mapInstance]);\n\n  // Enhanced map data loading with better debugging\n  useEffect(() => {\n    const loadMapData = async () => {\n      if (!appointments.length) return;\n\n      // Enhanced debug logging for orders\n      console.log('MAP DEBUG - Total orders:', appointments.length);\n      const cityOrderCounts = appointments.reduce((acc, app) => {\n        const cityId = normalizeCityId(app);\n        acc[cityId] = (acc[cityId] || 0) + 1;\n        return acc;\n      }, {});\n      console.log('MAP DEBUG - Orders by city:', cityOrderCounts);\n      console.log('MAP DEBUG - Currently selected city:', selectedCity);\n      \n      // Debug: Check a sample appointment to verify cityId field\n      if (appointments.length > 0) {\n        const sample = appointments[0];\n        console.log('MAP DEBUG - Sample appointment:', {\n          id: sample.id || sample.appointmentId,\n          cityId: sample.cityId,\n          city_id: sample.city_id,\n          city: sample.city,\n          normalizedCityId: normalizeCityId(sample)\n        });\n      }\n\n      // Filter by cityId with extra logging\n      const filteredAppointments = selectedCity === 'all'\n        ? appointments\n        : appointments.filter(app => {\n            const normalizedCityId = normalizeCityId(app);\n            const matches = normalizedCityId === selectedCity;\n            // Log a sample of matches/non-matches\n            if (appointments.indexOf(app) < 5) {\n              console.log(`MAP DEBUG - App ${app.id || app.appointmentId}: cityId=${app.cityId}, normalizedCityId=${normalizedCityId}, matches=${matches}`);\n            }\n            return matches;\n          });\n      \n      console.log(`MAP DEBUG - After filtering, ${filteredAppointments.length} appointments match the selected city`);\n\n      // Get laundromat locations - filter by city if not 'all'\n      const laundromats = await getLaundromatLocations(filteredAppointments);\n      console.log('MAP DEBUG - Laundromat locations:', laundromats);\n      setLaundromatLocations(laundromats);\n\n      // Get order locations with laundromat association - filter by city if not 'all'\n      const orders = await getOrderLocations(filteredAppointments);\n      console.log('MAP DEBUG - Order locations:', orders);\n      setMapMarkers(orders);\n    };\n\n    loadMapData();\n  }, [appointments, selectedCity]);\n\n  // Generate a list of months for the selector\n  const monthOptions = useMemo(() => {\n    const options = [];\n    const currentDate = new Date();\n    // Exclude current month (March 2024 as per user request)\n    const endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n    \n    // Go back 24 months\n    for (let i = 0; i < 24; i++) {\n      const date = new Date(endDate.getFullYear(), endDate.getMonth() - i, 1);\n      options.push({\n        value: { month: date.getMonth(), year: date.getFullYear() },\n        label: date.toLocaleString('default', { month: 'long', year: 'numeric' })\n      });\n    }\n    return options;\n  }, []);\n\n  // Filtered appointments based on selections\n  const filteredAppointments = useMemo(() => {\n    console.log(\"Filtering appointments with:\", {\n      totalAppointments: appointments.length,\n      selectedCity,\n      startDate: startDate.toISOString(),\n      endDate: endDate.toISOString(),\n      customerTypeFilter,\n      sampleAppointment: appointments[0]\n    });\n    \n    const filtered = appointments.filter(appointment => {\n      // Debug a sample appointment to see its structure\n      if (appointment.id === appointments[0]?.id) {\n        console.log(\"Sample appointment structure:\", appointment);\n      }\n      \n      // Filter by city (using cityId instead of city_id)\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) {\n        return false;\n      }\n      \n      // Filter by customer type\n      if (customerTypeFilter !== 'all' && appointment.customerType !== customerTypeFilter) {\n        return false;\n      }\n      \n      // Filter by laundromat\n      if (laundromatFilter !== 'all' && \n          (!appointment.cleaning || appointment.cleaning.cleaner !== laundromatFilter)) {\n        return false;\n      }\n      \n      // Try all possible date fields\n      let inDateRange = false;\n      let dateChecked = false;\n\n      // Check pickup.serviceDate\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        dateChecked = true;\n        try {\n          const pickupDate = new Date(appointment.pickup.serviceDate);\n          \n          // Log some sample dates to debug\n          if (appointment.id === appointments[0]?.id || appointment.appointmentId === appointments[0]?.appointmentId) {\n            console.log(\"Parsed pickup date:\", pickupDate);\n            console.log(\"Start date:\", startDate);\n            console.log(\"End date:\", endDate);\n            console.log(\"Is in range:\", !(pickupDate < startDate || pickupDate > endDate));\n          }\n          \n          if (!(pickupDate < startDate || pickupDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing date:\", appointment.pickup.serviceDate, error);\n        }\n      }\n      \n      // Check service_date if we haven't found a valid date yet\n      if (!inDateRange && appointment.service_date) {\n        dateChecked = true;\n        try {\n          const serviceDate = new Date(appointment.service_date);\n          if (!(serviceDate < startDate || serviceDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing service_date:\", appointment.service_date, error);\n        }\n      }\n      \n      // Check createdAt as fallback\n      if (!inDateRange && appointment.createdAt) {\n        dateChecked = true;\n        try {\n          const createdDate = new Date(appointment.createdAt);\n          if (!(createdDate < startDate || createdDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing createdAt:\", appointment.createdAt, error);\n        }\n      }\n      \n      // If we checked dates but none were in range, filter out this appointment\n      if (dateChecked && !inDateRange) {\n        return false;\n      }\n      \n      return true;\n    });\n    \n    console.log(\"Filtered appointments:\", filtered.length);\n    return filtered;\n  }, [appointments, selectedCity, customerTypeFilter, laundromatFilter, startDate, endDate]);\n\n  // Compute metrics based on filtered data\n  const cityStats = useMemo(() => getCityStatistics(filteredAppointments), [filteredAppointments]);\n  const laundromatStats = useMemo(() => {\n    // Get basic laundromat statistics\n    const stats = getLaundromatStatistics(filteredAppointments);\n    \n    // Calculate a simpler retention metric - returning customers as percentage of total customers\n    return stats.map(laundromat => {\n      // Simple retention rate - percentage of customers that return\n      const simpleRetentionRate = laundromat.customers > 0 \n        ? (laundromat.returningCustomers / laundromat.customers)\n        : 0;\n        \n      return {\n        ...laundromat,\n        retentionRate: simpleRetentionRate\n      };\n    });\n  }, [filteredAppointments]);\n  \n  const customerTypeDistribution = useMemo(() => getCustomerTypeDistribution(filteredAppointments), [filteredAppointments]);\n  const monthlyOrdersTrend = useMemo(() => {\n    // If 'all' is selected, show data for all cities, otherwise filter by selected city\n    const filteredAppointments = selectedCity === 'all' \n      ? appointments \n      : appointments.filter(a => a.cityId === selectedCity);\n      \n    const trends = getMonthlyOrdersTrend(filteredAppointments, 12);\n    \n    // Filter out March data (or current month)\n    const currentDate = new Date();\n    return trends.filter(month => {\n      const monthDate = new Date(month.date);\n      return !(monthDate.getMonth() === currentDate.getMonth() && \n               monthDate.getFullYear() === currentDate.getFullYear());\n    });\n  }, [appointments, selectedCity]);\n  \n  const avgOrderValueTrend = useMemo(() => {\n    // If 'all' is selected, show data for all cities, otherwise filter by selected city\n    const filteredAppointments = selectedCity === 'all' \n      ? appointments \n      : appointments.filter(a => a.cityId === selectedCity);\n      \n    const trends = getAvgOrderValueTrend(filteredAppointments, 12);\n    \n    // Filter out March data (or current month)\n    const currentDate = new Date();\n    return trends.filter(month => {\n      const monthDate = new Date(month.date);\n      return !(monthDate.getMonth() === currentDate.getMonth() && \n               monthDate.getFullYear() === currentDate.getFullYear());\n    });\n  }, [appointments, selectedCity]);\n  \n  const customerRetention = useMemo(() => getCustomerRetentionMetrics(filteredAppointments), [filteredAppointments]);\n  const driverPerformance = useMemo(() => getDriverPerformanceMetrics(filteredAppointments), [filteredAppointments]);\n  const seasonalTrends = useMemo(() => getSeasonalTrends(filteredAppointments), [filteredAppointments]);\n  const weightDistribution = useMemo(() => getWeightDistribution(filteredAppointments), [filteredAppointments]);\n\n  // London-specific orders data for Google Maps\n  const londonOrders = useMemo(() => {\n    return appointments.filter(app => app.cityId === LONDON_CITY_ID).map(app => {\n      // Extract address information for Google Maps\n      let address = '';\n      if (app.pickup && app.pickup.to) {\n        address = app.pickup.to;\n      }\n      return {\n        id: app.appointmentId,\n        address,\n        customerType: app.customerType || 'Unknown',\n        revenue: parseFloat(app.invoiceTotal || 0)\n      };\n    });\n  }, [appointments]);\n\n  // Get aggregate metrics\n  const aggregateMetrics = useMemo(() => {\n    return {\n      totalOrders: filteredAppointments.length,\n      totalRevenue: filteredAppointments.reduce((sum, appointment) => {\n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        return sum + (isNaN(revenue) ? 0 : revenue);\n      }, 0),\n      totalCustomers: new Set(filteredAppointments.map(a => a.customerId).filter(Boolean)).size,\n      totalLaundromats: new Set(filteredAppointments\n        .filter(a => a.cleaning && a.cleaning.cleaner)\n        .map(a => a.cleaning.cleaner)).size,\n      avgOrderValue: filteredAppointments.length > 0 ? \n        (filteredAppointments.reduce((sum, appointment) => {\n          const revenue = parseFloat(appointment.invoiceTotal || 0);\n          return sum + (isNaN(revenue) ? 0 : revenue);\n        }, 0) / filteredAppointments.length) : 0,\n      avgWeight: filteredAppointments\n        .filter(a => a.cleaning && a.cleaning.orderDetails && a.cleaning.orderDetails.washFoldWeight)\n        .reduce((sum, a, idx, arr) => {\n          const weight = parseFloat(a.cleaning.orderDetails.washFoldWeight);\n          return idx === arr.length - 1 ? \n            (sum + weight) / arr.length : \n            sum + weight;\n        }, 0)\n    };\n  }, [filteredAppointments]);\n\n  // Calculate monthly retention rate trend\n  const retentionRateTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyAppointments = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        const monthKey = format(date, 'yyyy-MM');\n        const monthName = format(date, 'MMM yyyy');\n        \n        if (!monthlyAppointments[monthKey]) {\n          monthlyAppointments[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: date,\n            appointments: [],\n            customers: new Set(),\n            returningCustomers: new Set()\n          };\n        }\n        \n        monthlyAppointments[monthKey].appointments.push(appointment);\n        \n        // Add customer to this month's unique customers\n        if (appointment.customerId) {\n          monthlyAppointments[monthKey].customers.add(appointment.customerId);\n          \n          // Check if this customer has appeared in previous months\n          const isReturning = Object.keys(monthlyAppointments)\n            .filter(m => m !== monthKey && new Date(monthlyAppointments[m].date) < date)\n            .some(m => monthlyAppointments[m].customers.has(appointment.customerId));\n          \n          if (isReturning) {\n            monthlyAppointments[monthKey].returningCustomers.add(appointment.customerId);\n          }\n        }\n      }\n    });\n    \n    // Calculate retention rate for each month\n    return Object.values(monthlyAppointments)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        customers: month.customers.size,\n        returningCustomers: month.returningCustomers.size,\n        retentionRate: month.customers.size > 0 ? \n          month.returningCustomers.size / month.customers.size : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few customers to avoid misleading rates\n      .filter(month => month.customers >= 3);\n  }, [appointments, selectedCity]);\n\n  // Calculate weekly order frequency\n  const orderFrequencyTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by week\n    const weeklyAppointments = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        // Get week number - FIX: Use 'yyyy-ww' instead of the problematic format\n        const weekKey = format(date, 'yyyy-ww');\n        const weekName = format(date, 'MMM d, yyyy');\n        \n        if (!weeklyAppointments[weekKey]) {\n          weeklyAppointments[weekKey] = {\n            key: weekKey,\n            name: `Week of ${weekName}`,\n            shortName: format(date, 'MMM d'),\n            date: date,\n            customerCount: new Set(),\n            orderCount: 0\n          };\n        }\n        \n        weeklyAppointments[weekKey].orderCount++;\n        \n        // Count unique customers\n        if (appointment.customerId) {\n          weeklyAppointments[weekKey].customerCount.add(appointment.customerId);\n        }\n      }\n    });\n    \n    // Calculate orders per customer for each week\n    return Object.values(weeklyAppointments)\n      .map(week => ({\n        name: week.shortName,\n        fullName: week.name,\n        date: week.date,\n        week: week.key,\n        customers: week.customerCount.size,\n        orders: week.orderCount,\n        ordersPerCustomer: week.customerCount.size > 0 ? \n          week.orderCount / week.customerCount.size : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out weeks with very few customers to avoid misleading rates\n      .filter(week => week.customers >= 2);\n  }, [appointments, selectedCity]);\n\n  // Calculate order processing time trend\n  const processingTimeTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyProcessingTimes = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      // Calculate processing time if we have both pickup and delivery dates\n      let pickupDate = null, deliveryDate = null;\n      \n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        pickupDate = new Date(appointment.pickup.serviceDate);\n      }\n      \n      if (appointment.delivery && appointment.delivery.serviceDate) {\n        deliveryDate = new Date(appointment.delivery.serviceDate);\n      }\n      \n      // If we have valid dates and delivery is after pickup\n      if (pickupDate && deliveryDate && \n          !isNaN(pickupDate.getTime()) && \n          !isNaN(deliveryDate.getTime()) && \n          deliveryDate > pickupDate) {\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        const monthName = format(pickupDate, 'MMM yyyy');\n        \n        if (!monthlyProcessingTimes[monthKey]) {\n          monthlyProcessingTimes[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: pickupDate,\n            totalHours: 0,\n            count: 0\n          };\n        }\n        \n        // Calculate hours between pickup and delivery\n        const hours = (deliveryDate - pickupDate) / (1000 * 60 * 60);\n        monthlyProcessingTimes[monthKey].totalHours += hours;\n        monthlyProcessingTimes[monthKey].count++;\n      }\n    });\n    \n    // Calculate average processing time for each month\n    return Object.values(monthlyProcessingTimes)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        avgProcessingHours: month.count > 0 ? \n          month.totalHours / month.count : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few data points\n      .filter(month => month.avgProcessingHours > 0);\n  }, [appointments, selectedCity]);\n\n  // Calculate commercial vs residential split trend\n  const customerTypeTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyTypeSplit = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        const monthKey = format(date, 'yyyy-MM');\n        const monthName = format(date, 'MMM yyyy');\n        \n        if (!monthlyTypeSplit[monthKey]) {\n          monthlyTypeSplit[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: date,\n            residential: 0,\n            commercial: 0,\n            unknown: 0,\n            total: 0\n          };\n        }\n        \n        monthlyTypeSplit[monthKey].total++;\n        \n        if (appointment.customerType === 'Residential') {\n          monthlyTypeSplit[monthKey].residential++;\n        } else if (appointment.customerType === 'Commercial') {\n          monthlyTypeSplit[monthKey].commercial++;\n        } else {\n          monthlyTypeSplit[monthKey].unknown++;\n        }\n      }\n    });\n    \n    // Calculate percentages\n    return Object.values(monthlyTypeSplit)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        residential: month.residential,\n        residentialPercent: month.total > 0 ? (month.residential / month.total) * 100 : 0,\n        commercial: month.commercial,\n        commercialPercent: month.total > 0 ? (month.commercial / month.total) * 100 : 0,\n        unknown: month.unknown,\n        total: month.total\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few orders\n      .filter(month => month.total >= 5);\n  }, [appointments, selectedCity]);\n\n  // State to track which chart to display\n  const [selectedChartType, setSelectedChartType] = useState('retention');\n\n  // All unique customer types for filter\n  const customerTypes = useMemo(() => {\n    const types = new Set();\n    appointments.forEach(appointment => {\n      if (appointment.customerType) {\n        types.add(appointment.customerType);\n      }\n    });\n    return Array.from(types);\n  }, [appointments]);\n\n  // All unique laundromats for filter\n  const laundromats = useMemo(() => {\n    const cleaners = new Map();\n    appointments.forEach(appointment => {\n      if (appointment.cleaning && appointment.cleaning.cleaner) {\n        const cleanerId = appointment.cleaning.cleaner;\n        const name = laundromatIdToNameMap[cleanerId] || `Laundromat ${cleanerId.substring(0, 8)}`;\n        cleaners.set(cleanerId, {\n          id: cleanerId,\n          name: name\n        });\n      }\n    });\n    return Array.from(cleaners.values());\n  }, [appointments, laundromatIdToNameMap]);\n\n  // For date range selection\n  const handleStartDateChange = (event) => {\n    const [year, month] = event.target.value.split('-');\n    setStartDate(new Date(year, month - 1, 1));\n  };\n\n  const handleEndDateChange = (event) => {\n    const [year, month] = event.target.value.split('-');\n    // Last day of the month\n    setEndDate(new Date(year, month, 0));\n  };\n\n  // Get map center coordinates based on selected city\n  const getMapCenter = useMemo(() => {\n    const centers = {\n      'LYGRRATQ7EGG2': { lat: 42.9849, lng: -81.2453 }, // London\n      'L4NE8GPX89J3A': { lat: 45.4215, lng: -75.6972 }, // Ottawa\n      'LDK6Z980JTKXY': { lat: 43.4643, lng: -80.5204 }, // Kitchener-Waterloo\n      'LXMC6DWVJ5N7W': { lat: 43.2557, lng: -79.8711 }, // Hamilton\n      'LG0VGFKQ25XED': { lat: 51.0447, lng: -114.0719 }  // Calgary\n    };\n    \n    // Return center for selected city or fallback to a default\n    return selectedCity !== 'all' ? centers[selectedCity] : centers['LYGRRATQ7EGG2'];\n  }, [selectedCity]);\n\n  // Get total order count currently displayed on map\n  const displayedMapOrdersCount = useMemo(() => {\n    return mapMarkers.length;\n  }, [mapMarkers]);\n\n  // Get active laundromats count currently displayed on map\n  const displayedLaundromatsCount = useMemo(() => {\n    return laundromatLocations.length;\n  }, [laundromatLocations]);\n\n  const [sortColumn, setSortColumn] = useState('orders');\n  const [sortDirection, setSortDirection] = useState('desc');\n\n  // Handle sorting for laundromat table\n  const handleSort = (column) => {\n    if (sortColumn === column) {\n      // Toggle sort direction if same column is clicked\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Set new sort column and default to descending\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  };\n  \n  // Sort icon component\n  const SortIcon = ({ column }) => {\n    if (sortColumn !== column) return <span style={{ opacity: 0.3 }}>↕</span>;\n    return <span>{sortDirection === 'asc' ? '↑' : '↓'}</span>;\n  };\n\n  // Render laundromat table with sorting\n  const renderLaundromatTable = () => {\n    // Get laundromats for current city or all laundromats\n    let filteredLaundromats = laundromatStats;\n    if (selectedCity !== 'all') {\n      filteredLaundromats = laundromatStats.filter(l => l.city === CITY_MAPPING[selectedCity]);\n    }\n    \n    // Filter out low-value entries (no revenue or very few orders)\n    filteredLaundromats = filteredLaundromats.filter(l => \n      l.revenue > 0 && l.orders > 5\n    );\n    \n    // Sort the data\n    const sortedLaundromats = [...filteredLaundromats].sort((a, b) => {\n      let valueA, valueB;\n      \n      // Handle special sorting cases\n      switch (sortColumn) {\n        case 'name':\n          valueA = laundromatIdToNameMap[a.id] || a.id;\n          valueB = laundromatIdToNameMap[b.id] || b.id;\n          break;\n        case 'avgOrderValue':\n          valueA = a.orders > 0 ? a.revenue / a.orders : 0;\n          valueB = b.orders > 0 ? b.revenue / b.orders : 0;\n          break;\n        case 'retentionScore':\n          valueA = a.retentionRate || 0;\n          valueB = b.retentionRate || 0;\n          break;\n        default:\n          valueA = a[sortColumn];\n          valueB = b[sortColumn];\n      }\n      \n      // Compare values based on sort direction\n      if (typeof valueA === 'string' && typeof valueB === 'string') {\n        return sortDirection === 'asc' \n          ? valueA.localeCompare(valueB) \n          : valueB.localeCompare(valueA);\n      } else {\n        return sortDirection === 'asc' ? valueA - valueB : valueB - valueA;\n      }\n    });\n    \n    return sortedLaundromats.map((laundromat) => (\n      <tr key={laundromat.id} style={{ borderBottom: '1px solid #E5E7EB' }}>\n        <td style={{ padding: '12px 16px' }}>\n          {laundromatIdToNameMap[laundromat.id] || laundromat.id}\n        </td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.orders}</td>\n        <td style={{ padding: '12px 16px' }}>${laundromat.revenue.toFixed(2)}</td>\n        <td style={{ padding: '12px 16px' }}>\n          ${laundromat.orders > 0 ? (laundromat.revenue / laundromat.orders).toFixed(2) : '0.00'}\n        </td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.customers}</td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.returningCustomers}</td>\n        <td style={{ padding: '12px 16px' }}>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span style={{ \n              width: '12px', \n              height: '12px', \n              borderRadius: '50%', \n              marginRight: '8px',\n              backgroundColor: laundromat.retentionRate >= 0.6 ? '#10B981' :\n                             laundromat.retentionRate >= 0.45 ? '#059669' :\n                             laundromat.retentionRate >= 0.35 ? '#F59E0B' :\n                             laundromat.retentionRate >= 0.25 ? '#D97706' :\n                             laundromat.retentionRate >= 0.15 ? '#DC2626' : '#B91C1C'\n            }}></span>\n            <span title=\"Percentage of customers who are returning customers.\">\n              {(laundromat.retentionRate * 100).toFixed(1)}%\n            </span>\n          </div>\n        </td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.avgTurnaroundDays.toFixed(1)} days</td>\n      </tr>\n    ));\n  };\n\n  // City information data\n  const cityInfo = useMemo(() => {\n    const info = {\n      'LYGRRATQ7EGG2': {\n        name: 'London',\n        population: 400000,\n        laundromatCount: 3,\n        operationalSince: '2023-01-01',\n        marketShare: (aggregateMetrics.totalOrders / 400000) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'L4NE8GPX89J3A': {\n        name: 'Ottawa',\n        population: 1017449,\n        laundromatCount: 5,\n        operationalSince: '2023-03-15',\n        marketShare: (aggregateMetrics.totalOrders / 1017449) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LDK6Z980JTKXY': {\n        name: 'Kitchener-Waterloo',\n        population: 575847,\n        laundromatCount: 4,\n        operationalSince: '2023-06-01',\n        marketShare: (aggregateMetrics.totalOrders / 575847) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LXMC6DWVJ5N7W': {\n        name: 'Hamilton',\n        population: 569353,\n        laundromatCount: 3,\n        operationalSince: '2023-09-10',\n        marketShare: (aggregateMetrics.totalOrders / 569353) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LG0VGFKQ25XED': {\n        name: 'Calgary',\n        population: 1306784,\n        laundromatCount: 4,\n        operationalSince: '2023-11-20',\n        marketShare: (aggregateMetrics.totalOrders / 1306784) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      }\n    };\n    return selectedCity === 'all' ? null : info[selectedCity];\n  }, [selectedCity, aggregateMetrics]);\n\n  // City projection constants - extracted from CityProjectionCalculator\n  const PROJECTION_RATE = 5.57; // Standard rate excluding London\n  const MONTHLY_DISTRIBUTION = {\n    1: 0.0604, 2: 0.1546, 3: 0.1570, 4: 0.1691, 5: 0.2126, 6: 0.2464\n  };\n\n  // Calculate projections for the selected city with error handling\n  const projectionData = useMemo(() => {\n    try {\n      if (!monthlyOrdersTrend || monthlyOrdersTrend.length === 0) {\n        return {\n          combinedOrderTrend: [],\n          metrics: {\n            totalAnnualOrders: 0,\n            averageMonthlyOrders: 0,\n            projectedGrowthPercent: 0\n          }\n        };\n      }\n      \n      // Generate projections using the advanced system\n      return addProjectionsToComponent(monthlyOrdersTrend, selectedCity);\n    } catch (error) {\n      console.error(\"Error generating projections:\", error);\n      // Return a safe default in case of errors\n      return {\n        combinedOrderTrend: monthlyOrdersTrend,\n        metrics: {\n          totalAnnualOrders: 0,\n          averageMonthlyOrders: 0,\n          projectedGrowthPercent: 0\n        },\n        error: true\n      };\n    }\n  }, [monthlyOrdersTrend, selectedCity]);\n\n  // Combine actual data with projections for the chart\n  const combinedOrderTrend = useMemo(() => {\n    if (!monthlyOrdersTrend || !projectionData || selectedCity === 'all') {\n      return monthlyOrdersTrend;\n    }\n\n    // Create a map of existing data points by month\n    const existingDataMap = {};\n    monthlyOrdersTrend.forEach(dataPoint => {\n      existingDataMap[dataPoint.month] = dataPoint;\n    });\n\n    // Merge actual data with projections - make sure we access the array correctly\n    return [\n      ...monthlyOrdersTrend,\n      ...(projectionData.projectedData || []).filter(projection => !existingDataMap[projection.month])\n    ].sort((a, b) => {\n      // Sort by date\n      if (a.month && b.month) {\n        return a.month.localeCompare(b.month);\n      }\n      return 0;\n    });\n  }, [monthlyOrdersTrend, projectionData, selectedCity]);\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Add a section for displaying order projections with error handling\n  const renderProjectionSection = () => {\n    return (\n      <div style={{ marginTop: '40px', marginBottom: '40px' }}>\n        <QuarterlyGrowthByCity selectedCity={selectedCity} cityMapping={CITY_MAPPING} />\n      </div>\n    );\n  };\n\n  // Render map section with Coming Soon message\n  const renderMapSection = () => {\n    return (\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h5\" sx={{ fontWeight: 'bold', color: '#111827' }}>\n            Order Locations - {CITY_MAPPING[selectedCity] || 'All Cities'}\n          </Typography>\n        </Box>\n        <Paper sx={{ \n          borderRadius: 2, \n          overflow: 'hidden', \n          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n          height: '450px',\n          position: 'relative'\n        }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ \n              key: 'AIzaSyAtGuXvA4E3HW0xM2yzRU7tphMTtxqKQD4',\n              libraries: ['places']\n            }}\n            center={mapCenter || getMapCenter}\n            zoom={mapZoom}\n            onChange={({ center, zoom, bounds }) => {\n              // Update map state when user interacts with the map\n              setMapCenter(center);\n              setMapZoom(zoom);\n            }}\n            options={{\n              fullscreenControl: true,\n              zoomControl: true,\n              mapTypeControl: true,\n              streetViewControl: false,\n              gestureHandling: 'greedy',\n              minZoom: 5,\n              maxZoom: 18,\n              styles: [\n                {\n                  featureType: 'all',\n                  elementType: 'geometry',\n                  stylers: [{ lightness: 20 }]\n                },\n                {\n                  featureType: 'water',\n                  elementType: 'geometry',\n                  stylers: [{ color: '#e0f2fe' }]\n                },\n                {\n                  featureType: 'road',\n                  elementType: 'geometry',\n                  stylers: [{ color: '#f1f5f9' }]\n                }\n              ]\n            }}\n          />\n          \n          {/* Coming Soon overlay */}\n          <Box sx={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(255, 255, 255, 0.85)',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: 10\n          }}>\n            <Box sx={{\n              backgroundColor: '#3B82F6',\n              color: 'white',\n              padding: '12px 24px',\n              borderRadius: '8px',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n              marginBottom: '16px'\n            }}>\n              <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\n                Coming Soon!\n              </Typography>\n            </Box>\n            <Typography variant=\"body1\" sx={{ maxWidth: '450px', textAlign: 'center', color: '#1F2937' }}>\n              Our team is working on integrating detailed map data for all service areas.\n              Check back soon for a visual representation of our order locations.\n            </Typography>\n          </Box>\n        </Paper>\n      </Box>\n    );\n  };\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>\n      {/* Header */}\n      <AppBar position=\"static\" sx={{ backgroundColor: '#1E40AF' }}>\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1, fontWeight: 'bold' }}>\n            Laundry Service Analytics Dashboard\n          </Typography>\n          \n          {/* City Selector */}\n          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n            <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 150, backgroundColor: 'white', borderRadius: '4px', mr: 2 }}>\n              <Select\n                value={selectedCity}\n                onChange={(e) => setSelectedCity(e.target.value)}\n                displayEmpty\n                sx={{ \n                  color: '#1E3A8A',\n                  '.MuiSelect-select': { py: 1.5, pr: 8 },\n                  '&:focus': { backgroundColor: 'white' }\n                }}\n                IconComponent={() => (\n                  <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                    expand_more\n                  </Icon>\n                )}\n              >\n                <MenuItem value=\"all\">All Cities</MenuItem>\n                <MenuItem value=\"LYGRRATQ7EGG2\">London</MenuItem>\n                <MenuItem value=\"L4NE8GPX89J3A\">Ottawa</MenuItem>\n                <MenuItem value=\"LDK6Z980JTKXY\">Kitchener-Waterloo</MenuItem>\n                <MenuItem value=\"LXMC6DWVJ5N7W\">Hamilton</MenuItem>\n                <MenuItem value=\"LG0VGFKQ25XED\">Calgary</MenuItem>\n              </Select>\n            </FormControl>\n            \n            {/* Date Range Selector - From */}\n            <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 120, backgroundColor: 'white', borderRadius: '4px', mr: 2 }}>\n              <Select\n                value={`${startDate.getFullYear()}-${startDate.getMonth()+1}`}\n                onChange={handleStartDateChange}\n                displayEmpty\n                sx={{ \n                  color: '#1E3A8A',\n                  '.MuiSelect-select': { py: 1.5, pr: 8 },\n                  '&:focus': { backgroundColor: 'white' }\n                }}\n                IconComponent={() => (\n                  <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                    expand_more\n                  </Icon>\n                )}\n              >\n                {[...Array(24)].map((_, i) => {\n                  const date = subMonths(new Date(), i);\n                  const value = `${date.getFullYear()}-${date.getMonth()+1}`;\n                  const label = format(date, 'MMM yyyy');\n                  return (\n                    <MenuItem key={`from-${value}`} value={value}>{label}</MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n            \n            {/* Date Range Selector - To */}\n            <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 120, backgroundColor: 'white', borderRadius: '4px', mr: 2 }}>\n              <Select\n                value={`${endDate.getFullYear()}-${endDate.getMonth()+1}`}\n                onChange={handleEndDateChange}\n                displayEmpty\n                sx={{ \n                  color: '#1E3A8A',\n                  '.MuiSelect-select': { py: 1.5, pr: 8 },\n                  '&:focus': { backgroundColor: 'white' }\n                }}\n                IconComponent={() => (\n                  <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                    expand_more\n                  </Icon>\n                )}\n              >\n                {[...Array(24)].map((_, i) => {\n                  const date = subMonths(new Date(), i);\n                  const value = `${date.getFullYear()}-${date.getMonth()+1}`;\n                  const label = format(date, 'MMM yyyy');\n                  return (\n                    <MenuItem key={`to-${value}`} value={value}>{label}</MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n            \n            {/* Customer Type Filter */}\n            <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 140, backgroundColor: 'white', borderRadius: '4px' }}>\n              <Select\n                value={customerTypeFilter}\n                onChange={(e) => setCustomerTypeFilter(e.target.value)}\n                displayEmpty\n                sx={{ \n                  color: '#1E3A8A',\n                  '.MuiSelect-select': { py: 1.5, pr: 8 },\n                  '&:focus': { backgroundColor: 'white' }\n                }}\n                IconComponent={() => (\n                  <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                    expand_more\n                  </Icon>\n                )}\n              >\n                <MenuItem value=\"all\">All Customer Types</MenuItem>\n                {customerTypes.map(type => (\n                  <MenuItem key={type} value={type}>{type}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n        </Toolbar>\n      </AppBar>\n\n      {/* Main content */}\n      <Box component=\"main\" sx={{ flexGrow: 1, padding: 3, backgroundColor: '#F9FAFB' }}>\n        <Container maxWidth=\"xl\">\n          {/* City Overview Section (Independent of date range) */}\n          {cityInfo && (\n            <Box sx={{ mb: 6 }}>\n              <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, justifyContent: 'space-between', alignItems: { xs: 'start', md: 'center' }, mb: 4 }}>\n                <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: '#111827', mb: { xs: 2, md: 0 } }}>\n                  {cityInfo.name} Overview\n                </Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <Icon sx={{ color: '#6B7280', mr: 1 }}>calendar_today</Icon>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    <span style={{ fontWeight: 500 }}>Operational Since:</span> {new Date(cityInfo.operationalSince).toLocaleString('en-US', { month: 'long', year: 'numeric' })}\n                  </Typography>\n                </Box>\n              </Box>\n              \n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#EBF5FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#1E88E5' }}>groups</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Population</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.population.toLocaleString()}</Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#E6FFFA', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#26A69A' }}>location_on</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Active Laundromats</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.laundromatCount}</Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'text.secondary', mt: 0.5, display: 'block' }}>\n                          {laundromats\n                            .filter(l => {\n                              // Filter by city based on most common city for this cleaner\n                              const cityFrequency = {};\n                              appointments.forEach(appointment => {\n                                if (appointment.cleaning && appointment.cleaning.cleaner === l.id && appointment.cityId) {\n                                  cityFrequency[appointment.cityId] = (cityFrequency[appointment.cityId] || 0) + 1;\n                                }\n                              });\n                              \n                              let mostCommonCity = null;\n                              let maxCityCount = 0;\n                              Object.keys(cityFrequency).forEach(cityId => {\n                                if (cityFrequency[cityId] > maxCityCount) {\n                                  maxCityCount = cityFrequency[cityId];\n                                  mostCommonCity = cityId;\n                                }\n                              });\n                              \n                              return mostCommonCity === selectedCity;\n                            })\n                            .map(l => l.name)\n                            .join(', ')}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#F3E8FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#AB47BC' }}>trending_up</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Market Penetration</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.marketShare.toFixed(2)}%</Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'text.secondary', mt: 0.5, display: 'block' }}>\n                          Based on total population\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#FFF7ED', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#F59E0B' }}>shopping_bag</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Average Orders Per Customer</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.avgOrderFrequency.toFixed(1)}</Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n\n          {/* Order Projections Section - Only show for specific cities */}\n          {selectedCity !== 'all' && renderProjectionSection()}\n\n          {/* Date Range Information Banner - Made more prominent */}\n          <Paper sx={{ \n            p: 3, \n            mb: 4, \n            backgroundColor: '#EFF6FF', \n            borderRadius: 2, \n            display: 'flex', \n            flexDirection: { xs: 'column', md: 'row' }, \n            alignItems: { xs: 'start', md: 'center' }, \n            justifyContent: 'space-between',\n            borderLeft: '5px solid #3B82F6' // Added accent border\n          }}>\n            <Typography variant=\"h5\" sx={{ fontWeight: 'bold', color: '#1E40AF', mb: { xs: 2, md: 0 } }}>\n              Showing Statistics for: {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n            </Typography>\n            <Box sx={{ display: 'flex', alignItems: 'center', backgroundColor: 'white', px: 2, py: 1, borderRadius: 1, boxShadow: '0 1px 2px rgba(0,0,0,0.1)' }}>\n              <Icon sx={{ color: '#3B82F6', mr: 1 }}>date_range</Icon>\n              <Typography variant=\"body1\" sx={{ mr: 1, color: '#1E40AF', fontWeight: 'medium' }}>\n                From: {format(startDate, 'MMM yyyy')}\n              </Typography>\n              <Typography variant=\"body1\" sx={{ color: '#1E40AF', fontWeight: 'medium' }}>\n                To: {format(endDate, 'MMM yyyy')}\n              </Typography>\n            </Box>\n          </Paper>\n\n          {/* Summary Cards - Now clearly marked as being for the selected date range */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            Performance Metrics\n          </Typography>\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#EBF5FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#2563EB' }}>shopping_bag</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Orders</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{aggregateMetrics.totalOrders.toLocaleString()}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#ECFDF5', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#10B981' }}>attach_money</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Revenue</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>${aggregateMetrics.totalRevenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#FEF3C7', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#F59E0B' }}>trending_up</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Avg. Order Value</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>${aggregateMetrics.avgOrderValue.toFixed(2)}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#F3E8FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#8B5CF6' }}>inventory_2</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Avg. Order Weight</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{aggregateMetrics.avgWeight.toFixed(2)} kg</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Chart Section - Within the Date Range */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]} Order Trends\n          </Typography>\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} md={8}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>\n                  Weekly Orders - {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart \n                    data={\n                      selectedCity === 'all' \n                        ? monthlyOrdersTrend \n                        : (projectionData?.weeklyHistoricalData || monthlyOrdersTrend)\n                    }\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis \n                      dataKey=\"name\" \n                      tick={{ fill: '#6B7280' }}\n                      interval=\"preserveStartEnd\"\n                      minTickGap={15}\n                      tickMargin={8}\n                    />\n                    <YAxis tick={{ fill: '#6B7280' }} />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: '#FFFFFF', \n                        borderRadius: '0.375rem', \n                        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', \n                        border: 'none' \n                      }}\n                      formatter={(value, name, props) => {\n                        return [`${value} orders`, name];\n                      }}\n                      labelFormatter={(label, items) => {\n                        const dataPoint = items?.[0]?.payload;\n                        return dataPoint?.fullname || label;\n                      }}\n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                    \n                    {selectedCity === 'all' \n                      ? Object.values(CITY_MAPPING)\n                        .filter(city => city !== 'All Cities')\n                        .map((city, index) => (\n                          <Line \n                            key={city}\n                            type=\"monotone\" \n                            dataKey={city} \n                            stroke={COLORS[index % COLORS.length]}\n                            strokeWidth={2}\n                            dot={{ r: 3, strokeWidth: 1, fill: COLORS[index % COLORS.length] }}\n                            activeDot={{ r: 6 }}\n                            isAnimationActive={true}\n                            animationDuration={1000}\n                            connectNulls={true}\n                          />\n                        ))\n                      : (\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"orders\" \n                          name={CITY_MAPPING[selectedCity]}\n                          stroke=\"#2563EB\"\n                          strokeWidth={2}\n                          dot={{ r: 3, strokeWidth: 1, fill: '#2563EB' }}\n                          activeDot={{ r: 6 }}\n                          isAnimationActive={true}\n                          animationDuration={1000}\n                          connectNulls={true}\n                        />\n                      )\n                    }\n                  </LineChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>Customer Types</Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={customerTypeDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {customerTypeDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${value} orders`, 'Count']} \n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Additional Metric Charts - with improved styling */}\n          <Grid container spacing={3} sx={{ mb: 5 }}>\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'medium', color: '#4B5563' }}>\n                    {selectedChartType === 'retention' && 'Customer Retention Over Time'}\n                    {selectedChartType === 'frequency' && 'Orders Per Customer Over Time'}\n                    {selectedChartType === 'processing' && 'Processing Time Trend (Hours)'}\n                    {selectedChartType === 'customerType' && 'Customer Type Distribution'}\n                    {selectedChartType === 'orderValue' && 'Average Order Value Over Time'}\n                  </Typography>\n                  \n                  <FormControl size=\"small\" sx={{ minWidth: 180 }}>\n                    <Select\n                      value={selectedChartType}\n                      onChange={(e) => setSelectedChartType(e.target.value)}\n                      displayEmpty\n                      variant=\"outlined\"\n                      sx={{ fontSize: '0.875rem' }}\n                    >\n                      <MenuItem value=\"retention\">Customer Retention</MenuItem>\n                      <MenuItem value=\"frequency\">Orders Per Customer</MenuItem>\n                      <MenuItem value=\"processing\">Processing Time</MenuItem>\n                      <MenuItem value=\"customerType\">Customer Type Split</MenuItem>\n                      <MenuItem value=\"orderValue\">Average Order Value</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Box>\n                \n                <ResponsiveContainer width=\"100%\" height={300}>\n                  {selectedChartType === 'retention' && (\n                    <LineChart data={retentionRateTrend}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                      <XAxis dataKey=\"name\" tick={{ fill: '#6B7280' }} interval=\"preserveStartEnd\" />\n                      <YAxis \n                        tick={{ fill: '#6B7280' }} \n                        domain={[0, 1]}\n                        tickFormatter={(value) => `${(value * 100).toFixed(0)}%`}\n                      />\n                      <Tooltip \n                        contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                        formatter={(value) => [`${(value * 100).toFixed(1)}%`, 'Retention Rate']}\n                        labelFormatter={(label) => `${label}`}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"retentionRate\" \n                        stroke=\"#8B5CF6\" \n                        strokeWidth={2}\n                        name=\"Retention Rate\"\n                        dot={{ r: 4, strokeWidth: 1, fill: \"#8B5CF6\" }}\n                        connectNulls={true}\n                      />\n                    </LineChart>\n                  )}\n                  \n                  {selectedChartType === 'frequency' && (\n                    <LineChart data={orderFrequencyTrend}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                      <XAxis dataKey=\"name\" tick={{ fill: '#6B7280' }} interval=\"preserveStartEnd\" />\n                      <YAxis \n                        tick={{ fill: '#6B7280' }} \n                        domain={[0, 'auto']}\n                        tickFormatter={(value) => value.toFixed(1)}\n                      />\n                      <Tooltip \n                        contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                        formatter={(value) => [value.toFixed(2), 'Orders/Customer']}\n                        labelFormatter={(label, items) => items?.[0]?.payload?.fullName || label}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"ordersPerCustomer\" \n                        stroke=\"#F59E0B\" \n                        strokeWidth={2}\n                        name=\"Orders Per Customer\"\n                        dot={{ r: 4, strokeWidth: 1, fill: \"#F59E0B\" }}\n                        connectNulls={true}\n                      />\n                    </LineChart>\n                  )}\n                  \n                  {selectedChartType === 'processing' && (\n                    <LineChart data={processingTimeTrend}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                      <XAxis dataKey=\"name\" tick={{ fill: '#6B7280' }} interval=\"preserveStartEnd\" />\n                      <YAxis \n                        tick={{ fill: '#6B7280' }} \n                        domain={[0, 'auto']}\n                      />\n                      <Tooltip \n                        contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                        formatter={(value) => [`${value.toFixed(1)} hours`, 'Processing Time']}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"avgProcessingHours\" \n                        stroke=\"#10B981\" \n                        strokeWidth={2}\n                        name=\"Processing Time (Hours)\"\n                        dot={{ r: 4, strokeWidth: 1, fill: \"#10B981\" }}\n                        connectNulls={true}\n                      />\n                    </LineChart>\n                  )}\n                  \n                  {selectedChartType === 'customerType' && (\n                    <BarChart data={customerTypeTrend} barGap={0} barCategoryGap={10}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                      <XAxis dataKey=\"name\" tick={{ fill: '#6B7280' }} interval=\"preserveStartEnd\" />\n                      <YAxis \n                        tick={{ fill: '#6B7280' }} \n                        domain={[0, 100]}\n                        tickFormatter={(value) => `${value}%`}\n                      />\n                      <Tooltip \n                        contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                        formatter={(value, name) => [`${value.toFixed(1)}%`, name]}\n                      />\n                      <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                      <Bar \n                        dataKey=\"residentialPercent\" \n                        name=\"Residential\" \n                        fill=\"#3B82F6\"\n                        radius={[3, 3, 0, 0]}\n                      />\n                      <Bar \n                        dataKey=\"commercialPercent\" \n                        name=\"Commercial\" \n                        fill=\"#F59E0B\"\n                        radius={[3, 3, 0, 0]}\n                      />\n                    </BarChart>\n                  )}\n                  \n                  {selectedChartType === 'orderValue' && (\n                    <ComposedChart data={avgOrderValueTrend}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                      <XAxis dataKey=\"name\" tick={{ fill: '#6B7280' }} />\n                      <YAxis tick={{ fill: '#6B7280' }} />\n                      <Tooltip \n                        contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                        formatter={(value) => [`$${value.toFixed(2)}`, 'Avg. Order Value']} \n                      />\n                      <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                      <Area type=\"monotone\" dataKey=\"value\" fill=\"#8884d8\" fillOpacity={0.3} stroke=\"#8884d8\" />\n                      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" connectNulls={true} />\n                    </ComposedChart>\n                  )}\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>Order Weight Distribution</Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={weightDistribution}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis dataKey=\"range\" tick={{ fill: '#6B7280' }} />\n                    <YAxis tick={{ fill: '#6B7280' }} />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${value} orders`, 'Count']} \n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                    <Bar dataKey=\"count\" fill=\"#26A69A\" name=\"Number of Orders\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Laundromat Performance Table - With Improved Styling */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            Laundromat Performance\n          </Typography>\n          <Paper sx={{ p: 0, mb: 4, overflowX: 'auto', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n            <Box sx={{ p: 3, borderBottom: '1px solid #E5E7EB' }}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={3}>\n                  <FormControl fullWidth variant=\"outlined\" size=\"small\">\n                    <InputLabel>Filter by Laundromat</InputLabel>\n                    <Select\n                      value={laundromatFilter}\n                      onChange={(e) => setLaundromatFilter(e.target.value)}\n                      label=\"Filter by Laundromat\"\n                    >\n                      <MenuItem value=\"all\">All Laundromats</MenuItem>\n                      {laundromats.map(laundromat => (\n                        <MenuItem key={laundromat.id} value={laundromat.id}>{laundromat.name}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </Box>\n            <Box>\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr style={{ backgroundColor: '#F9FAFB' }}>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('name')}\n                    >\n                      Laundromat Name <SortIcon column=\"name\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('orders')}\n                    >\n                      Total Orders <SortIcon column=\"orders\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('revenue')}\n                    >\n                      Revenue <SortIcon column=\"revenue\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('avgOrderValue')}\n                    >\n                      Avg. Order Value <SortIcon column=\"avgOrderValue\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('customers')}\n                    >\n                      Customers <SortIcon column=\"customers\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('returningCustomers')}\n                    >\n                      Returning <SortIcon column=\"returningCustomers\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('retentionScore')}\n                    >\n                      Retention <SortIcon column=\"retentionScore\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('avgTurnaroundDays')}\n                    >\n                      Turnaround <SortIcon column=\"avgTurnaroundDays\" />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {renderLaundromatTable()}\n                </tbody>\n              </table>\n            </Box>\n          </Paper>\n\n          {/* Map Section - replaced with Coming Soon version */}\n          {renderMapSection()}\n        </Container>\n      </Box>\n\n      {/* Footer */}\n      <Box component=\"footer\" sx={{ p: 3, backgroundColor: '#F1F5F9', borderTop: '1px solid #E2E8F0' }}>\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n          Laundry Service Analytics Dashboard &bull; Last updated: {new Date().toLocaleDateString()} \n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Dashboard; ","import React, { useState, useEffect } from 'react';\nimport { Box, CircularProgress, Typography, Button } from '@mui/material';\nimport Dashboard from './components/Dashboard';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabaseUrl = 'https://cnbpmepdmtpgrbllufcb.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNuYnBtZXBkbXRwZ3JibGx1ZmNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc5MjM4MjEsImV4cCI6MjA1MzQ5OTgyMX0.UqDleR4ucntrg9x6FNgJigKZjKiATFYiMiLiZZj3B2w';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Load data from Supabase\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        console.log('Fetching data from Supabase...');\n        \n        // First try Supabase\n        const { data: supabaseData, error: supabaseError } = await supabase\n          .from('appointments')\n          .select('*');\n        \n        if (supabaseError) {\n          console.error('Supabase error:', supabaseError);\n          throw new Error(`Failed to load data from Supabase: ${supabaseError.message}`);\n        }\n        \n        if (supabaseData && supabaseData.length > 0) {\n          console.log(`Successfully loaded ${supabaseData.length} records from Supabase`);\n          setData(supabaseData);\n        } else {\n          // Fallback to local JSON file\n          console.log('No data found in Supabase, falling back to local JSON file');\n          const response = await fetch('/appointments.json');\n          if (!response.ok) {\n            throw new Error(`Failed to load local data: ${response.status} ${response.statusText}`);\n          }\n          const jsonData = await response.json();\n          setData(jsonData);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err.message || 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Handle retry when loading fails\n  const handleRetry = () => {\n    setError(null);\n    setLoading(true);\n    // Re-trigger the effect\n    const loadData = async () => {\n      try {\n        // First try Supabase\n        const { data: supabaseData, error: supabaseError } = await supabase\n          .from('appointments')\n          .select('*');\n        \n        if (supabaseError) {\n          console.error('Supabase error:', supabaseError);\n          throw new Error(`Failed to load data from Supabase: ${supabaseError.message}`);\n        }\n        \n        if (supabaseData && supabaseData.length > 0) {\n          console.log(`Successfully loaded ${supabaseData.length} records from Supabase`);\n          setData(supabaseData);\n        } else {\n          // Fallback to local JSON file\n          console.log('No data found in Supabase, falling back to local JSON file');\n          const response = await fetch('/appointments.json');\n          if (!response.ok) {\n            throw new Error(`Failed to load local data: ${response.status} ${response.statusText}`);\n          }\n          const jsonData = await response.json();\n          setData(jsonData);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err.message || 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  };\n\n  if (loading) {\n    return (\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column',\n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          backgroundColor: '#F3F4F6'\n        }}\n      >\n        <CircularProgress size={60} sx={{ mb: 3 }} />\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          Loading laundry service data...\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column',\n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          backgroundColor: '#F3F4F6',\n          p: 3\n        }}\n      >\n        <Typography variant=\"h5\" color=\"error\" gutterBottom>\n          Error Loading Data\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3, maxWidth: 600, textAlign: 'center' }}>\n          {error}\n        </Typography>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleRetry}>\n          Retry\n        </Button>\n      </Box>\n    );\n  }\n\n  return <Dashboard jsonData={data} />;\n};\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport App from './App';\n\n// Create a custom theme\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1E3A8A',\n    },\n    secondary: {\n      main: '#10B981',\n    },\n    background: {\n      default: '#F3F4F6',\n    },\n  },\n  typography: {\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n    h5: {\n      fontWeight: 600,\n    },\n    h6: {\n      fontWeight: 600,\n    },\n  },\n  components: {\n    MuiPaper: {\n      defaultProps: {\n        elevation: 0,\n      },\n      styleOverrides: {\n        root: {\n          boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.05)',\n        },\n      },\n    },\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          textTransform: 'none',\n          borderRadius: 8,\n        },\n      },\n    },\n    MuiSelect: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8,\n        },\n      },\n    },\n  },\n});\n\n// Create the root element for our React application\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Render the application\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n); "],"sourceRoot":""}