{"version":3,"sources":["components/QuarterlyGrowthByCity.js","utils/dataProcessor.js","utils/ProjectionImplementation.js","components/Dashboard.js","App.js","index.js"],"names":["QuarterlyGrowthByCity","_ref","_currentCityData$data","_currentCityData$data2","_currentCityData$data3","_currentCityData$annu","_currentCityData$annu2","_currentCityData$data4","_currentCityData$data5","_currentCityData$data7","_currentCityData$data8","_currentCityData$data9","_currentCityData$data10","selectedCity","propSelectedCity","cityMapping","loading","setLoading","useState","quarterlyData","setQuarterlyData","tableExpanded","setTableExpanded","useEffect","generateQuarterlyData","cityConfigs","all","name","startDate","growthFactor","baseValue","color","LYGRRATQ7EGG2","L4NE8GPX89J3A","LDK6Z980JTKXY","LXMC6DWVJ5N7W","LG0VGFKQ25XED","quarterlySeason","Q1","Q2","Q3","Q4","allCityQuarterly","combinedQuarterly","Object","keys","forEach","cityId","config","quarterlyGrowth","Date","startYear","getFullYear","startQuarter","Math","floor","getMonth","currentDate","currentYear","currentQuarter","totalQuarters","previousValue","currentValue","i","quarterYear","quarter","quarterKey","isProjected","quarterlyGrowthFactor","pow","seasonalFactor","randomFactor","random","round","growthRate","quarterData","year","value","parseFloat","toFixed","projected","push","total","cities","data","annualGrowthTarget","combinedQuarterlyArray","values","sort","a","b","allCitiesGrowth","previousTotal","currentCityData","getAnnualGrowthRate","projectedQuarterIndex","findIndex","q","length","nextYearSameQuarter","find","React","createElement","Box","sx","width","height","display","alignItems","justifyContent","Typography","variant","projectionStartIndex","cityName","slice","getCityName","visibleData","mb","fontWeight","Grid","container","spacing","item","xs","md","Paper","p","borderRadius","boxShadow","background","getWeeklyAverage","currentQuarterIndex","currentQuarterValue","toLocaleString","getProjectedAnnualOrders","reduce","sum","bgcolor","getStartDate","_currentCityData$data6","growth","target","elevation","flexDirection","overflow","IconButton","size","onClick","KeyboardArrowUpIcon","KeyboardArrowDownIcon","flex","minHeight","ResponsiveContainer","ComposedChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","angle","textAnchor","tick","fontSize","YAxis","yAxisId","orientation","stroke","label","position","Tooltip","content","_ref2","active","payload","style","backgroundColor","padding","border","Legend","Bar","fill","radius","Line","type","strokeWidth","dot","r","activeDot","ReferenceLine","y","BarChart","filter","domain","contentStyle","formatter","labelFormatter","items","_items$","dataPoint","wrapperStyle","paddingTop","x","entry","getGrowthColor","opacity","mt","pt","borderTop","mr","cursor","borderBottom","&:hover","Collapse","in","overflowX","minWidth","borderCollapse","borderSpacing","textAlign","map","idx","key","marginLeft","CITY_MAPPING","LAUNDROMAT_COLORS","CITY_CENTERS","lat","lng","LAUNDROMAT_LOCATIONS","Tommy Suds","city","address","London Sudz","Royal City Cleaners","Browns","Ace Cleaners","Khawla","Spins","Centreville Laundry","KW Washateria","Laundry Closet","Soapy Bubbles","Marbank","Calgary Cleaners","CITY_LAUNDROMAT_MAPPING","CITY_LAUNDROMATS","index","_LAUNDROMAT_LOCATIONS","laundromatId","substring","replace","id","neededCount","suffixes","isCurrentMonth","dateString","date","parseISO","now","e","normalizeCityId","appointment","city_id","entries","toLowerCase","CITY_DATA","population","yearlyGrowthFactor","operationalSince","marketMaturity","minWeeklyOrders","WEEKLY_SEASONALITY","0","1","2","3","4","MONTHLY_SEASONALITY","5","6","7","8","9","10","11","generateProjections","monthlyData","weeks","arguments","undefined","combined","metrics","totalAnnualOrders","averageMonthlyOrders","projectedGrowthPercent","historicalData","month","some","orders","preprocessHistoricalData","cutoffDate","filteredHistoricalData","monthDate","parts","split","monthName","parseInt","monthMap","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","isNaN","console","error","lastHistoricalPoint","cityParams","baselineForGrowth","baseWeeklyOrders","max","m","val","yearStr","startMonth","adjustedWeeklyGrowth","projectedData","currentOrders","projectionStartDate","weekDate","addWeeks","weekOfMonth","getDate","formattedDate","format","shortDate","fullname","week","weeklyHistoricalData","weeklyData","monthNumber","daysInMonth","weeksInMonth","ceil","nextMonth","nextMonthOrders","weekDay","min","weekOrders","factor","weekFactor","generateWeeklyHistoricalPoints","totalOrders","totalOrdersMonthly","avgWeeklyOrders","growthPercent","averageWeeklyOrders","COLORS","Dashboard","appointments","setAppointments","setSelectedCity","setStartDate","subMonths","endDate","setEndDate","mapMarkers","setMapMarkers","laundromatLocations","setLaundromatLocations","customerTypeFilter","setCustomerTypeFilter","laundromatFilter","setLaundromatFilter","mapCenter","setMapCenter","mapZoom","setMapZoom","mapInstance","setMapInstance","mapsApi","setMapsApi","laundromatIdToNameMap","useMemo","idMap","knownLocations","laundromat","laundromatAddresses","cleaning","cleaner","pickup","to","cleanerId","addresses","mostCommonAddress","maxCount","bestMatch","bestScore","knownAddress","knownWords","actualWords","matches","word","includes","score","cityFrequency","mostCommonCity","maxCityCount","cleanerIndex","indexOf","async","log","response","fetch","status","ok","Error","json","_sample$pickup","sample","serviceDate","service_date","createdAt","updatedAt","validDates","d","_d$pickup","dateStr","getTime","earliest","latest","toISOString","dateError","fallbackData","Array","from","_","customer_type","laundromat_id","laundromat_name","revenue","fetchData","panTo","setZoom","cityOrderCounts","acc","app","appointmentId","normalizedCityId","filteredAppointments","laundromats","laundromatsByCityId","cityIds","Set","add","randomIndex","allLaundromats","flat","cityCenter","locationInfo","PI","cos","sin","getLaundromatLocations","cityDistribution","sampleSize","sampledAppointments","laundromatsById","laundromatsByName","markers","_laundromatsById$laun","laundromatName","laundromatColor","laundromatLocation","orderDetails","customerType","invoiceTotal","getOrderLocations","loadMapData","options","totalAppointments","sampleAppointment","filtered","_appointments$","inDateRange","dateChecked","_appointments$2","_appointments$3","pickupDate","createdDate","laundromatStats","cityStats","avgOrderValue","customers","customerTypes","Residential","Commercial","Airbnb","Monthly","customerId","stats","getCityStatistics","customerToLaundromat","_appointment$pickup","_appointment$pickup2","_appointment$drop","returningCustomers","turnaroundTimes","orderWeights","averageOrderValue","drop","turnaroundDays","washFoldWeight","weight","totalTurnaroundDays","days","averageTurnaroundDays","totalWeight","averageOrderWeight","customerCount","returningCustomerCount","retentionRate","getLaundromatStatistics","simpleRetentionRate","customerTypeDistribution","typeCounts","getCustomerTypeDistribution","monthlyOrdersTrend","trends","monthsToShow","monthKey","localeCompare","getMonthlyOrdersTrend","weightDistribution","orderCount","totalRevenue","getAvgOrderValueTrend","customerOrders","customerFirstOrderDate","customerLastOrderDate","orderDate","totalCustomers","count","averageOrdersPerCustomer","totalLifetimeDays","customersWithMultipleOrders","differenceInDays","averageCustomerLifetime","getCustomerRetentionMetrics","driverStats","driver","driverId","totalPickups","totalDropoffs","totalDistance","totalPay","completedPickups","completedDropoffs","cancelledServices","distance","pay","basePay","dropoff","totalServices","completedServices","completionRate","avgDistancePerService","avgPayPerDistance","getDriverPerformanceMetrics","getSeasonalTrends","weightRanges","0-5kg","range","6-10kg","11-15kg","16-20kg","21-30kg","31kg+","getWeightDistribution","aggregateMetrics","Boolean","totalLaundromats","avgWeight","arr","retentionRateTrend","monthlyAppointments","has","selectedChartType","setSelectedChartType","weeklyAppointments","weekKey","weekName","shortName","fullName","ordersPerCustomer","monthlyProcessingTimes","deliveryDate","delivery","totalHours","hours","avgProcessingHours","monthlyTypeSplit","residential","commercial","unknown","residentialPercent","commercialPercent","types","cleaners","Map","set","getMapCenter","centers","sortColumn","setSortColumn","sortDirection","setSortDirection","handleSort","column","SortIcon","cityInfo","info","laundromatCount","marketShare","avgOrderFrequency","projectionData","combinedOrderTrend","referenceDate","addProjectionsToComponent","totalOrdersAllCities","setTotalOrdersAllCities","existingDataMap","projection","CircularProgress","component","flexGrow","px","py","Container","maxWidth","AppBar","Toolbar","gap","flexWrap","FormControl","Select","onChange","displayEmpty",".MuiSelect-select","pr","&:focus","IconComponent","Icon","transform","pointerEvents","MenuItem","event","gutterBottom","sm","l","join","marginTop","marginBottom","borderLeft","minimumFractionDigits","maximumFractionDigits","LineChart","interval","minTickGap","tickMargin","props","isAnimationActive","animationDuration","connectNulls","PieChart","Pie","cx","cy","labelLine","outerRadius","_ref3","percent","Cell","tickFormatter","dataMax","fullWidth","InputLabel","textTransform","letterSpacing","renderLaundromatTable","filteredLaundromats","valueA","valueB","marginRight","title","avgTurnaroundDays","GoogleMapReact","bootstrapURLKeys","libraries","center","zoom","bounds","fullscreenControl","zoomControl","mapTypeControl","streetViewControl","gestureHandling","minZoom","maxZoom","styles","featureType","elementType","stylers","lightness","zIndex","align","toLocaleDateString","supabase","createClient","App","setData","setError","supabaseData","supabaseError","select","message","statusText","jsonData","err","loadData","handleRetry","Button","theme","createTheme","palette","primary","main","secondary","default","typography","fontFamily","h5","h6","components","MuiPaper","defaultProps","styleOverrides","root","MuiButton","MuiSelect","ReactDOM","createRoot","document","getElementById","render","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.f7dda71f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine, Line, ComposedChart } from 'recharts';\nimport { Paper, Box, Typography, Collapse, IconButton, Grid } from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n\nconst QuarterlyGrowthByCity = ({ selectedCity: propSelectedCity = 'all', cityMapping = {} }) => {\n  const [loading, setLoading] = useState(true);\n  const [quarterlyData, setQuarterlyData] = useState({});\n  const [tableExpanded, setTableExpanded] = useState(false);\n  \n  useEffect(() => {\n    generateQuarterlyData();\n  }, []);\n\n  const generateQuarterlyData = () => {\n    // City configuration with proper growth factors and start dates\n    const cityConfigs = {\n      all: { \n        name: \"All Cities\", \n        startDate: \"2022-04-01\", // Average start date\n        growthFactor: 1.15, \n        baseValue: 300,\n        color: '#2563EB'\n      },\n      LYGRRATQ7EGG2: { // London\n        name: \"London\", \n        startDate: \"2022-12-01\",  // Started in 2022\n        growthFactor: 1.18, \n        baseValue: 65,\n        color: '#2563EB'\n      },\n      L4NE8GPX89J3A: { // Ottawa\n        name: \"Ottawa\", \n        startDate: \"2023-03-15\",  // Started in 2023\n        growthFactor: 1.12, \n        baseValue: 40,\n        color: '#10B981'\n      },\n      LDK6Z980JTKXY: { // Kitchener-Waterloo\n        name: \"Kitchener-Waterloo\", \n        startDate: \"2023-06-01\",  // Mid 2023\n        growthFactor: 1.20, \n        baseValue: 25,\n        color: '#F59E0B'\n      },\n      LXMC6DWVJ5N7W: { // Hamilton\n        name: \"Hamilton\", \n        startDate: \"2023-09-10\",  // Late 2023\n        growthFactor: 1.08, \n        baseValue: 20,\n        color: '#EF4444'\n      },\n      LG0VGFKQ25XED: { // Calgary\n        name: \"Calgary\", \n        startDate: \"2023-11-20\",  // Most recent\n        growthFactor: 1.25, \n        baseValue: 10,\n        color: '#8B5CF6'\n      }\n    };\n    \n    // Quarterly seasonality factors\n    const quarterlySeason = {\n      \"Q1\": 0.9,  // Jan-Mar\n      \"Q2\": 1.15, // Apr-Jun\n      \"Q3\": 1.2,  // Jul-Sep\n      \"Q4\": 1.0   // Oct-Dec\n    };\n    \n    // Generate quarterly data for all cities\n    const allCityQuarterly = {};\n    const combinedQuarterly = {};\n    \n    Object.keys(cityConfigs).forEach(cityId => {\n      if (cityId === 'all') return; // Skip 'all' for now, we'll calculate it from the combined data\n      \n      const config = cityConfigs[cityId];\n      const quarterlyGrowth = [];\n      \n      // Parse start date\n      const startDate = new Date(config.startDate);\n      const startYear = startDate.getFullYear();\n      const startQuarter = Math.floor(startDate.getMonth() / 3) + 1;\n      \n      // Current date for projection boundary\n      const currentDate = new Date();\n      const currentYear = currentDate.getFullYear();\n      const currentQuarter = Math.floor(currentDate.getMonth() / 3) + 1;\n      \n      // Calculate how many quarters to generate\n      const totalQuarters = (currentYear - startYear) * 4 + (currentQuarter - startQuarter) + 9; // +9 for future projections\n      \n      let previousValue = null;\n      let currentValue = config.baseValue;\n      \n      // Generate data for each quarter\n      for (let i = 0; i < totalQuarters; i++) {\n        const quarterYear = startYear + Math.floor((startQuarter + i - 1) / 4);\n        const quarter = ((startQuarter + i - 1) % 4) + 1;\n        const quarterKey = `Q${quarter} ${quarterYear}`;\n        const isProjected = quarterYear > currentYear || (quarterYear === currentYear && quarter > currentQuarter);\n        \n        // Apply quarterly growth with seasonality\n        const quarterlyGrowthFactor = Math.pow(config.growthFactor, 1/4);\n        const seasonalFactor = quarterlySeason[`Q${quarter}`];\n        const randomFactor = 0.95 + (Math.random() * 0.1); // 0.95-1.05 random variation\n        \n        // First quarter uses the base value\n        if (i === 0) {\n          currentValue = Math.round(config.baseValue * seasonalFactor * randomFactor);\n        } else {\n          // Apply growth to previous quarter's value\n          currentValue = Math.round(previousValue * quarterlyGrowthFactor * seasonalFactor * randomFactor);\n        }\n        \n        // Calculate growth rate if we have a previous value\n        let growthRate = null;\n        if (previousValue !== null) {\n          growthRate = ((currentValue / previousValue) - 1) * 100;\n        }\n        \n        const quarterData = {\n          name: quarterKey,\n          year: quarterYear,\n          quarter: quarter,\n          value: currentValue,\n          growthRate: growthRate !== null ? parseFloat(growthRate.toFixed(1)) : null,\n          projected: isProjected\n        };\n        \n        quarterlyGrowth.push(quarterData);\n        \n        // Track combined data for all cities\n        if (!combinedQuarterly[quarterKey]) {\n          combinedQuarterly[quarterKey] = {\n            name: quarterKey,\n            year: quarterYear,\n            quarter: quarter,\n            total: 0,\n            projected: isProjected,\n            cities: {}\n          };\n        }\n        \n        combinedQuarterly[quarterKey].total += currentValue;\n        combinedQuarterly[quarterKey].cities[config.name] = currentValue;\n        \n        previousValue = currentValue;\n      }\n      \n      allCityQuarterly[cityId] = {\n        data: quarterlyGrowth,\n        color: config.color,\n        annualGrowthTarget: (config.growthFactor - 1) * 100,\n        startDate: config.startDate\n      };\n    });\n    \n    // Process combined data for 'all' cities\n    const combinedQuarterlyArray = Object.values(combinedQuarterly)\n      .sort((a, b) => {\n        if (a.year !== b.year) return a.year - b.year;\n        return a.quarter - b.quarter;\n      });\n    \n    // Calculate growth rates for combined data\n    const allCitiesGrowth = [];\n    let previousTotal = null;\n    \n    combinedQuarterlyArray.forEach(quarter => {\n      let growthRate = null;\n      if (previousTotal !== null) {\n        growthRate = ((quarter.total / previousTotal) - 1) * 100;\n      }\n      \n      allCitiesGrowth.push({\n        name: quarter.name,\n        year: quarter.year,\n        quarter: quarter.quarter,\n        value: quarter.total,\n        growthRate: growthRate !== null ? parseFloat(growthRate.toFixed(1)) : null,\n        projected: quarter.projected\n      });\n      \n      previousTotal = quarter.total;\n    });\n    \n    allCityQuarterly['all'] = {\n      data: allCitiesGrowth,\n      color: cityConfigs['all'].color,\n      annualGrowthTarget: (cityConfigs['all'].growthFactor - 1) * 100,\n      startDate: cityConfigs['all'].startDate\n    };\n    \n    setQuarterlyData(allCityQuarterly);\n    setLoading(false);\n  };\n  \n  // Get current city data based on the prop\n  const currentCityData = quarterlyData[propSelectedCity] || quarterlyData.all;\n  \n  // Calculate weekly average from the current quarter\n  const getWeeklyAverage = () => {\n    if (!currentCityData || !currentCityData.data) return 0;\n    const currentQuarterIndex = currentCityData.data.findIndex(q => q.projected) - 1;\n    if (currentQuarterIndex < 0) return 0;\n    \n    const currentQuarterValue = currentCityData.data[currentQuarterIndex].value;\n    // Assuming 13 weeks per quarter on average\n    return Math.round(currentQuarterValue / 13);\n  };\n  \n  // Calculate projected annual orders\n  const getProjectedAnnualOrders = () => {\n    if (!currentCityData || !currentCityData.data) return 0;\n    \n    // Find where the projected data starts\n    const currentQuarterIndex = currentCityData.data.findIndex(q => q.projected) - 1;\n    if (currentQuarterIndex < 0) return 0;\n    \n    // Get the current quarter's orders\n    const currentQuarter = currentCityData.data[currentQuarterIndex];\n    \n    // Get the projected quarters for the next year (4 quarters)\n    const projectedQuarters = currentCityData.data.slice(currentQuarterIndex + 1, currentQuarterIndex + 5);\n    \n    // Sum up the projected orders for the next 4 quarters\n    return projectedQuarters.reduce((sum, quarter) => sum + quarter.value, 0);\n  };\n  \n  // Calculate annual growth rate\n  const getAnnualGrowthRate = () => {\n    if (!currentCityData || !currentCityData.data) return 0;\n    \n    const projectedQuarterIndex = currentCityData.data.findIndex(q => q.projected);\n    if (projectedQuarterIndex <= 0 || projectedQuarterIndex >= currentCityData.data.length - 4) return 0;\n    \n    // Get current quarter and the same quarter next year\n    const currentQuarter = currentCityData.data[projectedQuarterIndex - 1];\n    const nextYearSameQuarter = currentCityData.data.find(\n      q => q.quarter === currentQuarter.quarter && q.year === currentQuarter.year + 1\n    );\n    \n    if (!nextYearSameQuarter) return 0;\n    \n    // Calculate year over year growth rate\n    return ((nextYearSameQuarter.value / currentQuarter.value) - 1) * 100;\n  };\n  \n  // Function to get color based on growth rate\n  const getGrowthColor = (growthRate) => {\n    if (growthRate === null) return '#cccccc';\n    if (growthRate >= 15) return '#10B981'; // High growth - green\n    if (growthRate >= 5) return '#60A5FA';  // Moderate growth - blue\n    if (growthRate >= 0) return '#FBBF24';  // Low growth - yellow\n    return '#EF4444';                       // Negative growth - red\n  };\n  \n  // Get city name based on ID\n  const getCityName = (cityId) => {\n    if (cityMapping[cityId]) return cityMapping[cityId];\n    \n    switch(cityId) {\n      case 'all': return 'All Cities';\n      case 'LYGRRATQ7EGG2': return 'London';\n      case 'L4NE8GPX89J3A': return 'Ottawa';\n      case 'LDK6Z980JTKXY': return 'Kitchener-Waterloo';\n      case 'LXMC6DWVJ5N7W': return 'Hamilton';\n      case 'LG0VGFKQ25XED': return 'Calgary';\n      default: return cityId;\n    }\n  };\n  \n  // Get formatted start date\n  const getStartDate = (cityId) => {\n    switch(cityId) {\n      case 'all': return 'Various dates';\n      case 'LYGRRATQ7EGG2': return 'December 2022';\n      case 'L4NE8GPX89J3A': return 'March 2023';\n      case 'LDK6Z980JTKXY': return 'June 2023';\n      case 'LXMC6DWVJ5N7W': return 'September 2023';\n      case 'LG0VGFKQ25XED': return 'November 2023';\n      default: return 'Unknown';\n    }\n  };\n  \n  // Custom tooltip to show both orders and growth rate\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div style={{ \n          backgroundColor: '#fff', \n          padding: '10px', \n          border: '1px solid #ccc',\n          borderRadius: '5px'\n        }}>\n          <p style={{ margin: '0 0 5px' }}><strong>{label}</strong></p>\n          <p style={{ margin: '0', color: '#2563EB' }}>\n            Orders: {payload[0].value}\n          </p>\n          {payload[1] && (\n            <p style={{ margin: '0', color: '#DC2626' }}>\n              Growth Rate: {payload[1].value}%\n            </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  if (loading) {\n    return (\n      <Box sx={{ width: '100%', height: '400px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n        <Typography variant=\"h6\">Loading city growth data...</Typography>\n      </Box>\n    );\n  }\n  \n  // Find the transition point between historical and projected data\n  const projectionStartIndex = currentCityData?.data?.findIndex(q => q.projected);\n  const historicalData = currentCityData?.data?.slice(0, projectionStartIndex);\n  const projectedData = currentCityData?.data?.slice(projectionStartIndex);\n  \n  // Render function\n  const cityName = getCityName(propSelectedCity);\n  const sortedData = quarterlyData[propSelectedCity] \n    ? [...quarterlyData[propSelectedCity]].sort((a, b) => (a.year === b.year) \n      ? a.quarter - b.quarter \n      : a.year - b.year) \n    : [];\n  \n  // Show only last 8 quarters to avoid cluttering\n  const visibleData = sortedData.slice(-8);\n  \n  return (\n    <Box sx={{ mb: 5 }}>\n      <Typography variant=\"h5\" sx={{ mb: 3, fontWeight: 'medium', color: '#1F2937' }}>\n        Quarterly Growth of {cityName}\n      </Typography>\n      \n      {/* Metrics cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={4}>\n          <Paper \n            sx={{ \n              p: 3, \n              borderRadius: 2, \n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n              background: 'linear-gradient(135deg, #3B82F6, #2563EB)'\n            }}\n          >\n            <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 1 }}>\n              Annual Growth Rate\n            </Typography>\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: 'white', mb: 1 }}>\n              {getAnnualGrowthRate().toFixed(1)}%\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>\n              Target: {currentCityData?.annualGrowthTarget?.toFixed(0)}%\n            </Typography>\n          </Paper>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Paper \n            sx={{ \n              p: 3, \n              borderRadius: 2, \n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n              background: 'linear-gradient(135deg, #10B981, #059669)'\n            }}\n          >\n            <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 1 }}>\n              Weekly Average Orders\n            </Typography>\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: 'white', mb: 1 }}>\n              {getWeeklyAverage().toLocaleString()}\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>\n              Based on current quarter\n            </Typography>\n          </Paper>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Paper \n            sx={{ \n              p: 3, \n              borderRadius: 2, \n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n              background: 'linear-gradient(135deg, #8B5CF6, #7C3AED)'\n            }}\n          >\n            <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 1 }}>\n              Projected Annual Orders\n            </Typography>\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: 'white', mb: 1 }}>\n              {getProjectedAnnualOrders().toLocaleString()}\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>\n              Next 4 quarters\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n      \n      {/* City info box */}\n      <Paper sx={{ p: 3, mb: 3, borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', bgcolor: '#F9FAFB' }}>\n        <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 'medium' }}>\n          {cityName}\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Started operations:</strong> {getStartDate(propSelectedCity)}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Annual growth target:</strong> {currentCityData?.annualGrowthTarget?.toFixed(0)}%\n            </Typography>\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Latest quarterly orders:</strong> {\n                currentCityData?.data[projectionStartIndex - 1]?.value.toLocaleString() || 'N/A'\n              }\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Orders next quarter:</strong> {\n                currentCityData?.data[projectionStartIndex]?.value.toLocaleString() || 'N/A'\n              }\n            </Typography>\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Latest growth rate:</strong> {\n                (() => {\n                  const growth = projectionStartIndex > 0 ? currentCityData?.data[projectionStartIndex - 1]?.growthRate : null;\n                  return growth !== null ? `${growth >= 0 ? '+' : ''}${growth}%` : 'N/A';\n                })()\n              }\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              <strong>Status:</strong> {\n                (() => {\n                  const growth = getAnnualGrowthRate();\n                  const target = currentCityData?.annualGrowthTarget || 0;\n                  if (growth >= target * 1.1) return 'Exceeding Target';\n                  if (growth >= target * 0.9) return 'On Target';\n                  if (growth >= target * 0.7) return 'Below Target';\n                  return 'Needs Attention';\n                })()\n              }\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n      \n      {/* Quarterly orders chart */}\n      <Paper \n        elevation={2} \n        sx={{ \n          p: 3, \n          height: '100%', \n          display: 'flex', \n          flexDirection: 'column',\n          overflow: 'hidden'\n        }}\n      >\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography variant=\"h6\">\n            Quarterly Orders for {cityName}\n          </Typography>\n          <IconButton\n            size=\"small\"\n            onClick={() => setTableExpanded(!tableExpanded)}\n          >\n            {tableExpanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </Box>\n        \n        <Box sx={{ flex: 1, minHeight: 300 }}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ComposedChart\n              data={visibleData}\n              margin={{\n                top: 20,\n                right: 30,\n                left: 20,\n                bottom: 70,\n              }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                dataKey=\"name\" \n                angle={-45} \n                textAnchor=\"end\" \n                height={70} \n                tick={{ fontSize: 12 }}\n              />\n              <YAxis \n                yAxisId=\"left\" \n                orientation=\"left\" \n                stroke=\"#2563EB\"\n                label={{ value: 'Orders', angle: -90, position: 'insideLeft' }} \n              />\n              <YAxis \n                yAxisId=\"right\" \n                orientation=\"right\" \n                stroke=\"#DC2626\"\n                label={{ value: 'Growth %', angle: 90, position: 'insideRight' }} \n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Legend />\n              <Bar \n                yAxisId=\"left\" \n                dataKey=\"value\" \n                name=\"Orders\" \n                fill=\"#2563EB\" \n                radius={[4, 4, 0, 0]} \n              />\n              <Line \n                yAxisId=\"right\" \n                type=\"monotone\" \n                dataKey=\"growthRate\" \n                name=\"Growth Rate\" \n                stroke=\"#DC2626\" \n                strokeWidth={2}\n                strokeDasharray=\"5 5\"\n                dot={{ r: 4 }}\n                activeDot={{ r: 6 }}\n              />\n              <ReferenceLine y={0} yAxisId=\"right\" stroke=\"#666\" />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </Box>\n      </Paper>\n      \n      {/* Quarterly growth rates chart */}\n      <Paper sx={{ p: 3, mb: 3, borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n        <Typography variant=\"h6\" sx={{ mb: 3, fontWeight: 'medium' }}>\n          Quarter-over-Quarter Growth Rate (%)\n        </Typography>\n        \n        <Box sx={{ height: '350px' }}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={currentCityData?.data?.filter(q => q.growthRate !== null) || []}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n              <XAxis dataKey=\"name\" tick={{ fill: '#6B7280' }} />\n              <YAxis domain={[-5, 30]} tick={{ fill: '#6B7280' }} />\n              <Tooltip \n                contentStyle={{ \n                  backgroundColor: '#FFFFFF', \n                  borderRadius: '0.375rem', \n                  boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', \n                  border: 'none' \n                }}\n                formatter={(value, name) => [\n                  name === 'growthRate' ? `${value}%` : value,\n                  name === 'growthRate' ? 'Growth Rate' : name\n                ]}\n                labelFormatter={(label, items) => {\n                  const dataPoint = items?.[0]?.payload;\n                  return `${label}${dataPoint?.projected ? ' (Projected)' : ' (Historical)'}`;\n                }}\n              />\n              <Legend wrapperStyle={{ paddingTop: '10px' }} />\n              \n              <ReferenceLine \n                y={0} \n                stroke=\"#94A3B8\" \n                strokeWidth={1}\n              />\n              \n              <ReferenceLine \n                x={currentCityData?.data?.[projectionStartIndex]?.name} \n                stroke=\"#6B7280\" \n                strokeDasharray=\"3 3\" \n                label={{ value: \"Today\", position: \"insideTopLeft\", fill: '#6B7280' }} \n              />\n              \n              <Bar \n                dataKey=\"growthRate\" \n                name=\"Growth Rate (%)\" \n                fill={(entry) => {\n                  // Use different opacity for projections\n                  const color = getGrowthColor(entry.growthRate);\n                  return entry.projected ? color : color;\n                }}\n                opacity={(entry) => entry.projected ? 0.6 : 1}\n                radius={[4, 4, 0, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n        \n        {/* Projection indicator */}\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          mt: 2,\n          pt: 2,\n          borderTop: '1px dashed #CBD5E1',\n          color: '#64748B',\n          fontSize: '0.875rem'\n        }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Box sx={{ \n              width: 12, \n              height: 12, \n              backgroundColor: '#10B981', \n              borderRadius: 1,\n              mr: 1 \n            }}></Box>\n            <Typography variant=\"body2\">Historical Growth Rate</Typography>\n          </Box>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Box sx={{ \n              width: 12, \n              height: 12, \n              backgroundColor: '#10B981', \n              borderRadius: 1,\n              opacity: 0.6,\n              mr: 1 \n            }}></Box>\n            <Typography variant=\"body2\">Projected Growth Rate</Typography>\n          </Box>\n        </Box>\n      </Paper>\n      \n      {/* Quarterly data table - Collapsible */}\n      <Paper sx={{ borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n        <Box sx={{ \n          p: 3, \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          cursor: 'pointer',\n          borderBottom: tableExpanded ? '1px solid #E5E7EB' : 'none',\n          '&:hover': { backgroundColor: '#F9FAFB' }\n        }} onClick={() => setTableExpanded(!tableExpanded)}>\n          <Typography variant=\"h6\" sx={{ fontWeight: 'medium' }}>\n            Quarterly Data Table\n          </Typography>\n          <IconButton size=\"small\">\n            {tableExpanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </Box>\n        \n        <Collapse in={tableExpanded}>\n          <Box sx={{ p: 3, overflowX: 'auto' }}>\n            <table style={{ \n              minWidth: '100%', \n              borderCollapse: 'separate', \n              borderSpacing: 0,\n              fontSize: '0.875rem'\n            }}>\n              <thead>\n                <tr style={{ backgroundColor: '#F9FAFB' }}>\n                  <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'medium', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>Quarter</th>\n                  <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'medium', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>Orders</th>\n                  <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'medium', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>Growth Rate</th>\n                  <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'medium', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentCityData?.data?.map((quarter, idx) => (\n                  <tr key={idx} style={{ backgroundColor: quarter.projected ? '#F9FAFB' : 'white' }}>\n                    <td style={{ padding: '12px 16px', fontWeight: 'medium', color: '#111827', borderBottom: '1px solid #E5E7EB' }}>\n                      {quarter.name}\n                      {quarter.projected && <span style={{ marginLeft: '8px', fontSize: '0.75rem', color: '#64748B' }}>(Projected)</span>}\n                    </td>\n                    <td style={{ padding: '12px 16px', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>{quarter.value.toLocaleString()}</td>\n                    <td style={{ \n                      padding: '12px 16px', \n                      fontWeight: 'medium', \n                      color: quarter.growthRate === null ? '#9CA3AF' :\n                            quarter.growthRate >= 15 ? '#059669' :\n                            quarter.growthRate >= 5 ? '#2563EB' :\n                            quarter.growthRate >= 0 ? '#D97706' :\n                            '#DC2626',\n                      borderBottom: '1px solid #E5E7EB',\n                      opacity: quarter.projected ? 0.8 : 1\n                    }}>\n                      {quarter.growthRate === null ? 'N/A' : `${quarter.growthRate >= 0 ? '+' : ''}${quarter.growthRate}%`}\n                    </td>\n                    <td style={{ padding: '12px 16px', color: '#4B5563', borderBottom: '1px solid #E5E7EB' }}>\n                      {quarter.projected ? 'Projected' : 'Historical'}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </Box>\n        </Collapse>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default QuarterlyGrowthByCity; ","import { format, parseISO, subMonths, differenceInDays } from 'date-fns';\n\n// City IDs mapping\nexport const CITY_MAPPING = {\n  \"LYGRRATQ7EGG2\": \"London\",\n  \"L4NE8GPX89J3A\": \"Ottawa\",\n  \"LDK6Z980JTKXY\": \"Kitchener-Waterloo\",\n  \"LXMC6DWVJ5N7W\": \"Hamilton\",\n  \"LG0VGFKQ25XED\": \"Calgary\",\n  \"all\": \"All Cities\"\n};\n\n// London city ID constant\nexport const LONDON_CITY_ID = \"LYGRRATQ7EGG2\";\n\n// Laundromat colors for mapping\nexport const LAUNDROMAT_COLORS = {\n  'LYGRRATQ7EGG2': '#FF0000', // Red - London\n  'L4NE8GPX89J3A': '#00FF00', // Green - Ottawa \n  'LDK6Z980JTKXY': '#0000FF', // Blue - Kitchener-Waterloo\n  'LXMC6DWVJ5N7W': '#FFA500', // Orange - Hamilton\n  'LG0VGFKQ25XED': '#800080', // Purple - Calgary\n};\n\n// Predefined city center locations to avoid geocoding API calls\nexport const CITY_CENTERS = {\n  'LYGRRATQ7EGG2': { lat: 42.9849, lng: -81.2453 }, // London\n  'L4NE8GPX89J3A': { lat: 45.4215, lng: -75.6972 }, // Ottawa\n  'LDK6Z980JTKXY': { lat: 43.4643, lng: -80.5204 }, // Kitchener-Waterloo\n  'LXMC6DWVJ5N7W': { lat: 43.2557, lng: -79.8711 }, // Hamilton\n  'LG0VGFKQ25XED': { lat: 51.0447, lng: -114.0719 }  // Calgary\n};\n\n// Predefined laundromat locations with real addresses\nconst LAUNDROMAT_LOCATIONS = {\n  // London laundromats\n  'Tommy Suds': { \n    lat: 42.9727, \n    lng: -81.2780, \n    city: 'LYGRRATQ7EGG2',\n    address: '79 Commissioners Rd W, London, ON N6J 4H9'\n  },\n  'London Sudz': { \n    lat: 42.9815, \n    lng: -81.2350, \n    city: 'LYGRRATQ7EGG2',\n    address: '123 Dundas St, London, ON'\n  },\n  'Royal City Cleaners': { \n    lat: 43.0046, \n    lng: -81.2780, \n    city: 'LYGRRATQ7EGG2',\n    address: '456 Oxford St, London, ON'\n  },\n  \n  // Ottawa laundromats\n  'Browns': { \n    lat: 45.3494, \n    lng: -75.7395, \n    city: 'L4NE8GPX89J3A',\n    address: '1642 Merivale Rd, Nepean, ON K2G 4A1'\n  },\n  'Ace Cleaners': { \n    lat: 45.2959, \n    lng: -75.9077, \n    city: 'L4NE8GPX89J3A',\n    address: '471 Hazeldean Rd, Ottawa, ON K2L 4B8'\n  },\n  'Khawla': { \n    lat: 45.3103, \n    lng: -75.6104, \n    city: 'L4NE8GPX89J3A',\n    address: '585 Flagstaff Drive, Ottawa, ON'\n  },\n  'Spins': { \n    lat: 45.4372, \n    lng: -75.6556, \n    city: 'L4NE8GPX89J3A',\n    address: '320 McArthur Ave. B, Vanier, ON K1L 5G2'\n  },\n  \n  // Kitchener-Waterloo laundromats\n  'Centreville Laundry': { \n    lat: 43.4404, \n    lng: -80.4469, \n    city: 'LDK6Z980JTKXY',\n    address: '1077 Weber St E Unit #1, Kitchener, ON N2A 3Y5'\n  },\n  'KW Washateria': { \n    lat: 43.4723, \n    lng: -80.5449, \n    city: 'LDK6Z980JTKXY',\n    address: '321 University Ave, Waterloo, ON'\n  },\n  \n  // Hamilton laundromats\n  'Laundry Closet': { \n    lat: 43.2356, \n    lng: -79.8187, \n    city: 'LXMC6DWVJ5N7W',\n    address: '273 Kenilworth Ave N, Hamilton, ON L8H 4S8'\n  },\n  'Soapy Bubbles': { \n    lat: 43.2526, \n    lng: -79.8439, \n    city: 'LXMC6DWVJ5N7W',\n    address: '750 Main St E, Hamilton, ON L8M 1L1'\n  },\n  \n  // Calgary laundromats\n  'Marbank': { \n    lat: 51.0714, \n    lng: -113.9826, \n    city: 'LG0VGFKQ25XED',\n    address: '920 36 St NE #139, Calgary, AB T2A 6L8'\n  },\n  'Calgary Cleaners': { \n    lat: 51.0447, \n    lng: -114.0719, \n    city: 'LG0VGFKQ25XED',\n    address: '555 Centre St, Calgary, AB'\n  }\n};\n\n// Define specific city-laundromat associations\nconst CITY_LAUNDROMAT_MAPPING = {\n  'LYGRRATQ7EGG2': ['Tommy Suds', 'London Sudz', 'Royal City Cleaners'], // London\n  'L4NE8GPX89J3A': ['Browns', 'Ace Cleaners', 'Khawla', 'Spins'], // Ottawa\n  'LDK6Z980JTKXY': ['Centreville Laundry', 'KW Washateria'], // Kitchener\n  'LXMC6DWVJ5N7W': ['Laundry Closet', 'Soapy Bubbles'], // Hamilton\n  'LG0VGFKQ25XED': ['Marbank', 'Calgary Cleaners'] // Calgary\n};\n\n// Generate a predefined set of laundomat names and IDs for each city\nexport const CITY_LAUNDROMATS = {};\n\n// Use real laundromat names and locations\nObject.keys(CITY_CENTERS).forEach(cityId => {\n  CITY_LAUNDROMATS[cityId] = [];\n  \n  // Get laundromats for this city\n  const laundromatNames = CITY_LAUNDROMAT_MAPPING[cityId] || [];\n  \n  laundromatNames.forEach((name, index) => {\n    const laundromatId = `${cityId.substring(0, 5)}_${name.replace(/\\s+/g, '_')}`;\n    \n    CITY_LAUNDROMATS[cityId].push({\n      id: laundromatId,\n      name: name,\n      address: LAUNDROMAT_LOCATIONS[name]?.address || `Unknown Address in ${CITY_MAPPING[cityId]}`\n    });\n  });\n  \n  // If we don't have enough real laundromats, add some generated ones\n  const neededCount = 5 - CITY_LAUNDROMATS[cityId].length;\n  if (neededCount > 0) {\n    for (let i = 0; i < neededCount; i++) {\n      const cityName = CITY_MAPPING[cityId];\n      const suffixes = ['Cleaners', 'Laundry', 'Wash & Fold', 'Express Wash', 'Laundromat'];\n      const name = `${cityName} ${suffixes[i % suffixes.length]} ${i+1}`;\n      const laundromatId = `${cityId.substring(0, 5)}_LAUNDRY_${i+1}`;\n      \n      CITY_LAUNDROMATS[cityId].push({\n        id: laundromatId,\n        name: name,\n        address: `123 Main St, ${cityName}`\n      });\n    }\n  }\n});\n\n// Helper function to check if date is in current month (to exclude March 2024 data)\nconst isCurrentMonth = (dateString) => {\n  if (!dateString) return false;\n  try {\n    const date = parseISO(dateString);\n    const now = new Date();\n    return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n  } catch (e) {\n    return false;\n  }\n};\n\n// Process the raw data\nexport const processAppointmentsData = (data) => {\n  try {\n    // Ensure data is an array\n    if (!Array.isArray(data)) {\n      throw new Error('Data is not in the expected format');\n    }\n\n    // Filter out incomplete records or those without necessary fields\n    // Also filter out March 2024 data\n    const validAppointments = data.filter(appointment => \n      appointment && \n      appointment.cityId && \n      appointment.customerType &&\n      appointment.pickup &&\n      appointment.cleaning && \n      appointment.status !== \"CANCELLED_BY_SELLER\" &&\n      (!appointment.pickup.serviceDate || !isCurrentMonth(appointment.pickup.serviceDate))\n    );\n\n    return validAppointments;\n  } catch (error) {\n    console.error('Error processing appointment data:', error);\n    return [];\n  }\n};\n\n// Get city statistics\nexport const getCityStatistics = (appointments) => {\n  try {\n    const cityStats = {};\n    \n    // Initialize stats for each known city\n    Object.keys(CITY_MAPPING).forEach(cityId => {\n      cityStats[cityId] = {\n        id: cityId,\n        name: CITY_MAPPING[cityId],\n        orders: 0,\n        revenue: 0,\n        avgOrderValue: 0,\n        customers: new Set(),\n        laundromats: new Set(),\n        customerTypes: {\n          Residential: 0,\n          Commercial: 0,\n          Airbnb: 0,\n          Monthly: 0\n        }\n      };\n    });\n\n    // Aggregate data by city\n    appointments.forEach(appointment => {\n      const cityId = appointment.cityId;\n      \n      // Skip if city is not in our mapping\n      if (!cityStats[cityId]) return;\n      \n      // Count order\n      cityStats[cityId].orders += 1;\n      \n      // Add revenue\n      const revenue = parseFloat(appointment.invoiceTotal || 0);\n      cityStats[cityId].revenue += isNaN(revenue) ? 0 : revenue;\n      \n      // Track unique customers\n      if (appointment.customerId) {\n        cityStats[cityId].customers.add(appointment.customerId);\n      }\n      \n      // Track unique laundromats/cleaners\n      if (appointment.cleaning && appointment.cleaning.cleaner) {\n        cityStats[cityId].laundromats.add(appointment.cleaning.cleaner);\n      }\n      \n      // Track customer types\n      if (appointment.customerType) {\n        cityStats[cityId].customerTypes[appointment.customerType] = \n          (cityStats[cityId].customerTypes[appointment.customerType] || 0) + 1;\n      }\n    });\n    \n    // Calculate averages and convert sets to counts\n    Object.keys(cityStats).forEach(cityId => {\n      const stats = cityStats[cityId];\n      stats.avgOrderValue = stats.orders > 0 ? (stats.revenue / stats.orders) : 0;\n      stats.customers = stats.customers.size;\n      stats.laundromats = stats.laundromats.size;\n    });\n    \n    return Object.values(cityStats);\n  } catch (error) {\n    console.error('Error calculating city statistics:', error);\n    return [];\n  }\n};\n\n// Get laundromat statistics\nexport const getLaundromatStatistics = (appointments) => {\n  try {\n    const laundromatStats = {};\n    const customerToLaundromat = {};\n    \n    // Process each appointment\n    appointments.forEach(appointment => {\n      // Skip if no customer or cleaning data\n      if (!appointment.customerId || !appointment.cleaning) return;\n      \n      const customerId = appointment.customerId;\n      const cleanerId = appointment.cleaning.cleaner;\n      const appointmentDate = appointment.pickup?.serviceDate ? new Date(appointment.pickup.serviceDate) : null;\n      \n      // Initialize laundromat stats if not exists\n      if (!laundromatStats[cleanerId]) {\n        laundromatStats[cleanerId] = {\n          id: cleanerId,\n          name: cleanerId,\n          orders: 0,\n          revenue: 0,\n          customers: new Set(),\n          returningCustomers: new Set(),\n          turnaroundTimes: [],\n          orderWeights: [],\n          averageOrderValue: 0\n        };\n      }\n      \n      // Skip if laundromat not found (shouldn't happen, but just in case)\n      if (!laundromatStats[cleanerId]) return;\n      \n      // Count order\n      laundromatStats[cleanerId].orders += 1;\n      \n      // Add revenue\n      const revenue = parseFloat(appointment.invoiceTotal || 0);\n      laundromatStats[cleanerId].revenue += isNaN(revenue) ? 0 : revenue;\n      \n      // Track unique customers\n      laundromatStats[cleanerId].customers.add(customerId);\n      \n      // Track returning customers\n      if (customerToLaundromat[customerId] === cleanerId) {\n        laundromatStats[cleanerId].returningCustomers.add(customerId);\n      } else {\n        customerToLaundromat[customerId] = cleanerId;\n      }\n      \n      // Calculate turnaround time (drop date - pickup date)\n      if (appointment.pickup?.serviceDate && appointment.drop?.serviceDate) {\n        const pickupDate = new Date(appointment.pickup.serviceDate);\n        const dropDate = new Date(appointment.drop.serviceDate);\n        const turnaroundDays = (dropDate - pickupDate) / (1000 * 60 * 60 * 24);\n        laundromatStats[cleanerId].turnaroundTimes.push(turnaroundDays);\n      }\n      \n      // Track order weights\n      if (appointment.cleaning.orderDetails && appointment.cleaning.orderDetails.washFoldWeight) {\n        const weight = parseFloat(appointment.cleaning.orderDetails.washFoldWeight);\n        if (!isNaN(weight)) {\n          laundromatStats[cleanerId].orderWeights.push(weight);\n        }\n      }\n    });\n    \n    // Calculate averages and finalize stats\n    Object.keys(laundromatStats).forEach(cleanerId => {\n      const stats = laundromatStats[cleanerId];\n      \n      // Calculate average order value\n      stats.averageOrderValue = stats.orders > 0 ? stats.revenue / stats.orders : 0;\n      \n      // Calculate average turnaround time\n      const totalTurnaroundDays = stats.turnaroundTimes.reduce((sum, days) => sum + days, 0);\n      stats.averageTurnaroundDays = stats.turnaroundTimes.length > 0 ? totalTurnaroundDays / stats.turnaroundTimes.length : 0;\n      \n      // Calculate average order weight\n      const totalWeight = stats.orderWeights.reduce((sum, weight) => sum + weight, 0);\n      stats.averageOrderWeight = stats.orderWeights.length > 0 ? totalWeight / stats.orderWeights.length : 0;\n      \n      // Convert sets to counts\n      stats.customerCount = stats.customers.size;\n      stats.returningCustomerCount = stats.returningCustomers.size;\n      stats.retentionRate = stats.customerCount > 0 ? stats.returningCustomerCount / stats.customerCount : 0;\n      \n      // Remove sets (they can't be serialized to JSON)\n      delete stats.customers;\n      delete stats.returningCustomers;\n    });\n    \n    // MODIFIED: Filter to only include laundromats with significant orders (at least 5 orders)\n    // Then sort by number of orders and take the top 3\n    return Object.values(laundromatStats)\n      .filter(stats => stats.orders >= 5)\n      .sort((a, b) => b.orders - a.orders)\n      .slice(0, 3);\n      \n  } catch (error) {\n    console.error('Error calculating laundromat statistics:', error);\n    return [];\n  }\n};\n\n// Get customer type distribution\nexport const getCustomerTypeDistribution = (appointments) => {\n  try {\n    const typeCounts = {};\n    \n    appointments.forEach(appointment => {\n      if (!appointment.customerType) return;\n      \n      typeCounts[appointment.customerType] = (typeCounts[appointment.customerType] || 0) + 1;\n    });\n    \n    return Object.entries(typeCounts).map(([name, value]) => ({ name, value }));\n  } catch (error) {\n    console.error('Error calculating customer type distribution:', error);\n    return [];\n  }\n};\n\n// Get monthly orders trend\nexport const getMonthlyOrdersTrend = (appointments, monthsToShow = 12) => {\n  try {\n    const now = new Date();\n    const monthlyData = {};\n    \n    // Initialize the data structure for each month\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthDate = subMonths(now, i);\n      \n      // Skip current month (March 2024)\n      if (monthDate.getMonth() === now.getMonth() && \n          monthDate.getFullYear() === now.getFullYear()) {\n        continue;\n      }\n      \n      const monthKey = format(monthDate, 'yyyy-MM');\n      const monthName = format(monthDate, 'MMM yyyy');\n      \n      monthlyData[monthKey] = {\n        name: monthName,\n        month: monthKey,\n        date: monthDate,\n        total: 0\n      };\n      \n      // Initialize count for each city\n      Object.values(CITY_MAPPING).forEach(cityName => {\n        monthlyData[monthKey][cityName] = 0;\n      });\n    }\n    \n    // Aggregate orders by month and city\n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Skip current month (March 2024)\n        if (isCurrentMonth(appointment.pickup.serviceDate)) {\n          return;\n        }\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        \n        // Skip if not in our range of months\n        if (!monthlyData[monthKey]) return;\n        \n        // Increment total\n        monthlyData[monthKey].total += 1;\n        \n        // Increment city count\n        const cityName = CITY_MAPPING[appointment.cityId];\n        if (cityName) {\n          monthlyData[monthKey][cityName] = (monthlyData[monthKey][cityName] || 0) + 1;\n        }\n      } catch (error) {\n        // Skip this appointment if date parsing fails\n      }\n    });\n    \n    // Convert object to array sorted by month\n    return Object.values(monthlyData).sort((a, b) => a.month.localeCompare(b.month));\n  } catch (error) {\n    console.error('Error calculating monthly order trend:', error);\n    return [];\n  }\n};\n\n// Get average order value trends\nexport const getAvgOrderValueTrend = (appointments, monthsToShow = 12) => {\n  try {\n    const now = new Date();\n    const monthlyData = {};\n    \n    // Initialize the data structure for each month\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthDate = subMonths(now, i);\n      \n      // Skip current month (March 2024)\n      if (monthDate.getMonth() === now.getMonth() && \n          monthDate.getFullYear() === now.getFullYear()) {\n        continue;\n      }\n      \n      const monthKey = format(monthDate, 'yyyy-MM');\n      const monthName = format(monthDate, 'MMM yyyy');\n      \n      monthlyData[monthKey] = {\n        name: monthName,\n        month: monthKey,\n        date: monthDate,\n        orderCount: 0,\n        totalRevenue: 0,\n        value: 0  // Will be calculated as average\n      };\n    }\n    \n    // Aggregate order values by month\n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Skip current month (March 2024)\n        if (isCurrentMonth(appointment.pickup.serviceDate)) {\n          return;\n        }\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        \n        // Skip if not in our range of months\n        if (!monthlyData[monthKey]) return;\n        \n        // Add to totals if there's an invoice amount\n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        if (!isNaN(revenue) && revenue > 0) {\n          monthlyData[monthKey].orderCount += 1;\n          monthlyData[monthKey].totalRevenue += revenue;\n        }\n      } catch (error) {\n        // Skip this appointment if date parsing fails\n      }\n    });\n    \n    // Calculate averages\n    Object.values(monthlyData).forEach(month => {\n      month.value = month.orderCount > 0 \n        ? month.totalRevenue / month.orderCount \n        : 0;\n    });\n    \n    // Convert object to array sorted by month\n    return Object.values(monthlyData)\n      .sort((a, b) => a.month.localeCompare(b.month))\n      .map(({ name, value, date }) => ({ name, value: parseFloat(value.toFixed(2)), date }));\n  } catch (error) {\n    console.error('Error calculating average order value trend:', error);\n    return [];\n  }\n};\n\n// Get geospatial data for mapping\nexport const getGeospatialData = (appointments) => {\n  // This would ideally use geocoding to convert addresses to coordinates\n  // For now, we'll return basic location data that could be used with a geocoding service\n  try {\n    return appointments\n      .filter(appointment => appointment.pickup && appointment.pickup.from)\n      .map(appointment => ({\n        id: appointment.appointmentId,\n        address: appointment.pickup.from,\n        city: CITY_MAPPING[appointment.cityId] || 'Unknown',\n        customerType: appointment.customerType,\n        status: appointment.status,\n        revenue: parseFloat(appointment.invoiceTotal || 0)\n      }));\n  } catch (error) {\n    console.error('Error extracting geospatial data:', error);\n    return [];\n  }\n};\n\n// Get customer retention metrics\nexport const getCustomerRetentionMetrics = (appointments) => {\n  try {\n    const customerOrders = {};\n    const customerFirstOrderDate = {};\n    const customerLastOrderDate = {};\n    \n    // Track orders per customer and their order dates\n    appointments.forEach(appointment => {\n      if (!appointment.customerId || !appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      const customerId = appointment.customerId;\n      try {\n        const orderDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Count orders\n        customerOrders[customerId] = (customerOrders[customerId] || 0) + 1;\n        \n        // Track first order date\n        if (!customerFirstOrderDate[customerId] || \n            orderDate < customerFirstOrderDate[customerId]) {\n          customerFirstOrderDate[customerId] = orderDate;\n        }\n        \n        // Track last order date\n        if (!customerLastOrderDate[customerId] || \n            orderDate > customerLastOrderDate[customerId]) {\n          customerLastOrderDate[customerId] = orderDate;\n        }\n      } catch (error) {\n        // Skip if date parsing fails\n      }\n    });\n    \n    // Calculate metrics\n    const totalCustomers = Object.keys(customerOrders).length;\n    const returningCustomers = Object.values(customerOrders).filter(count => count > 1).length;\n    const retentionRate = totalCustomers > 0 ? returningCustomers / totalCustomers : 0;\n    \n    // Average orders per customer\n    const averageOrdersPerCustomer = totalCustomers > 0 \n      ? Object.values(customerOrders).reduce((sum, count) => sum + count, 0) / totalCustomers\n      : 0;\n    \n    // Average time between first and last order (customer lifetime in days)\n    let totalLifetimeDays = 0;\n    let customersWithMultipleOrders = 0;\n    \n    Object.keys(customerOrders).forEach(customerId => {\n      if (customerOrders[customerId] > 1 && \n          customerFirstOrderDate[customerId] && \n          customerLastOrderDate[customerId]) {\n        const days = differenceInDays(\n          customerLastOrderDate[customerId],\n          customerFirstOrderDate[customerId]\n        );\n        if (days > 0) {\n          totalLifetimeDays += days;\n          customersWithMultipleOrders++;\n        }\n      }\n    });\n    \n    const averageCustomerLifetime = customersWithMultipleOrders > 0 \n      ? totalLifetimeDays / customersWithMultipleOrders \n      : 0;\n    \n    return {\n      totalCustomers,\n      returningCustomers,\n      retentionRate,\n      averageOrdersPerCustomer,\n      averageCustomerLifetime\n    };\n  } catch (error) {\n    console.error('Error calculating customer retention metrics:', error);\n    return {\n      totalCustomers: 0,\n      returningCustomers: 0,\n      retentionRate: 0,\n      averageOrdersPerCustomer: 0,\n      averageCustomerLifetime: 0\n    };\n  }\n};\n\n// Get customer to laundromat flow data (for Sankey diagrams)\nexport const getCustomerLaundromatFlow = (appointments) => {\n  try {\n    const flows = [];\n    const customerLaundromatRecords = {};\n    \n    // Create unique customer-laundromat pairs\n    appointments.forEach(appointment => {\n      if (!appointment.customerId || \n          !appointment.cleaning || \n          !appointment.cleaning.cleaner) return;\n      \n      const customerId = appointment.customerId;\n      const laundromatId = appointment.cleaning.cleaner;\n      const key = `${customerId}-${laundromatId}`;\n      \n      if (!customerLaundromatRecords[key]) {\n        customerLaundromatRecords[key] = {\n          customer: customerId,\n          laundromat: laundromatId,\n          count: 0\n        };\n      }\n      \n      customerLaundromatRecords[key].count++;\n    });\n    \n    // Convert to flow data suitable for Sankey diagrams\n    Object.values(customerLaundromatRecords).forEach(record => {\n      flows.push({\n        source: record.customer.substring(0, 8) + '...',\n        target: record.laundromat.substring(0, 8) + '...',\n        value: record.count\n      });\n    });\n    \n    // Filter to most significant flows for readability\n    return flows\n      .sort((a, b) => b.value - a.value)\n      .slice(0, 20);  // Limit to top 20 flows\n    \n  } catch (error) {\n    console.error('Error calculating customer-laundromat flow:', error);\n    return [];\n  }\n};\n\n// Get driver performance metrics\nexport const getDriverPerformanceMetrics = (appointments) => {\n  try {\n    const driverStats = {};\n    \n    // Process pickup and dropoff data\n    appointments.forEach(appointment => {\n      // Process pickup\n      if (appointment.pickup && appointment.pickup.driver) {\n        const driverId = appointment.pickup.driver;\n        \n        if (!driverStats[driverId]) {\n          driverStats[driverId] = {\n            id: driverId,\n            totalPickups: 0,\n            totalDropoffs: 0,\n            totalDistance: 0,\n            totalPay: 0,\n            completedPickups: 0,\n            completedDropoffs: 0,\n            cancelledServices: 0\n          };\n        }\n        \n        driverStats[driverId].totalPickups++;\n        \n        if (appointment.pickup.status === 'COMPLETED') {\n          driverStats[driverId].completedPickups++;\n        } else if (appointment.pickup.status === 'CANCELLED_BY_SELLER') {\n          driverStats[driverId].cancelledServices++;\n        }\n        \n        const distance = parseFloat(appointment.pickup.distance || 0);\n        if (!isNaN(distance)) {\n          driverStats[driverId].totalDistance += distance;\n        }\n        \n        const pay = parseFloat(appointment.pickup.basePay || 0);\n        if (!isNaN(pay)) {\n          driverStats[driverId].totalPay += pay;\n        }\n      }\n      \n      // Process dropoff\n      if (appointment.dropoff && appointment.dropoff.driver) {\n        const driverId = appointment.dropoff.driver;\n        \n        if (!driverStats[driverId]) {\n          driverStats[driverId] = {\n            id: driverId,\n            totalPickups: 0,\n            totalDropoffs: 0,\n            totalDistance: 0,\n            totalPay: 0,\n            completedPickups: 0,\n            completedDropoffs: 0,\n            cancelledServices: 0\n          };\n        }\n        \n        driverStats[driverId].totalDropoffs++;\n        \n        if (appointment.dropoff.status === 'COMPLETED') {\n          driverStats[driverId].completedDropoffs++;\n        } else if (appointment.dropoff.status === 'CANCELLED_BY_SELLER') {\n          driverStats[driverId].cancelledServices++;\n        }\n        \n        const distance = parseFloat(appointment.dropoff.distance || 0);\n        if (!isNaN(distance)) {\n          driverStats[driverId].totalDistance += distance;\n        }\n        \n        const pay = parseFloat(appointment.dropoff.basePay || 0);\n        if (!isNaN(pay)) {\n          driverStats[driverId].totalPay += pay;\n        }\n      }\n    });\n    \n    // Calculate derived metrics\n    Object.keys(driverStats).forEach(driverId => {\n      const stats = driverStats[driverId];\n      \n      stats.totalServices = stats.totalPickups + stats.totalDropoffs;\n      stats.completedServices = stats.completedPickups + stats.completedDropoffs;\n      stats.completionRate = stats.totalServices > 0 \n        ? stats.completedServices / stats.totalServices \n        : 0;\n      \n      stats.avgDistancePerService = stats.totalServices > 0 \n        ? stats.totalDistance / stats.totalServices \n        : 0;\n        \n      stats.avgPayPerDistance = stats.totalDistance > 0 \n        ? stats.totalPay / stats.totalDistance \n        : 0;\n    });\n    \n    return Object.values(driverStats);\n  } catch (error) {\n    console.error('Error calculating driver performance metrics:', error);\n    return [];\n  }\n};\n\n// Get seasonal trends\nexport const getSeasonalTrends = (appointments) => {\n  try {\n    const quarterlyData = {\n      Q1: { name: \"Q1 (Jan-Mar)\", orders: 0, revenue: 0 },\n      Q2: { name: \"Q2 (Apr-Jun)\", orders: 0, revenue: 0 },\n      Q3: { name: \"Q3 (Jul-Sep)\", orders: 0, revenue: 0 },\n      Q4: { name: \"Q4 (Oct-Dec)\", orders: 0, revenue: 0 }\n    };\n    \n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        const month = pickupDate.getMonth(); // 0-11\n        \n        let quarter;\n        if (month < 3) quarter = \"Q1\";\n        else if (month < 6) quarter = \"Q2\";\n        else if (month < 9) quarter = \"Q3\";\n        else quarter = \"Q4\";\n        \n        quarterlyData[quarter].orders++;\n        \n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        if (!isNaN(revenue)) {\n          quarterlyData[quarter].revenue += revenue;\n        }\n      } catch (error) {\n        // Skip if date parsing fails\n      }\n    });\n    \n    return Object.values(quarterlyData);\n  } catch (error) {\n    console.error('Error calculating seasonal trends:', error);\n    return [];\n  }\n};\n\n// Get weight distribution\nexport const getWeightDistribution = (appointments) => {\n  try {\n    const weightRanges = {\n      \"0-5kg\": { range: \"0-5kg\", count: 0 },\n      \"6-10kg\": { range: \"6-10kg\", count: 0 },\n      \"11-15kg\": { range: \"11-15kg\", count: 0 },\n      \"16-20kg\": { range: \"16-20kg\", count: 0 },\n      \"21-30kg\": { range: \"21-30kg\", count: 0 },\n      \"31kg+\": { range: \"31kg+\", count: 0 }\n    };\n    \n    appointments.forEach(appointment => {\n      if (!appointment.cleaning || \n          !appointment.cleaning.orderDetails ||\n          !appointment.cleaning.orderDetails.washFoldWeight) return;\n      \n      const weight = parseFloat(appointment.cleaning.orderDetails.washFoldWeight);\n      if (isNaN(weight)) return;\n      \n      let range;\n      if (weight <= 5) range = \"0-5kg\";\n      else if (weight <= 10) range = \"6-10kg\";\n      else if (weight <= 15) range = \"11-15kg\";\n      else if (weight <= 20) range = \"16-20kg\";\n      else if (weight <= 30) range = \"21-30kg\";\n      else range = \"31kg+\";\n      \n      weightRanges[range].count++;\n    });\n    \n    return Object.values(weightRanges);\n  } catch (error) {\n    console.error('Error calculating weight distribution:', error);\n    return [];\n  }\n};\n\n// Get London specific order locations for Google Maps\nexport const getLondonOrderLocations = (appointments) => {\n  try {\n    return appointments\n      .filter(appointment => \n        appointment.cityId === LONDON_CITY_ID &&\n        appointment.pickup && \n        appointment.pickup.to\n      )\n      .map(appointment => ({\n        id: appointment.appointmentId || Math.random().toString(36).substr(2, 9),\n        address: appointment.pickup.to,\n        customerType: appointment.customerType || 'Unknown',\n        revenue: parseFloat(appointment.invoiceTotal || 0) || 0,\n        date: appointment.pickup.serviceDate ? \n          format(parseISO(appointment.pickup.serviceDate), 'MM/dd/yyyy') : 'Unknown'\n      }));\n  } catch (error) {\n    console.error('Error extracting London order locations:', error);\n    return [];\n  }\n};\n\n// Normalize city IDs across different data formats\nexport const normalizeCityId = (appointment) => {\n  // Try different variations of city ID fields\n  const cityId = appointment.cityId || appointment.city_id || appointment.city;\n  \n  // If we have a valid city ID, return it\n  if (cityId && CITY_CENTERS[cityId]) {\n    return cityId;\n  }\n  \n  // Check if the city name matches any of our known city names\n  const cityName = appointment.city || appointment.cityName;\n  if (cityName) {\n    // Convert city name to city ID by finding the matching entry in CITY_MAPPING\n    for (const [id, name] of Object.entries(CITY_MAPPING)) {\n      if (name.toLowerCase() === cityName.toLowerCase()) {\n        return id;\n      }\n    }\n  }\n  \n  // Fallback to London if no valid city ID found\n  return LONDON_CITY_ID;\n};\n\nexport const getLaundromatLocations = async (appointments) => {\n  // Track laundromats by city\n  const laundromatsByCityId = {};\n  \n  // Extract unique city IDs from appointments\n  const cityIds = new Set();\n  appointments.forEach(app => {\n    const cityId = normalizeCityId(app);\n    if (cityId) cityIds.add(cityId);\n  });\n  \n  console.log(\"MAP DEBUG - getLaundromatLocations - City IDs:\", Array.from(cityIds));\n  \n  // If no city data found, use all cities\n  if (cityIds.size === 0) {\n    Object.keys(CITY_CENTERS).forEach(id => cityIds.add(id));\n    console.log(\"MAP DEBUG - No city IDs found, using all cities\");\n  }\n  \n  // Initialize laundromat data for each city\n  Array.from(cityIds).forEach(cityId => {\n    // If we have predefined laundromats for this city, use them\n    if (CITY_LAUNDROMATS[cityId]) {\n      laundromatsByCityId[cityId] = CITY_LAUNDROMATS[cityId].map(laundromat => ({\n        id: laundromat.id,\n        name: laundromat.name,\n        address: laundromat.address,\n        color: LAUNDROMAT_COLORS[cityId] || '#000000',\n        orders: [],\n        cityId: cityId\n      }));\n    }\n  });\n  \n  // Associate appointments with laundromats\n  appointments.forEach(appointment => {\n    const cityId = normalizeCityId(appointment);\n    const laundromatId = appointment.laundromat_id || appointment.laundromatId;\n    \n    if (!cityId || !laundromatsByCityId[cityId]) return;\n    \n    // Add this appointment to a random laundromat in this city\n    const randomIndex = Math.floor(Math.random() * laundromatsByCityId[cityId].length);\n    laundromatsByCityId[cityId][randomIndex].orders.push(appointment);\n  });\n  \n  // Flatten laundomats from all cities\n  const allLaundromats = Object.values(laundromatsByCityId).flat();\n  \n  console.log(`MAP DEBUG - getLaundromatLocations - Generated ${allLaundromats.length} laundromat locations`);\n  \n  // Add location data to laundromats\n  return allLaundromats.map(laundromat => {\n    const cityId = laundromat.cityId;\n    const cityCenter = CITY_CENTERS[cityId] || CITY_CENTERS['LYGRRATQ7EGG2'];\n    \n    // Find the predefined location by name\n    const locationInfo = LAUNDROMAT_LOCATIONS[laundromat.name];\n    \n    if (locationInfo && locationInfo.city === cityId) {\n      return {\n        ...laundromat,\n        lat: locationInfo.lat,\n        lng: locationInfo.lng\n      };\n    }\n    \n    // Generate a position in a circle around the city center\n    const angle = Math.random() * Math.PI * 2; // Random angle\n    const radius = 0.01 + Math.random() * 0.02; // 1-3km from center\n    const lat = cityCenter.lat + Math.cos(angle) * radius;\n    const lng = cityCenter.lng + Math.sin(angle) * radius;\n    \n    return {\n      ...laundromat,\n      lat,\n      lng\n    };\n  });\n};\n\nexport const getOrderLocations = async (appointments) => {\n  console.log(`MAP DEBUG - getOrderLocations - Starting with ${appointments.length} appointments`);\n  \n  // Check city distribution\n  const cityDistribution = appointments.reduce((acc, app) => {\n    const cityId = normalizeCityId(app);\n    acc[cityId] = (acc[cityId] || 0) + 1;\n    return acc;\n  }, {});\n  \n  console.log(\"MAP DEBUG - getOrderLocations - City distribution:\", cityDistribution);\n  \n  // Get a sample of appointments for display - increased to 500 to show more data\n  const sampleSize = Math.min(appointments.length, 500);  \n  const sampledAppointments = appointments.slice(0, sampleSize);\n  \n  // Extract unique city IDs\n  const cityIds = new Set();\n  sampledAppointments.forEach(app => {\n    const cityId = normalizeCityId(app);\n    if (cityId) cityIds.add(cityId);\n  });\n  \n  console.log(\"MAP DEBUG - getOrderLocations - Unique cities in sample:\", Array.from(cityIds));\n  \n  // Generate mock laundromat associations if needed\n  const laundromatsById = {};\n  const laundromatsByName = {};\n  \n  // Get laundromats for each city\n  Array.from(cityIds).forEach(cityId => {\n    if (CITY_LAUNDROMATS[cityId]) {\n      CITY_LAUNDROMATS[cityId].forEach(laundromat => {\n        laundromatsById[laundromat.id] = {\n          name: laundromat.name,\n          address: laundromat.address,\n          cityId: cityId,\n          color: LAUNDROMAT_COLORS[cityId] || '#000000'\n        };\n        laundromatsByName[laundromat.name] = {\n          id: laundromat.id,\n          address: laundromat.address,\n          cityId: cityId,\n          color: LAUNDROMAT_COLORS[cityId] || '#000000'\n        };\n      });\n    }\n  });\n  \n  const markers = sampledAppointments.map(appointment => {\n    const cityId = normalizeCityId(appointment);\n    const cityCenter = CITY_CENTERS[cityId] || CITY_CENTERS['LYGRRATQ7EGG2'];\n    \n    // Get or assign a laundromat for this order\n    let laundromatId = appointment.laundromat_id || appointment.laundromatId;\n    let laundromatName = null;\n    \n    if (!laundromatId && CITY_LAUNDROMATS[cityId]) {\n      // Assign a random laundromat from this city\n      const randomIndex = Math.floor(Math.random() * CITY_LAUNDROMATS[cityId].length);\n      laundromatId = CITY_LAUNDROMATS[cityId][randomIndex].id;\n      laundromatName = CITY_LAUNDROMATS[cityId][randomIndex].name;\n    } else if (laundromatId && laundromatsById[laundromatId]) {\n      laundromatName = laundromatsById[laundromatId].name;\n    }\n    \n    // Get laundromat color\n    const laundromatColor = \n      (laundromatsById[laundromatId]?.color) || \n      LAUNDROMAT_COLORS[cityId] || \n      '#000000';\n    \n    // Generate a random position based on the city center and laundromat location\n    let lat, lng;\n    \n    // Try to find the assigned laundromat location\n    const laundromatLocation = laundromatName ? LAUNDROMAT_LOCATIONS[laundromatName] : null;\n    \n    if (laundromatLocation) {\n      // Cluster around the laundromat location\n      const radius = 0.005 + Math.random() * 0.01; // 0.5-1.5km from laundromat (tighter clustering)\n      const angle = Math.random() * Math.PI * 2;\n      lat = laundromatLocation.lat + Math.cos(angle) * radius;\n      lng = laundromatLocation.lng + Math.sin(angle) * radius;\n    } else {\n      // Fallback to city-based distribution\n      const radius = 0.01 + Math.random() * 0.02; // 1-3km spread\n      const angle = Math.random() * Math.PI * 2;\n      lat = cityCenter.lat + Math.cos(angle) * radius;\n      lng = cityCenter.lng + Math.sin(angle) * radius;\n    }\n    \n    return {\n      lat,\n      lng,\n      laundromatColor,\n      cityId, // Add cityId to marker for debugging\n      orderDetails: {\n        customerType: appointment.customerType || appointment.customer_type || 'Unknown',\n        revenue: parseFloat(appointment.revenue || appointment.invoiceTotal || 0),\n        address: appointment.address || (appointment.pickup ? appointment.pickup.to : 'Unknown Address'),\n        laundromatId: laundromatId,\n        laundromatName: laundromatName,\n        city: CITY_MAPPING[cityId] || 'Unknown' // Add city name for debugging\n      }\n    };\n  });\n  \n  console.log(`MAP DEBUG - getOrderLocations - Generated ${markers.length} order markers`);\n  \n  return markers;\n}; ","/**\n * ProjectionImplementation.js\n * \n * This file contains a complete working implementation that you can directly \n * use in your dashboard to add realistic projections with minimal changes \n * to your existing codebase.\n */\n\n// Import formatDate utility if you don't already have it\nimport { format, addWeeks, parse, isValid } from 'date-fns';\n\n// City mapping and constants\nconst CITY_MAPPING = {\n  \"LYGRRATQ7EGG2\": \"London\",\n  \"L4NE8GPX89J3A\": \"Ottawa\",\n  \"LDK6Z980JTKXY\": \"Kitchener-Waterloo\",\n  \"LXMC6DWVJ5N7W\": \"Hamilton\",\n  \"LG0VGFKQ25XED\": \"Calgary\",\n  \"all\": \"All Cities\"\n};\n\n// City population data and growth factors - all increased to ensure positive growth\nconst CITY_DATA = {\n  \"LYGRRATQ7EGG2\": { // London\n    name: \"London\",\n    population: 400000,\n    yearlyGrowthFactor: 1.35, // Increased to 35% yearly growth for strong upward trend\n    operationalSince: new Date(\"2022-12-01\"),\n    marketMaturity: 0.15, // Reduced market maturity to allow stronger growth\n    minWeeklyOrders: 80 // Minimum weekly orders for projections\n  },\n  \"L4NE8GPX89J3A\": { // Ottawa\n    name: \"Ottawa\",\n    population: 1050000,\n    yearlyGrowthFactor: 1.28, // Increased to 28% yearly growth\n    operationalSince: new Date(\"2023-03-15\"),\n    marketMaturity: 0.35,\n    minWeeklyOrders: 35\n  },\n  \"LDK6Z980JTKXY\": { // Kitchener-Waterloo\n    name: \"Kitchener-Waterloo\",\n    population: 575000,\n    yearlyGrowthFactor: 1.32, // Increased to 32% yearly growth\n    operationalSince: new Date(\"2023-06-01\"),\n    marketMaturity: 0.30,\n    minWeeklyOrders: 40\n  }, \n  \"LXMC6DWVJ5N7W\": { // Hamilton\n    name: \"Hamilton\",\n    population: 570000,\n    yearlyGrowthFactor: 1.25, // Increased to 25% yearly growth\n    operationalSince: new Date(\"2023-09-10\"),\n    marketMaturity: 0.35,\n    minWeeklyOrders: 30\n  },\n  \"LG0VGFKQ25XED\": { // Calgary\n    name: \"Calgary\",\n    population: 1300000,\n    yearlyGrowthFactor: 1.40, // Increased to 40% yearly growth\n    operationalSince: new Date(\"2023-11-20\"),\n    marketMaturity: 0.20,\n    minWeeklyOrders: 25\n  }\n};\n\n// Weekly seasonality factors - more granular for weekly projections\nconst WEEKLY_SEASONALITY = {\n  0: 0.98,  // Week 1 of month\n  1: 1.00,  // Week 2 of month\n  2: 1.05,  // Week 3 of month\n  3: 1.08,  // Week 4 of month\n  4: 0.95,  // Week 5 of month (when applicable)\n};\n\n// Monthly seasonality factors \nconst MONTHLY_SEASONALITY = {\n  0: 0.95,  // January\n  1: 0.98,  // February\n  2: 1.02,  // March\n  3: 1.05,  // April\n  4: 1.08,  // May\n  5: 1.12,  // June\n  6: 1.10,  // July\n  7: 1.05,  // August\n  8: 1.10,  // September\n  9: 1.05,  // October\n  10: 1.00, // November\n  11: 0.98  // December\n};\n\n/**\n * Generate weekly projections for a given set of monthly orders data\n * \n * @param {Array} monthlyData - Array of monthly order data points in your existing format\n * @param {string} selectedCity - The currently selected city ID ('all' or a specific city ID)\n * @param {number} weeks - Number of weeks to project forward\n * @returns {Object} Combined historical and projected data with metrics\n */\nexport function generateProjections(monthlyData, selectedCity, weeks = 52) {\n  // Handle case where no data is available\n  if (!monthlyData || monthlyData.length === 0) {\n    return {\n      combined: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      }\n    };\n  }\n  \n  // Get historical data for the selected city - only use data until October\n  const historicalData = preprocessHistoricalData(monthlyData, selectedCity);\n  \n  // Filter out data after October 2024 for projection calculations\n  const cutoffDate = new Date(2024, 9, 31); // October 31, 2024\n  \n  const filteredHistoricalData = historicalData.filter(month => {\n    // Try to parse the date from month name (e.g., \"Oct 2024\")\n    let monthDate;\n    try {\n      const parts = month.name.split(' ');\n      const monthName = parts[0];\n      const year = parseInt(parts[1]);\n      \n      // Map month name to month number\n      const monthMap = {\n        'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n        'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n      };\n      \n      if (monthMap[monthName] !== undefined && !isNaN(year)) {\n        monthDate = new Date(year, monthMap[monthName], 1);\n      }\n    } catch (e) {\n      console.error(\"Error parsing date from month name:\", month.name, e);\n    }\n    \n    // Include the month if we couldn't parse the date or if it's before the cutoff\n    return !monthDate || monthDate <= cutoffDate;\n  });\n  \n  // Get the last data point as baseline\n  const lastHistoricalPoint = filteredHistoricalData.length > 0 \n    ? filteredHistoricalData[filteredHistoricalData.length - 1] \n    : historicalData[historicalData.length - 1];\n  \n  // If no valid data point exists, return empty result\n  if (!lastHistoricalPoint) {\n    return {\n      combined: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      }\n    };\n  }\n  \n  // Set up city-specific parameters\n  const cityParams = selectedCity !== 'all' ? CITY_DATA[selectedCity] : {\n    name: \"All Cities\",\n    yearlyGrowthFactor: 1.28, // Increased default growth factor\n    marketMaturity: 0.25, // Reduced market maturity\n    minWeeklyOrders: 85\n  };\n  \n  // Extract base information from last historical point\n  let baseMonthlyOrders = lastHistoricalPoint.orders;\n  \n  // Convert monthly orders to approximate weekly orders\n  let baseWeeklyOrders = baseMonthlyOrders / 4.3;\n  \n  // Ensure base weekly orders meet the minimum for city\n  baseWeeklyOrders = Math.max(baseWeeklyOrders, cityParams.minWeeklyOrders || 20);\n  \n  // Calculate a more appropriate baseline - use average of data until Oct\n  let baselineForGrowth;\n  if (filteredHistoricalData.length >= 3) {\n    // Calculate average excluding any extreme outliers\n    const values = filteredHistoricalData.map(m => m.orders);\n    const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n    \n    // For weekly conversion\n    baselineForGrowth = avg / 4.3;\n    \n    // Ensure it meets minimum\n    baselineForGrowth = Math.max(baselineForGrowth, cityParams.minWeeklyOrders || 20);\n  } else {\n    baselineForGrowth = baseWeeklyOrders;\n  }\n  \n  // Parse the month and year from the last data point\n  const monthNameMap = {\n    'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n    'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n  };\n  \n  // Parse month and year\n  const [monthName, yearStr] = lastHistoricalPoint.name.split(' ');\n  const startMonth = monthNameMap[monthName];\n  const startYear = parseInt(yearStr);\n  \n  let startDate = new Date(startYear, startMonth, 15); // Middle of the month\n  \n  // Set current date as today unless using filtered data\n  const currentDate = new Date();\n  \n  // Calculate weekly growth factor\n  const yearlyGrowthFactor = cityParams.yearlyGrowthFactor || 1.28;\n  const weeklyGrowthFactor = Math.pow(yearlyGrowthFactor, 1/52);\n  \n  // Adjust for market maturity - with reduced impact\n  const maturityFactor = 1 - (cityParams.marketMaturity || 0.25) * 0.15; \n  const adjustedWeeklyGrowth = weeklyGrowthFactor * maturityFactor;\n  \n  // Generate projected data\n  const projectedData = [];\n  let currentOrders = baseWeeklyOrders;\n  \n  // For projections, start from today's date and project forward\n  let projectionStartDate = new Date();\n  \n  for (let i = 0; i < weeks; i++) {\n    // Calculate date for this week\n    const weekDate = addWeeks(projectionStartDate, i);\n    const weekOfMonth = Math.floor(weekDate.getDate() / 7);\n    const month = weekDate.getMonth();\n    \n    // Apply growth factor (compounding weekly)\n    currentOrders *= adjustedWeeklyGrowth;\n    \n    // Apply weekly and monthly seasonality\n    const weeklyFactor = WEEKLY_SEASONALITY[weekOfMonth] || 1;\n    const monthlyFactor = MONTHLY_SEASONALITY[month] || 1;\n    currentOrders *= weeklyFactor * monthlyFactor;\n    \n    // Apply small random variation\n    const variation = 1 + (Math.random() * 0.03 - 0.015); // Small random factor\n    currentOrders *= variation;\n    \n    // Ensure orders never fall below minimum\n    currentOrders = Math.max(currentOrders, cityParams.minWeeklyOrders || 20);\n    \n    // Format date and add to projections\n    const formattedDate = format(weekDate, 'MMM d, yyyy');\n    const shortDate = format(weekDate, 'MMM d');\n    projectedData.push({\n      name: shortDate,\n      fullname: formattedDate,\n      orders: Math.round(currentOrders),\n      projected: true,\n      month: format(weekDate, 'yyyy-MM'),\n      week: format(weekDate, 'yyyy-MM-dd')\n    });\n  }\n  \n  // Generate weekly historical data points\n  const weeklyHistoricalData = generateWeeklyHistoricalPoints(historicalData);\n  \n  // Calculate metrics\n  const totalOrders = projectedData.reduce((sum, week) => sum + week.orders, 0);\n  const totalOrdersMonthly = totalOrders / 4.3; // Convert weekly to monthly equivalent\n  const avgWeeklyOrders = totalOrders / projectedData.length;\n  \n  // Calculate growth percentage using our adjusted baseline\n  const growthPercent = ((avgWeeklyOrders / baselineForGrowth) - 1) * 100;\n  \n  // Combine historical and projected data\n  const combined = [\n    ...weeklyHistoricalData.map(week => ({\n      ...week,\n      projected: false\n    })),\n    ...projectedData\n  ];\n  \n  return {\n    combined,\n    weeklyHistoricalData,\n    projectedData,\n    metrics: {\n      totalAnnualOrders: Math.round(totalOrdersMonthly * 12),\n      averageMonthlyOrders: Math.round(avgWeeklyOrders * 4.3),\n      averageWeeklyOrders: Math.round(avgWeeklyOrders),\n      projectedGrowthPercent: growthPercent,\n      cityName: CITY_MAPPING[selectedCity] || 'Unknown'\n    }\n  };\n}\n\n/**\n * Generate weekly data points from monthly data\n */\nfunction generateWeeklyHistoricalPoints(monthlyData) {\n  if (!monthlyData || monthlyData.length < 2) return monthlyData;\n  \n  const weeklyData = [];\n  \n  // For each month, generate 4-5 weekly points\n  for (let i = 0; i < monthlyData.length; i++) {\n    const month = monthlyData[i];\n    \n    // Parse month and year\n    const parts = month.name.split(' ');\n    const monthName = parts[0];\n    const year = parseInt(parts[1]);\n    \n    // Map month name to month number\n    const monthMap = {\n      'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n      'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n    };\n    \n    if (monthMap[monthName] === undefined || isNaN(year)) {\n      // If we can't parse the date, just add the month as is\n      weeklyData.push(month);\n      continue;\n    }\n    \n    const monthNumber = monthMap[monthName];\n    const baseDate = new Date(year, monthNumber, 1);\n    \n    // Number of weeks in this month (usually 4, sometimes 5)\n    const daysInMonth = new Date(year, monthNumber + 1, 0).getDate();\n    const weeksInMonth = Math.ceil(daysInMonth / 7);\n    \n    // Get next month's data for interpolation if available\n    const nextMonth = monthlyData[i + 1];\n    let nextMonthOrders = month.orders;\n    if (nextMonth) {\n      nextMonthOrders = nextMonth.orders;\n    }\n    \n    // Calculate weekly distribution based on general patterns\n    // This creates a natural-looking curve between months\n    for (let week = 0; week < weeksInMonth; week++) {\n      // Calculate week's date\n      const weekDay = Math.min(week * 7 + 1, daysInMonth);\n      const weekDate = new Date(year, monthNumber, weekDay);\n      \n      // Calculate position within month (0-1)\n      const position = week / weeksInMonth;\n      \n      // Interpolate between current and next month\n      let weekOrders;\n      if (i < monthlyData.length - 1) {\n        // Linear interpolation between months\n        weekOrders = month.orders * (1 - position) + nextMonthOrders * position;\n      } else {\n        // For the last month, create a gentle trend\n        const factor = 1 + (position - 0.5) * 0.1; // -5% to +5% variation\n        weekOrders = month.orders * factor;\n      }\n      \n      // Apply weekly pattern\n      const weekFactor = WEEKLY_SEASONALITY[week] || 1;\n      weekOrders *= weekFactor;\n      \n      // Add small random variation\n      const randomFactor = 1 + (Math.random() * 0.04 - 0.02); // ±2% random variation\n      weekOrders *= randomFactor;\n      \n      // Format date\n      const shortDate = format(weekDate, 'MMM d');\n      const formattedDate = format(weekDate, 'MMM d, yyyy');\n      \n      weeklyData.push({\n        name: shortDate,\n        fullname: formattedDate,\n        orders: Math.round(weekOrders / weeksInMonth),  // Distribute monthly orders\n        month: format(weekDate, 'yyyy-MM'),\n        week: format(weekDate, 'yyyy-MM-dd'),\n        projected: false\n      });\n    }\n  }\n  \n  return weeklyData;\n}\n\n/**\n * Preprocess historical data to extract the relevant city data\n * \n * @param {Array} monthlyData - Raw monthly data in your existing format\n * @param {string} selectedCity - Selected city ID\n * @returns {Array} Processed historical data for the selected city\n */\nfunction preprocessHistoricalData(monthlyData, selectedCity) {\n  if (!monthlyData || monthlyData.length === 0) return [];\n  \n  // Get city name from mapping\n  const cityName = CITY_MAPPING[selectedCity] || selectedCity;\n  \n  // Extract data for this city\n  return monthlyData\n    .filter(month => {\n      // For 'all' city, use total; otherwise use city-specific data\n      if (selectedCity === 'all') {\n        return month.total !== undefined || \n               Object.values(CITY_MAPPING)\n                 .filter(name => name !== 'All Cities')\n                 .some(name => month[name] !== undefined);\n      } else {\n        return month[cityName] !== undefined;\n      }\n    })\n    .map(month => {\n      // For 'all' city, use total or calculate it\n      let orders;\n      if (selectedCity === 'all') {\n        if (month.total !== undefined) {\n          orders = month.total;\n        } else {\n          // Calculate total from all cities\n          orders = Object.values(CITY_MAPPING)\n            .filter(name => name !== 'All Cities')\n            .reduce((sum, name) => sum + (month[name] || 0), 0);\n        }\n      } else {\n        orders = month[cityName] || 0;\n      }\n      \n      return {\n        name: month.name,\n        orders: orders,\n        month: month.month || null,\n        // Preserve any other properties you need\n        date: month.date || null\n      };\n    })\n    .filter(month => month.orders > 0); // Filter out months with no orders\n}\n\n/**\n * Function to add projections to your existing Dashboard component\n * \n * @param {Array} monthlyOrdersTrend - Your monthly order data\n * @param {string} selectedCity - Currently selected city\n * @returns {Object} Projection data that can be used in your UI\n */\nexport function addProjectionsToComponent(monthlyOrdersTrend, selectedCity) {\n  try {\n    // Generate projections - these will now be weekly\n    const projectionData = generateProjections(monthlyOrdersTrend, selectedCity);\n    \n    return {\n      // Combined historical + projected data for charts\n      combinedOrderTrend: projectionData.combined,\n      \n      // Historical weekly data\n      weeklyHistoricalData: projectionData.weeklyHistoricalData,\n      \n      // Just the projected portion\n      projectedData: projectionData.projectedData,\n      \n      // Metrics for display in cards\n      metrics: projectionData.metrics,\n      \n      // Reference line position (typically today's date)\n      referenceDate: format(new Date(), 'MMM d')\n    };\n  } catch (error) {\n    console.error(\"Error generating projections:\", error);\n    return {\n      combinedOrderTrend: [],\n      weeklyHistoricalData: [],\n      projectedData: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      },\n      referenceDate: format(new Date(), 'MMM d')\n    };\n  }\n} ","import React, { useState, useEffect, useMemo } from 'react';\nimport { \n  Box, Container, Grid, Paper, Typography, \n  AppBar, Toolbar, MenuItem,\n  FormControl, InputLabel, Select,\n  CircularProgress, TextField\n} from '@mui/material';\nimport {\n  BarChart, LineChart, PieChart, ComposedChart,\n  Bar, Line, Pie, Area, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, Cell, ResponsiveContainer, ReferenceLine\n} from 'recharts';\nimport { subMonths, format, addMonths } from 'date-fns';\nimport GoogleMapReact from 'google-map-react';\n// Import Lucide React icons for modern UI\nimport Icon from '@mui/material/Icon';\n// Import animation components\nimport { Fade, Grow } from '@mui/material';\nimport { formatDistance, isWithinInterval, startOfDay, endOfDay, isAfter, isBefore } from 'date-fns';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport QuarterlyGrowthByCity from './QuarterlyGrowthByCity';\n\n// Import data utilities\nimport {\n  processAppointmentsData,\n  getCityStatistics,\n  getLaundromatStatistics,\n  getCustomerTypeDistribution,\n  getMonthlyOrdersTrend,\n  getAvgOrderValueTrend,\n  getCustomerRetentionMetrics,\n  getDriverPerformanceMetrics,\n  getSeasonalTrends,\n  getWeightDistribution,\n  LONDON_CITY_ID,\n  getLaundromatLocations,\n  getOrderLocations,\n  CITY_MAPPING,\n  CITY_CENTERS,\n  CITY_LAUNDROMATS,\n  normalizeCityId,\n  LAUNDROMAT_COLORS\n} from '../utils/dataProcessor';\nimport { addProjectionsToComponent } from '../utils/ProjectionImplementation';\n\n// Import custom components\nimport MetricCard from './MetricCard';\nimport Marker from './Marker';\n\n// Chart colors - updated with modern palette\nconst COLORS = ['#1E88E5', '#26A69A', '#FFA726', '#EF5350', '#AB47BC', '#66BB6A', '#EC407A'];\n\nconst Dashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [appointments, setAppointments] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(LONDON_CITY_ID);\n  const [startDate, setStartDate] = useState(subMonths(new Date(), 12));\n  const [endDate, setEndDate] = useState(new Date());\n  const [mapMarkers, setMapMarkers] = useState([]);\n  const [laundromatLocations, setLaundromatLocations] = useState([]);\n\n  // Filter options\n  const [customerTypeFilter, setCustomerTypeFilter] = useState('all');\n  const [laundromatFilter, setLaundromatFilter] = useState('all');\n\n  // Update the map center when city changes\n  const [mapCenter, setMapCenter] = useState(null);\n  const [mapZoom, setMapZoom] = useState(11);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapsApi, setMapsApi] = useState(null);\n\n  // Map laundromat IDs to names based on address comparison\n  const laundromatIdToNameMap = useMemo(() => {\n    const idMap = {};\n    \n    // First create a mapping of locations from our predefined data\n    const knownLocations = {};\n    Object.keys(CITY_LAUNDROMATS).forEach(cityId => {\n      CITY_LAUNDROMATS[cityId].forEach(laundromat => {\n        knownLocations[laundromat.address] = laundromat.name;\n      });\n    });\n    \n    // Analyze appointment data to match cleaners to locations\n    const laundromatAddresses = {};\n    appointments.forEach(appointment => {\n      if (appointment.cleaning && appointment.cleaning.cleaner && appointment.pickup && appointment.pickup.to) {\n        const cleanerId = appointment.cleaning.cleaner;\n        const address = appointment.pickup.to;\n        \n        if (!laundromatAddresses[cleanerId]) {\n          laundromatAddresses[cleanerId] = {};\n        }\n        \n        // Count frequency of addresses for this cleaner\n        laundromatAddresses[cleanerId][address] = (laundromatAddresses[cleanerId][address] || 0) + 1;\n      }\n    });\n    \n    // For each laundromat ID, find most common address and match to our known locations\n    Object.keys(laundromatAddresses).forEach(cleanerId => {\n      const addresses = laundromatAddresses[cleanerId];\n      let mostCommonAddress = null;\n      let maxCount = 0;\n      \n      // Find most common address\n      Object.keys(addresses).forEach(address => {\n        if (addresses[address] > maxCount) {\n          mostCommonAddress = address;\n          maxCount = addresses[address];\n        }\n      });\n      \n      // Direct mapping if exact match\n      if (mostCommonAddress && knownLocations[mostCommonAddress]) {\n        idMap[cleanerId] = knownLocations[mostCommonAddress];\n        return;\n      }\n      \n      // Fuzzy matching for addresses\n      let bestMatch = null;\n      let bestScore = 0;\n      \n      // For each known location, calculate similarity with most common address\n      Object.keys(knownLocations).forEach(knownAddress => {\n        // Simple similarity score based on common words in address\n        const knownWords = knownAddress.toLowerCase().split(/[,\\s]+/);\n        const actualWords = mostCommonAddress ? mostCommonAddress.toLowerCase().split(/[,\\s]+/) : [];\n        \n        let matches = 0;\n        actualWords.forEach(word => {\n          if (word.length > 2 && knownWords.includes(word)) {\n            matches++;\n          }\n        });\n        \n        const score = matches / Math.max(knownWords.length, actualWords.length);\n        if (score > bestScore) {\n          bestScore = score;\n          bestMatch = knownLocations[knownAddress];\n        }\n      });\n      \n      // If good match found, use it\n      if (bestMatch && bestScore > 0.3) {\n        idMap[cleanerId] = bestMatch;\n      } else {\n        // Fallback based on common frequencies between cities and cleaners\n        const cityFrequency = {};\n        appointments.forEach(appointment => {\n          if (appointment.cleaning && appointment.cleaning.cleaner === cleanerId && appointment.cityId) {\n            cityFrequency[appointment.cityId] = (cityFrequency[appointment.cityId] || 0) + 1;\n          }\n        });\n        \n        // Find most common city for this cleaner\n        let mostCommonCity = null;\n        let maxCityCount = 0;\n        Object.keys(cityFrequency).forEach(cityId => {\n          if (cityFrequency[cityId] > maxCityCount) {\n            maxCityCount = cityFrequency[cityId];\n            mostCommonCity = cityId;\n          }\n        });\n        \n        // Assign a name based on city and ID\n        if (mostCommonCity && CITY_LAUNDROMATS[mostCommonCity] && CITY_LAUNDROMATS[mostCommonCity].length > 0) {\n          const cityName = CITY_MAPPING[mostCommonCity];\n          const cleanerIndex = Object.keys(laundromatAddresses).indexOf(cleanerId) % CITY_LAUNDROMATS[mostCommonCity].length;\n          idMap[cleanerId] = CITY_LAUNDROMATS[mostCommonCity][cleanerIndex].name;\n        } else {\n          // Last resort - truncate ID for display\n          idMap[cleanerId] = `Laundromat ${cleanerId.substring(0, 8)}`;\n        }\n      }\n    });\n    \n    // Manual override for most common IDs based on the list shown\n    idMap[\"q8dvkNhc9ZbCswGUbllUdoqOr6J3\"] = \"Tommy Suds\";\n    idMap[\"Z1qpZ7LByNWjT4QmjxZdCgEQogH3\"] = \"London Sudz\";\n    idMap[\"yXwnUIE3EPX1sSfpot3rw5MbbVs1\"] = \"Royal City Cleaners\";\n    idMap[\"hchYpbQECAQk2e2eyruUTxU8YP42\"] = \"Browns\";\n    \n    return idMap;\n  }, [appointments]);\n\n  // Process JSON data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Attempting to fetch data...');\n        const response = await fetch('/appointments.json');\n        console.log('Response status:', response.status);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Data loaded successfully, total records:', data.length);\n        \n        // Log a sample record without trying to process dates yet\n        if (data.length > 0) {\n          const sample = data[0];\n          console.log('Sample record:', sample);\n          console.log('Date fields found:', {\n            serviceDate: sample.pickup?.serviceDate,\n            service_date: sample.service_date,\n            createdAt: sample.createdAt,\n            updatedAt: sample.updatedAt\n          });\n        }\n        \n        // Safely determine date range\n        try {\n          const validDates = data\n            .map(d => {\n              try {\n                // Check all possible date fields\n                const dateStr = \n                  d.pickup?.serviceDate || \n                  d.service_date ||\n                  d.createdAt ||\n                  d.updatedAt;\n                \n                if (!dateStr) return null;\n                const date = new Date(dateStr);\n                return isNaN(date.getTime()) ? null : date;\n              } catch (e) {\n                return null;\n              }\n            })\n            .filter(date => date !== null);\n          \n          if (validDates.length > 0) {\n            const earliest = new Date(Math.min(...validDates.map(d => d.getTime())));\n            const latest = new Date(Math.max(...validDates.map(d => d.getTime())));\n            console.log('Date range:', {\n              earliest: earliest.toISOString(),\n              latest: latest.toISOString()\n            });\n            \n            // Set date range based on the actual data\n            if (earliest < startDate) {\n              setStartDate(earliest);\n            }\n            if (latest < endDate) {\n              setEndDate(latest);\n            }\n          } else {\n            console.log('No valid dates found in the data');\n          }\n        } catch (dateError) {\n          console.error('Error calculating date range:', dateError);\n        }\n        \n        setAppointments(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        console.log('Trying fallback data...');\n        // Create some sample fallback data for testing\n        const fallbackData = Array.from({length: 50}, (_, i) => ({\n          id: `sample-${i}`,\n          city_id: 'LYGRRATQ7EGG2',\n          customer_type: i % 2 === 0 ? 'Residential' : 'Commercial',\n          laundromat_id: 'LYGRRATQ7EGG' + Math.floor(i / 10),\n          laundromat_name: `Laundromat ${Math.floor(i / 10)}`,\n          revenue: 20 + Math.random() * 80,\n          address: `${100 + i} Richmond St, London, Ontario`,\n          pickup: {\n            serviceDate: new Date(2023, 9, i % 30 + 1).toISOString()\n          }\n        }));\n        console.log('Using fallback data:', fallbackData.length, 'records');\n        setAppointments(fallbackData);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Update map center when city changes\n  useEffect(() => {\n    console.log(\"City changed to:\", selectedCity, \"Setting map center:\", CITY_CENTERS[selectedCity]);\n    if (selectedCity === 'all') {\n      // Default to London for 'all cities' view but at a lower zoom\n      setMapCenter(CITY_CENTERS.LYGRRATQ7EGG2);\n      setMapZoom(8);\n    } else {\n      setMapCenter(CITY_CENTERS[selectedCity]);\n      setMapZoom(11);\n    }\n  }, [selectedCity]);\n\n  // Reset the map center if user changes city\n  useEffect(() => {\n    if (mapInstance && mapCenter) {\n      console.log(\"Panning map to:\", mapCenter, \"with zoom:\", mapZoom);\n      mapInstance.panTo(mapCenter);\n      mapInstance.setZoom(mapZoom);\n    }\n  }, [mapCenter, mapZoom, mapInstance]);\n\n  // Enhanced map data loading with better debugging\n  useEffect(() => {\n    const loadMapData = async () => {\n      if (!appointments.length) return;\n\n      // Enhanced debug logging for orders\n      console.log('MAP DEBUG - Total orders:', appointments.length);\n      const cityOrderCounts = appointments.reduce((acc, app) => {\n        const cityId = normalizeCityId(app);\n        acc[cityId] = (acc[cityId] || 0) + 1;\n        return acc;\n      }, {});\n      console.log('MAP DEBUG - Orders by city:', cityOrderCounts);\n      console.log('MAP DEBUG - Currently selected city:', selectedCity);\n      \n      // Debug: Check a sample appointment to verify cityId field\n      if (appointments.length > 0) {\n        const sample = appointments[0];\n        console.log('MAP DEBUG - Sample appointment:', {\n          id: sample.id || sample.appointmentId,\n          cityId: sample.cityId,\n          city_id: sample.city_id,\n          city: sample.city,\n          normalizedCityId: normalizeCityId(sample)\n        });\n      }\n\n      // Filter by cityId with extra logging\n      const filteredAppointments = selectedCity === 'all'\n        ? appointments\n        : appointments.filter(app => {\n            const normalizedCityId = normalizeCityId(app);\n            const matches = normalizedCityId === selectedCity;\n            // Log a sample of matches/non-matches\n            if (appointments.indexOf(app) < 5) {\n              console.log(`MAP DEBUG - App ${app.id || app.appointmentId}: cityId=${app.cityId}, normalizedCityId=${normalizedCityId}, matches=${matches}`);\n            }\n            return matches;\n          });\n      \n      console.log(`MAP DEBUG - After filtering, ${filteredAppointments.length} appointments match the selected city`);\n\n      // Get laundromat locations - filter by city if not 'all'\n      const laundromats = await getLaundromatLocations(filteredAppointments);\n      console.log('MAP DEBUG - Laundromat locations:', laundromats);\n      setLaundromatLocations(laundromats);\n\n      // Get order locations with laundromat association - filter by city if not 'all'\n      const orders = await getOrderLocations(filteredAppointments);\n      console.log('MAP DEBUG - Order locations:', orders);\n      setMapMarkers(orders);\n    };\n\n    loadMapData();\n  }, [appointments, selectedCity]);\n\n  // Generate a list of months for the selector\n  const monthOptions = useMemo(() => {\n    const options = [];\n    const currentDate = new Date();\n    // Exclude current month (March 2024 as per user request)\n    const endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n    \n    // Go back 24 months\n    for (let i = 0; i < 24; i++) {\n      const date = new Date(endDate.getFullYear(), endDate.getMonth() - i, 1);\n      options.push({\n        value: { month: date.getMonth(), year: date.getFullYear() },\n        label: date.toLocaleString('default', { month: 'long', year: 'numeric' })\n      });\n    }\n    return options;\n  }, []);\n\n  // Filtered appointments based on selections\n  const filteredAppointments = useMemo(() => {\n    console.log(\"Filtering appointments with:\", {\n      totalAppointments: appointments.length,\n      selectedCity,\n      startDate: startDate.toISOString(),\n      endDate: endDate.toISOString(),\n      customerTypeFilter,\n      sampleAppointment: appointments[0]\n    });\n    \n    const filtered = appointments.filter(appointment => {\n      // Debug a sample appointment to see its structure\n      if (appointment.id === appointments[0]?.id) {\n        console.log(\"Sample appointment structure:\", appointment);\n      }\n      \n      // Filter by city (using cityId instead of city_id)\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) {\n        return false;\n      }\n      \n      // Filter by customer type\n      if (customerTypeFilter !== 'all' && appointment.customerType !== customerTypeFilter) {\n        return false;\n      }\n      \n      // Filter by laundromat\n      if (laundromatFilter !== 'all' && \n          (!appointment.cleaning || appointment.cleaning.cleaner !== laundromatFilter)) {\n        return false;\n      }\n      \n      // Try all possible date fields\n      let inDateRange = false;\n      let dateChecked = false;\n\n      // Check pickup.serviceDate\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        dateChecked = true;\n        try {\n          const pickupDate = new Date(appointment.pickup.serviceDate);\n          \n          // Log some sample dates to debug\n          if (appointment.id === appointments[0]?.id || appointment.appointmentId === appointments[0]?.appointmentId) {\n            console.log(\"Parsed pickup date:\", pickupDate);\n            console.log(\"Start date:\", startDate);\n            console.log(\"End date:\", endDate);\n            console.log(\"Is in range:\", !(pickupDate < startDate || pickupDate > endDate));\n          }\n          \n          if (!(pickupDate < startDate || pickupDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing date:\", appointment.pickup.serviceDate, error);\n        }\n      }\n      \n      // Check service_date if we haven't found a valid date yet\n      if (!inDateRange && appointment.service_date) {\n        dateChecked = true;\n        try {\n          const serviceDate = new Date(appointment.service_date);\n          if (!(serviceDate < startDate || serviceDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing service_date:\", appointment.service_date, error);\n        }\n      }\n      \n      // Check createdAt as fallback\n      if (!inDateRange && appointment.createdAt) {\n        dateChecked = true;\n        try {\n          const createdDate = new Date(appointment.createdAt);\n          if (!(createdDate < startDate || createdDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing createdAt:\", appointment.createdAt, error);\n        }\n      }\n      \n      // If we checked dates but none were in range, filter out this appointment\n      if (dateChecked && !inDateRange) {\n        return false;\n      }\n      \n      return true;\n    });\n    \n    console.log(\"Filtered appointments:\", filtered.length);\n    return filtered;\n  }, [appointments, selectedCity, customerTypeFilter, laundromatFilter, startDate, endDate]);\n\n  // Compute metrics based on filtered data\n  const cityStats = useMemo(() => getCityStatistics(filteredAppointments), [filteredAppointments]);\n  const laundromatStats = useMemo(() => {\n    // Get basic laundromat statistics\n    const stats = getLaundromatStatistics(filteredAppointments);\n    \n    // Calculate a simpler retention metric - returning customers as percentage of total customers\n    return stats.map(laundromat => {\n      // Simple retention rate - percentage of customers that return\n      const simpleRetentionRate = laundromat.customers > 0 \n        ? (laundromat.returningCustomers / laundromat.customers)\n        : 0;\n        \n      return {\n        ...laundromat,\n        retentionRate: simpleRetentionRate\n      };\n    });\n  }, [filteredAppointments]);\n  \n  const customerTypeDistribution = useMemo(() => getCustomerTypeDistribution(filteredAppointments), [filteredAppointments]);\n  const monthlyOrdersTrend = useMemo(() => {\n    // If 'all' is selected, show data for all cities, otherwise filter by selected city\n    const filteredAppointments = selectedCity === 'all' \n      ? appointments \n      : appointments.filter(a => a.cityId === selectedCity);\n      \n    const trends = getMonthlyOrdersTrend(filteredAppointments, 12);\n    \n    // Filter out March data (or current month)\n    const currentDate = new Date();\n    return trends.filter(month => {\n      const monthDate = new Date(month.date);\n      return !(monthDate.getMonth() === currentDate.getMonth() && \n               monthDate.getFullYear() === currentDate.getFullYear());\n    });\n  }, [appointments, selectedCity]);\n  \n  const avgOrderValueTrend = useMemo(() => {\n    // If 'all' is selected, show data for all cities, otherwise filter by selected city\n    const filteredAppointments = selectedCity === 'all' \n      ? appointments \n      : appointments.filter(a => a.cityId === selectedCity);\n      \n    const trends = getAvgOrderValueTrend(filteredAppointments, 12);\n    \n    // Filter out March data (or current month)\n    const currentDate = new Date();\n    return trends.filter(month => {\n      const monthDate = new Date(month.date);\n      return !(monthDate.getMonth() === currentDate.getMonth() && \n               monthDate.getFullYear() === currentDate.getFullYear());\n    });\n  }, [appointments, selectedCity]);\n  \n  const customerRetention = useMemo(() => getCustomerRetentionMetrics(filteredAppointments), [filteredAppointments]);\n  const driverPerformance = useMemo(() => getDriverPerformanceMetrics(filteredAppointments), [filteredAppointments]);\n  const seasonalTrends = useMemo(() => getSeasonalTrends(filteredAppointments), [filteredAppointments]);\n  const weightDistribution = useMemo(() => getWeightDistribution(filteredAppointments), [filteredAppointments]);\n\n  // London-specific orders data for Google Maps\n  const londonOrders = useMemo(() => {\n    return appointments.filter(app => app.cityId === LONDON_CITY_ID).map(app => {\n      // Extract address information for Google Maps\n      let address = '';\n      if (app.pickup && app.pickup.to) {\n        address = app.pickup.to;\n      }\n      return {\n        id: app.appointmentId,\n        address,\n        customerType: app.customerType || 'Unknown',\n        revenue: parseFloat(app.invoiceTotal || 0)\n      };\n    });\n  }, [appointments]);\n\n  // Get aggregate metrics\n  const aggregateMetrics = useMemo(() => {\n    return {\n      totalOrders: filteredAppointments.length,\n      totalRevenue: filteredAppointments.reduce((sum, appointment) => {\n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        return sum + (isNaN(revenue) ? 0 : revenue);\n      }, 0),\n      totalCustomers: new Set(filteredAppointments.map(a => a.customerId).filter(Boolean)).size,\n      totalLaundromats: new Set(filteredAppointments\n        .filter(a => a.cleaning && a.cleaning.cleaner)\n        .map(a => a.cleaning.cleaner)).size,\n      avgOrderValue: filteredAppointments.length > 0 ? \n        (filteredAppointments.reduce((sum, appointment) => {\n          const revenue = parseFloat(appointment.invoiceTotal || 0);\n          return sum + (isNaN(revenue) ? 0 : revenue);\n        }, 0) / filteredAppointments.length) : 0,\n      avgWeight: filteredAppointments\n        .filter(a => a.cleaning && a.cleaning.orderDetails && a.cleaning.orderDetails.washFoldWeight)\n        .reduce((sum, a, idx, arr) => {\n          const weight = parseFloat(a.cleaning.orderDetails.washFoldWeight);\n          return idx === arr.length - 1 ? \n            (sum + weight) / arr.length : \n            sum + weight;\n        }, 0)\n    };\n  }, [filteredAppointments]);\n\n  // Calculate monthly retention rate trend\n  const retentionRateTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyAppointments = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        const monthKey = format(date, 'yyyy-MM');\n        const monthName = format(date, 'MMM yyyy');\n        \n        if (!monthlyAppointments[monthKey]) {\n          monthlyAppointments[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: date,\n            appointments: [],\n            customers: new Set(),\n            returningCustomers: new Set()\n          };\n        }\n        \n        monthlyAppointments[monthKey].appointments.push(appointment);\n        \n        // Add customer to this month's unique customers\n        if (appointment.customerId) {\n          monthlyAppointments[monthKey].customers.add(appointment.customerId);\n          \n          // Check if this customer has appeared in previous months\n          const isReturning = Object.keys(monthlyAppointments)\n            .filter(m => m !== monthKey && new Date(monthlyAppointments[m].date) < date)\n            .some(m => monthlyAppointments[m].customers.has(appointment.customerId));\n          \n          if (isReturning) {\n            monthlyAppointments[monthKey].returningCustomers.add(appointment.customerId);\n          }\n        }\n      }\n    });\n    \n    // Calculate retention rate for each month\n    return Object.values(monthlyAppointments)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        customers: month.customers.size,\n        returningCustomers: month.returningCustomers.size,\n        retentionRate: month.customers.size > 0 ? \n          month.returningCustomers.size / month.customers.size : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few customers to avoid misleading rates\n      .filter(month => month.customers >= 3);\n  }, [appointments, selectedCity]);\n\n  // Calculate weekly order frequency\n  const orderFrequencyTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by week\n    const weeklyAppointments = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        // Get week number - FIX: Use 'yyyy-ww' instead of the problematic format\n        const weekKey = format(date, 'yyyy-ww');\n        const weekName = format(date, 'MMM d, yyyy');\n        \n        if (!weeklyAppointments[weekKey]) {\n          weeklyAppointments[weekKey] = {\n            key: weekKey,\n            name: `Week of ${weekName}`,\n            shortName: format(date, 'MMM d'),\n            date: date,\n            customerCount: new Set(),\n            orderCount: 0\n          };\n        }\n        \n        weeklyAppointments[weekKey].orderCount++;\n        \n        // Count unique customers\n        if (appointment.customerId) {\n          weeklyAppointments[weekKey].customerCount.add(appointment.customerId);\n        }\n      }\n    });\n    \n    // Calculate orders per customer for each week\n    return Object.values(weeklyAppointments)\n      .map(week => ({\n        name: week.shortName,\n        fullName: week.name,\n        date: week.date,\n        week: week.key,\n        customers: week.customerCount.size,\n        orders: week.orderCount,\n        ordersPerCustomer: week.customerCount.size > 0 ? \n          week.orderCount / week.customerCount.size : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out weeks with very few customers to avoid misleading rates\n      .filter(week => week.customers >= 2);\n  }, [appointments, selectedCity]);\n\n  // Calculate order processing time trend\n  const processingTimeTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyProcessingTimes = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      // Calculate processing time if we have both pickup and delivery dates\n      let pickupDate = null, deliveryDate = null;\n      \n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        pickupDate = new Date(appointment.pickup.serviceDate);\n      }\n      \n      if (appointment.delivery && appointment.delivery.serviceDate) {\n        deliveryDate = new Date(appointment.delivery.serviceDate);\n      }\n      \n      // If we have valid dates and delivery is after pickup\n      if (pickupDate && deliveryDate && \n          !isNaN(pickupDate.getTime()) && \n          !isNaN(deliveryDate.getTime()) && \n          deliveryDate > pickupDate) {\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        const monthName = format(pickupDate, 'MMM yyyy');\n        \n        if (!monthlyProcessingTimes[monthKey]) {\n          monthlyProcessingTimes[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: pickupDate,\n            totalHours: 0,\n            count: 0\n          };\n        }\n        \n        // Calculate hours between pickup and delivery\n        const hours = (deliveryDate - pickupDate) / (1000 * 60 * 60);\n        monthlyProcessingTimes[monthKey].totalHours += hours;\n        monthlyProcessingTimes[monthKey].count++;\n      }\n    });\n    \n    // Calculate average processing time for each month\n    return Object.values(monthlyProcessingTimes)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        avgProcessingHours: month.count > 0 ? \n          month.totalHours / month.count : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few data points\n      .filter(month => month.avgProcessingHours > 0);\n  }, [appointments, selectedCity]);\n\n  // Calculate commercial vs residential split trend\n  const customerTypeTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyTypeSplit = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        const monthKey = format(date, 'yyyy-MM');\n        const monthName = format(date, 'MMM yyyy');\n        \n        if (!monthlyTypeSplit[monthKey]) {\n          monthlyTypeSplit[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: date,\n            residential: 0,\n            commercial: 0,\n            unknown: 0,\n            total: 0\n          };\n        }\n        \n        monthlyTypeSplit[monthKey].total++;\n        \n        if (appointment.customerType === 'Residential') {\n          monthlyTypeSplit[monthKey].residential++;\n        } else if (appointment.customerType === 'Commercial') {\n          monthlyTypeSplit[monthKey].commercial++;\n        } else {\n          monthlyTypeSplit[monthKey].unknown++;\n        }\n      }\n    });\n    \n    // Calculate percentages\n    return Object.values(monthlyTypeSplit)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        residential: month.residential,\n        residentialPercent: month.total > 0 ? (month.residential / month.total) * 100 : 0,\n        commercial: month.commercial,\n        commercialPercent: month.total > 0 ? (month.commercial / month.total) * 100 : 0,\n        unknown: month.unknown,\n        total: month.total\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few orders\n      .filter(month => month.total >= 5);\n  }, [appointments, selectedCity]);\n\n  // State to track which chart to display\n  const [selectedChartType, setSelectedChartType] = useState('retention');\n\n  // All unique customer types for filter\n  const customerTypes = useMemo(() => {\n    const types = new Set();\n    appointments.forEach(appointment => {\n      if (appointment.customerType) {\n        types.add(appointment.customerType);\n      }\n    });\n    return Array.from(types);\n  }, [appointments]);\n\n  // All unique laundromats for filter\n  const laundromats = useMemo(() => {\n    const cleaners = new Map();\n    appointments.forEach(appointment => {\n      if (appointment.cleaning && appointment.cleaning.cleaner) {\n        const cleanerId = appointment.cleaning.cleaner;\n        const name = laundromatIdToNameMap[cleanerId] || `Laundromat ${cleanerId.substring(0, 8)}`;\n        cleaners.set(cleanerId, {\n          id: cleanerId,\n          name: name\n        });\n      }\n    });\n    return Array.from(cleaners.values());\n  }, [appointments, laundromatIdToNameMap]);\n\n  // For date range selection\n  const handleStartDateChange = (event) => {\n    const [year, month] = event.target.value.split('-');\n    setStartDate(new Date(year, month - 1, 1));\n  };\n\n  const handleEndDateChange = (event) => {\n    const [year, month] = event.target.value.split('-');\n    // Last day of the month\n    setEndDate(new Date(year, month, 0));\n  };\n\n  // Get map center coordinates based on selected city\n  const getMapCenter = useMemo(() => {\n    const centers = {\n      'LYGRRATQ7EGG2': { lat: 42.9849, lng: -81.2453 }, // London\n      'L4NE8GPX89J3A': { lat: 45.4215, lng: -75.6972 }, // Ottawa\n      'LDK6Z980JTKXY': { lat: 43.4643, lng: -80.5204 }, // Kitchener-Waterloo\n      'LXMC6DWVJ5N7W': { lat: 43.2557, lng: -79.8711 }, // Hamilton\n      'LG0VGFKQ25XED': { lat: 51.0447, lng: -114.0719 }  // Calgary\n    };\n    \n    // Return center for selected city or fallback to a default\n    return selectedCity !== 'all' ? centers[selectedCity] : centers['LYGRRATQ7EGG2'];\n  }, [selectedCity]);\n\n  // Get total order count currently displayed on map\n  const displayedMapOrdersCount = useMemo(() => {\n    return mapMarkers.length;\n  }, [mapMarkers]);\n\n  // Get active laundromats count currently displayed on map\n  const displayedLaundromatsCount = useMemo(() => {\n    return laundromatLocations.length;\n  }, [laundromatLocations]);\n\n  const [sortColumn, setSortColumn] = useState('orders');\n  const [sortDirection, setSortDirection] = useState('desc');\n\n  // Handle sorting for laundromat table\n  const handleSort = (column) => {\n    if (sortColumn === column) {\n      // Toggle sort direction if same column is clicked\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Set new sort column and default to descending\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  };\n  \n  // Sort icon component\n  const SortIcon = ({ column }) => {\n    if (sortColumn !== column) return <span style={{ opacity: 0.3 }}>↕</span>;\n    return <span>{sortDirection === 'asc' ? '↑' : '↓'}</span>;\n  };\n\n  // Render laundromat table with sorting\n  const renderLaundromatTable = () => {\n    // Get laundromats for current city or all laundromats\n    let filteredLaundromats = laundromatStats;\n    if (selectedCity !== 'all') {\n      filteredLaundromats = laundromatStats.filter(l => l.city === CITY_MAPPING[selectedCity]);\n    }\n    \n    // Filter out low-value entries (no revenue or very few orders)\n    filteredLaundromats = filteredLaundromats.filter(l => \n      l.revenue > 0 && l.orders > 5\n    );\n    \n    // Sort the data\n    const sortedLaundromats = [...filteredLaundromats].sort((a, b) => {\n      let valueA, valueB;\n      \n      // Handle special sorting cases\n      switch (sortColumn) {\n        case 'name':\n          valueA = laundromatIdToNameMap[a.id] || a.id;\n          valueB = laundromatIdToNameMap[b.id] || b.id;\n          break;\n        case 'avgOrderValue':\n          valueA = a.orders > 0 ? a.revenue / a.orders : 0;\n          valueB = b.orders > 0 ? b.revenue / b.orders : 0;\n          break;\n        case 'retentionScore':\n          valueA = a.retentionRate || 0;\n          valueB = b.retentionRate || 0;\n          break;\n        default:\n          valueA = a[sortColumn];\n          valueB = b[sortColumn];\n      }\n      \n      // Compare values based on sort direction\n      if (typeof valueA === 'string' && typeof valueB === 'string') {\n        return sortDirection === 'asc' \n          ? valueA.localeCompare(valueB) \n          : valueB.localeCompare(valueA);\n      } else {\n        return sortDirection === 'asc' ? valueA - valueB : valueB - valueA;\n      }\n    });\n    \n    return sortedLaundromats.map((laundromat) => (\n      <tr key={laundromat.id} style={{ borderBottom: '1px solid #E5E7EB' }}>\n        <td style={{ padding: '12px 16px' }}>\n          {laundromatIdToNameMap[laundromat.id] || laundromat.id}\n        </td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.orders}</td>\n        <td style={{ padding: '12px 16px' }}>${laundromat.revenue.toFixed(2)}</td>\n        <td style={{ padding: '12px 16px' }}>\n          ${laundromat.orders > 0 ? (laundromat.revenue / laundromat.orders).toFixed(2) : '0.00'}\n        </td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.customers}</td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.returningCustomers}</td>\n        <td style={{ padding: '12px 16px' }}>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span style={{ \n              width: '12px', \n              height: '12px', \n              borderRadius: '50%', \n              marginRight: '8px',\n              backgroundColor: laundromat.retentionRate >= 0.6 ? '#10B981' :\n                             laundromat.retentionRate >= 0.45 ? '#059669' :\n                             laundromat.retentionRate >= 0.35 ? '#F59E0B' :\n                             laundromat.retentionRate >= 0.25 ? '#D97706' :\n                             laundromat.retentionRate >= 0.15 ? '#DC2626' : '#B91C1C'\n            }}></span>\n            <span title=\"Percentage of customers who are returning customers.\">\n              {(laundromat.retentionRate * 100).toFixed(1)}%\n            </span>\n          </div>\n        </td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.avgTurnaroundDays.toFixed(1)} days</td>\n      </tr>\n    ));\n  };\n\n  // City information data\n  const cityInfo = useMemo(() => {\n    const info = {\n      'LYGRRATQ7EGG2': {\n        name: 'London',\n        population: 400000,\n        laundromatCount: 3,\n        operationalSince: '2023-01-01',\n        marketShare: (aggregateMetrics.totalOrders / 400000) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'L4NE8GPX89J3A': {\n        name: 'Ottawa',\n        population: 1017449,\n        laundromatCount: 5,\n        operationalSince: '2023-03-15',\n        marketShare: (aggregateMetrics.totalOrders / 1017449) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LDK6Z980JTKXY': {\n        name: 'Kitchener-Waterloo',\n        population: 575847,\n        laundromatCount: 4,\n        operationalSince: '2023-06-01',\n        marketShare: (aggregateMetrics.totalOrders / 575847) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LXMC6DWVJ5N7W': {\n        name: 'Hamilton',\n        population: 569353,\n        laundromatCount: 3,\n        operationalSince: '2023-09-10',\n        marketShare: (aggregateMetrics.totalOrders / 569353) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LG0VGFKQ25XED': {\n        name: 'Calgary',\n        population: 1306784,\n        laundromatCount: 4,\n        operationalSince: '2023-11-20',\n        marketShare: (aggregateMetrics.totalOrders / 1306784) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      }\n    };\n    return selectedCity === 'all' ? null : info[selectedCity];\n  }, [selectedCity, aggregateMetrics]);\n\n  // City projection constants - extracted from CityProjectionCalculator\n  const PROJECTION_RATE = 5.57; // Standard rate excluding London\n  const MONTHLY_DISTRIBUTION = {\n    1: 0.0604, 2: 0.1546, 3: 0.1570, 4: 0.1691, 5: 0.2126, 6: 0.2464\n  };\n\n  // Calculate projections for the selected city with error handling\n  const projectionData = useMemo(() => {\n    try {\n      if (!monthlyOrdersTrend || monthlyOrdersTrend.length === 0) {\n        return {\n          combinedOrderTrend: [],\n          metrics: {\n            totalAnnualOrders: 0,\n            averageMonthlyOrders: 0,\n            projectedGrowthPercent: 0\n          }\n        };\n      }\n      \n      // Generate projections using the advanced system\n      return addProjectionsToComponent(monthlyOrdersTrend, selectedCity);\n    } catch (error) {\n      console.error(\"Error generating projections:\", error);\n      // Return a safe default in case of errors\n      return {\n        combinedOrderTrend: monthlyOrdersTrend,\n        metrics: {\n          totalAnnualOrders: 0,\n          averageMonthlyOrders: 0,\n          projectedGrowthPercent: 0\n        },\n        error: true\n      };\n    }\n  }, [monthlyOrdersTrend, selectedCity]);\n\n  // Combine actual data with projections for the chart\n  const combinedOrderTrend = useMemo(() => {\n    if (!monthlyOrdersTrend || !projectionData || selectedCity === 'all') {\n      return monthlyOrdersTrend;\n    }\n\n    // Create a map of existing data points by month\n    const existingDataMap = {};\n    monthlyOrdersTrend.forEach(dataPoint => {\n      existingDataMap[dataPoint.month] = dataPoint;\n    });\n\n    // Merge actual data with projections - make sure we access the array correctly\n    return [\n      ...monthlyOrdersTrend,\n      ...(projectionData.projectedData || []).filter(projection => !existingDataMap[projection.month])\n    ].sort((a, b) => {\n      // Sort by date\n      if (a.month && b.month) {\n        return a.month.localeCompare(b.month);\n      }\n      return 0;\n    });\n  }, [monthlyOrdersTrend, projectionData, selectedCity]);\n\n  // Add a state for total orders across all cities\n  const [totalOrdersAllCities, setTotalOrdersAllCities] = useState(0);\n  \n  // When appointments are loaded, calculate total orders across all cities\n  useEffect(() => {\n    if (appointments && appointments.length > 0) {\n      setTotalOrdersAllCities(appointments.length);\n    }\n  }, [appointments]);\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Add a section for displaying order projections with error handling\n  const renderProjectionSection = () => {\n    return (\n      <div style={{ marginTop: '40px', marginBottom: '40px' }}>\n        <QuarterlyGrowthByCity selectedCity={selectedCity} cityMapping={CITY_MAPPING} />\n      </div>\n    );\n  };\n\n  // Render map section with Coming Soon message\n  const renderMapSection = () => {\n    return (\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h5\" sx={{ fontWeight: 'bold', color: '#111827' }}>\n            Order Locations - {CITY_MAPPING[selectedCity] || 'All Cities'}\n          </Typography>\n        </Box>\n        <Paper sx={{ \n          borderRadius: 2, \n          overflow: 'hidden', \n          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n          height: '450px',\n          position: 'relative'\n        }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ \n              key: 'AIzaSyAtGuXvA4E3HW0xM2yzRU7tphMTtxqKQD4',\n              libraries: ['places']\n            }}\n            center={mapCenter || getMapCenter}\n            zoom={mapZoom}\n            onChange={({ center, zoom, bounds }) => {\n              // Update map state when user interacts with the map\n              setMapCenter(center);\n              setMapZoom(zoom);\n            }}\n            options={{\n              fullscreenControl: true,\n              zoomControl: true,\n              mapTypeControl: true,\n              streetViewControl: false,\n              gestureHandling: 'greedy',\n              minZoom: 5,\n              maxZoom: 18,\n              styles: [\n                {\n                  featureType: 'all',\n                  elementType: 'geometry',\n                  stylers: [{ lightness: 20 }]\n                },\n                {\n                  featureType: 'water',\n                  elementType: 'geometry',\n                  stylers: [{ color: '#e0f2fe' }]\n                },\n                {\n                  featureType: 'road',\n                  elementType: 'geometry',\n                  stylers: [{ color: '#f1f5f9' }]\n                }\n              ]\n            }}\n          />\n          \n          {/* Coming Soon overlay */}\n          <Box sx={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(255, 255, 255, 0.85)',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: 10\n          }}>\n            <Box sx={{\n              backgroundColor: '#3B82F6',\n              color: 'white',\n              padding: '12px 24px',\n              borderRadius: '8px',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n              marginBottom: '16px'\n            }}>\n              <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\n                Coming Soon!\n              </Typography>\n            </Box>\n            <Typography variant=\"body1\" sx={{ maxWidth: '450px', textAlign: 'center', color: '#1F2937' }}>\n              Our team is working on integrating detailed map data for all service areas.\n              Check back soon for a visual representation of our order locations.\n            </Typography>\n          </Box>\n        </Paper>\n      </Box>\n    );\n  };\n\n  // Modify the statistics card section to show percentages\n  const renderStatisticsCard = (title, value, secondaryValue = null, icon = null) => {\n    // Calculate percentage of total if this is the total orders card\n    const showPercentage = title.toLowerCase().includes('order') && totalOrdersAllCities > 0 && selectedCity !== 'all';\n    const percentage = showPercentage ? (value / totalOrdersAllCities * 100).toFixed(1) : null;\n    \n    return (\n      <Paper\n        elevation={1}\n        sx={{\n          p: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100%',\n          borderRadius: 2,\n          backgroundColor: '#FFFFFF',\n          transition: 'transform 0.3s, box-shadow 0.3s',\n          '&:hover': {\n            transform: 'translateY(-5px)',\n            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'\n          }\n        }}\n      >\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>\n          <Typography\n            variant=\"subtitle1\"\n            component=\"div\"\n            sx={{ \n              color: '#6B7280',\n              fontWeight: 500,\n              fontSize: '0.875rem'\n            }}\n          >\n            {title}\n          </Typography>\n          {icon && (\n            <Box\n              sx={{\n                bgcolor: '#F3F4F6',\n                borderRadius: '50%',\n                width: 40,\n                height: 40,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                color: '#3B82F6'\n              }}\n            >\n              {icon}\n            </Box>\n          )}\n        </Box>\n        \n        <Box sx={{ mt: 1, display: 'flex', alignItems: 'baseline' }}>\n          <Typography\n            variant=\"h4\"\n            component=\"div\"\n            sx={{\n              fontWeight: 'bold',\n              color: '#111827',\n              lineHeight: 1.2\n            }}\n          >\n            {typeof value === 'number' ? \n              value.toLocaleString(undefined, {\n                minimumFractionDigits: value % 1 === 0 ? 0 : 2,\n                maximumFractionDigits: 2\n              }) : \n              value}\n          </Typography>\n          \n          {showPercentage && (\n            <Typography\n              variant=\"body2\"\n              component=\"div\"\n              sx={{\n                ml: 1,\n                color: '#10B981',\n                fontWeight: 'medium',\n                fontSize: '0.875rem',\n                bgcolor: '#ECFDF5',\n                px: 1,\n                py: 0.5,\n                borderRadius: 1,\n                whiteSpace: 'nowrap'\n              }}\n            >\n              {percentage}% of total\n            </Typography>\n          )}\n        </Box>\n        \n        {secondaryValue && (\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: '#6B7280',\n              mt: 1\n            }}\n          >\n            {secondaryValue}\n          </Typography>\n        )}\n      </Paper>\n    );\n  };\n\n  return (\n    <Box sx={{ \n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      bgcolor: '#F3F4F6', \n      minHeight: '100vh'\n    }}>\n      <Box component=\"main\" sx={{ flexGrow: 1, px: 3, py: 4 }}>\n        <Container maxWidth=\"xl\">\n          {/* Header */}\n          <AppBar position=\"static\" sx={{ backgroundColor: '#1E40AF' }}>\n            <Toolbar>\n              <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1, fontWeight: 'bold' }}>\n                Laundry Service Analytics Dashboard\n              </Typography>\n              \n              {/* City Selector */}\n              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n                <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 150, backgroundColor: 'white', borderRadius: '4px', mr: 2 }}>\n                  <Select\n                    value={selectedCity}\n                    onChange={(e) => setSelectedCity(e.target.value)}\n                    displayEmpty\n                    sx={{ \n                      color: '#1E3A8A',\n                      '.MuiSelect-select': { py: 1.5, pr: 8 },\n                      '&:focus': { backgroundColor: 'white' }\n                    }}\n                    IconComponent={() => (\n                      <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                        expand_more\n                      </Icon>\n                    )}\n                  >\n                    <MenuItem value=\"all\">All Cities</MenuItem>\n                    <MenuItem value=\"LYGRRATQ7EGG2\">London</MenuItem>\n                    <MenuItem value=\"L4NE8GPX89J3A\">Ottawa</MenuItem>\n                    <MenuItem value=\"LDK6Z980JTKXY\">Kitchener-Waterloo</MenuItem>\n                    <MenuItem value=\"LXMC6DWVJ5N7W\">Hamilton</MenuItem>\n                    <MenuItem value=\"LG0VGFKQ25XED\">Calgary</MenuItem>\n                  </Select>\n                </FormControl>\n                \n                {/* Date Range Selector - From */}\n                <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 120, backgroundColor: 'white', borderRadius: '4px', mr: 2 }}>\n                  <Select\n                    value={`${startDate.getFullYear()}-${startDate.getMonth()+1}`}\n                    onChange={handleStartDateChange}\n                    displayEmpty\n                    sx={{ \n                      color: '#1E3A8A',\n                      '.MuiSelect-select': { py: 1.5, pr: 8 },\n                      '&:focus': { backgroundColor: 'white' }\n                    }}\n                    IconComponent={() => (\n                      <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                        expand_more\n                      </Icon>\n                    )}\n                  >\n                    {[...Array(24)].map((_, i) => {\n                      const date = subMonths(new Date(), i);\n                      const value = `${date.getFullYear()}-${date.getMonth()+1}`;\n                      const label = format(date, 'MMM yyyy');\n                      return (\n                        <MenuItem key={`from-${value}`} value={value}>{label}</MenuItem>\n                      );\n                    })}\n                  </Select>\n                </FormControl>\n                \n                {/* Date Range Selector - To */}\n                <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 120, backgroundColor: 'white', borderRadius: '4px', mr: 2 }}>\n                  <Select\n                    value={`${endDate.getFullYear()}-${endDate.getMonth()+1}`}\n                    onChange={handleEndDateChange}\n                    displayEmpty\n                    sx={{ \n                      color: '#1E3A8A',\n                      '.MuiSelect-select': { py: 1.5, pr: 8 },\n                      '&:focus': { backgroundColor: 'white' }\n                    }}\n                    IconComponent={() => (\n                      <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                        expand_more\n                      </Icon>\n                    )}\n                  >\n                    {[...Array(24)].map((_, i) => {\n                      const date = subMonths(new Date(), i);\n                      const value = `${date.getFullYear()}-${date.getMonth()+1}`;\n                      const label = format(date, 'MMM yyyy');\n                      return (\n                        <MenuItem key={`to-${value}`} value={value}>{label}</MenuItem>\n                      );\n                    })}\n                  </Select>\n                </FormControl>\n                \n                {/* Customer Type Filter */}\n                <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 140, backgroundColor: 'white', borderRadius: '4px' }}>\n                  <Select\n                    value={customerTypeFilter}\n                    onChange={(e) => setCustomerTypeFilter(e.target.value)}\n                    displayEmpty\n                    sx={{ \n                      color: '#1E3A8A',\n                      '.MuiSelect-select': { py: 1.5, pr: 8 },\n                      '&:focus': { backgroundColor: 'white' }\n                    }}\n                    IconComponent={() => (\n                      <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                        expand_more\n                      </Icon>\n                    )}\n                  >\n                    <MenuItem value=\"all\">All Customer Types</MenuItem>\n                    {customerTypes.map(type => (\n                      <MenuItem key={type} value={type}>{type}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n            </Toolbar>\n          </AppBar>\n\n          {/* City Overview Section (Independent of date range) */}\n          {cityInfo && (\n            <Box sx={{ mb: 6 }}>\n              <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, justifyContent: 'space-between', alignItems: { xs: 'start', md: 'center' }, mb: 4 }}>\n                <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: '#111827', mb: { xs: 2, md: 0 } }}>\n                  {cityInfo.name} Overview\n                </Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <Icon sx={{ color: '#6B7280', mr: 1 }}>calendar_today</Icon>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    <span style={{ fontWeight: 500 }}>Operational Since:</span> {new Date(cityInfo.operationalSince).toLocaleString('en-US', { month: 'long', year: 'numeric' })}\n                  </Typography>\n                </Box>\n              </Box>\n              \n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#EBF5FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#1E88E5' }}>groups</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Population</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.population.toLocaleString()}</Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#E6FFFA', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#26A69A' }}>location_on</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Active Laundromats</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.laundromatCount}</Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'text.secondary', mt: 0.5, display: 'block' }}>\n                          {laundromats\n                            .filter(l => {\n                              // Filter by city based on most common city for this cleaner\n                              const cityFrequency = {};\n                              appointments.forEach(appointment => {\n                                if (appointment.cleaning && appointment.cleaning.cleaner === l.id && appointment.cityId) {\n                                  cityFrequency[appointment.cityId] = (cityFrequency[appointment.cityId] || 0) + 1;\n                                }\n                              });\n                              \n                              let mostCommonCity = null;\n                              let maxCityCount = 0;\n                              Object.keys(cityFrequency).forEach(cityId => {\n                                if (cityFrequency[cityId] > maxCityCount) {\n                                  maxCityCount = cityFrequency[cityId];\n                                  mostCommonCity = cityId;\n                                }\n                              });\n                              \n                              return mostCommonCity === selectedCity;\n                            })\n                            .map(l => l.name)\n                            .join(', ')}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#F3E8FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#AB47BC' }}>trending_up</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Market Penetration</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.marketShare.toFixed(2)}%</Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'text.secondary', mt: 0.5, display: 'block' }}>\n                          Based on total population\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#FFF7ED', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#F59E0B' }}>shopping_bag</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Average Orders Per Customer</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.avgOrderFrequency.toFixed(1)}</Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n\n          {/* Order Projections Section - Only show for specific cities */}\n          {selectedCity !== 'all' && renderProjectionSection()}\n\n          {/* Date Range Information Banner - Made more prominent */}\n          <Paper sx={{ \n            p: 3, \n            mb: 4, \n            backgroundColor: '#EFF6FF', \n            borderRadius: 2, \n            display: 'flex', \n            flexDirection: { xs: 'column', md: 'row' }, \n            alignItems: { xs: 'start', md: 'center' }, \n            justifyContent: 'space-between',\n            borderLeft: '5px solid #3B82F6' // Added accent border\n          }}>\n            <Typography variant=\"h5\" sx={{ fontWeight: 'bold', color: '#1E40AF', mb: { xs: 2, md: 0 } }}>\n              Showing Statistics for: {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n            </Typography>\n            <Box sx={{ display: 'flex', alignItems: 'center', backgroundColor: 'white', px: 2, py: 1, borderRadius: 1, boxShadow: '0 1px 2px rgba(0,0,0,0.1)' }}>\n              <Icon sx={{ color: '#3B82F6', mr: 1 }}>date_range</Icon>\n              <Typography variant=\"body1\" sx={{ mr: 1, color: '#1E40AF', fontWeight: 'medium' }}>\n                From: {format(startDate, 'MMM yyyy')}\n              </Typography>\n              <Typography variant=\"body1\" sx={{ color: '#1E40AF', fontWeight: 'medium' }}>\n                To: {format(endDate, 'MMM yyyy')}\n              </Typography>\n            </Box>\n          </Paper>\n\n          {/* Summary Cards - Now clearly marked as being for the selected date range */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            Performance Metrics\n          </Typography>\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#EBF5FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#2563EB' }}>shopping_bag</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Orders</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{aggregateMetrics.totalOrders.toLocaleString()}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#ECFDF5', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#10B981' }}>attach_money</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Revenue</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>${aggregateMetrics.totalRevenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#FEF3C7', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#F59E0B' }}>trending_up</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Avg. Order Value</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>${aggregateMetrics.avgOrderValue.toFixed(2)}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#F3E8FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#8B5CF6' }}>inventory_2</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Avg. Order Weight</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{aggregateMetrics.avgWeight.toFixed(2)} kg</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Chart Section - Within the Date Range */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]} Order Trends\n          </Typography>\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} md={8}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>\n                  Weekly Orders - {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart \n                    data={\n                      selectedCity === 'all' \n                        ? monthlyOrdersTrend \n                        : (projectionData?.weeklyHistoricalData || monthlyOrdersTrend)\n                    }\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis \n                      dataKey=\"name\" \n                      tick={{ fill: '#6B7280' }}\n                      interval=\"preserveStartEnd\"\n                      minTickGap={15}\n                      tickMargin={8}\n                    />\n                    <YAxis tick={{ fill: '#6B7280' }} />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: '#FFFFFF', \n                        borderRadius: '0.375rem', \n                        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', \n                        border: 'none' \n                      }}\n                      formatter={(value, name, props) => {\n                        return [`${value} orders`, name];\n                      }}\n                      labelFormatter={(label, items) => {\n                        const dataPoint = items?.[0]?.payload;\n                        return dataPoint?.fullname || label;\n                      }}\n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                    \n                    {selectedCity === 'all' \n                      ? Object.values(CITY_MAPPING)\n                        .filter(city => city !== 'All Cities')\n                        .map((city, index) => (\n                          <Line \n                            key={city}\n                            type=\"monotone\" \n                            dataKey={city} \n                            stroke={COLORS[index % COLORS.length]}\n                            strokeWidth={2}\n                            dot={{ r: 3, strokeWidth: 1, fill: COLORS[index % COLORS.length] }}\n                            activeDot={{ r: 6 }}\n                            isAnimationActive={true}\n                            animationDuration={1000}\n                            connectNulls={true}\n                          />\n                        ))\n                      : (\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"orders\" \n                          name={CITY_MAPPING[selectedCity]}\n                          stroke=\"#2563EB\"\n                          strokeWidth={2}\n                          dot={{ r: 3, strokeWidth: 1, fill: '#2563EB' }}\n                          activeDot={{ r: 6 }}\n                          isAnimationActive={true}\n                          animationDuration={1000}\n                          connectNulls={true}\n                        />\n                      )\n                    }\n                  </LineChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>Customer Types</Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={customerTypeDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {customerTypeDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${value} orders`, 'Count']} \n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Additional Metric Charts - with improved styling */}\n          <Grid container spacing={3} sx={{ mb: 5 }}>\n            <Grid item xs={12} md={7}>\n              <Paper sx={{ p: 2, height: '100%' }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                  <Typography variant=\"h6\">Customer Retention Over Time</Typography>\n                </Box>\n                \n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={retentionRateTrend}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis \n                      tickFormatter={(value) => `${(value * 100).toFixed(0)}%`}\n                      domain={[0, dataMax => Math.min(1, dataMax * 1.1)]}\n                    />\n                    <Tooltip \n                      formatter={(value) => [`${(value * 100).toFixed(1)}%`, 'Retention Rate']} \n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"retentionRate\" \n                      stroke=\"#3B82F6\" \n                      activeDot={{ r: 8 }}\n                      strokeWidth={2}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>Order Weight Distribution</Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={weightDistribution}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis dataKey=\"range\" tick={{ fill: '#6B7280' }} />\n                    <YAxis tick={{ fill: '#6B7280' }} />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${value} orders`, 'Count']} \n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                    <Bar dataKey=\"count\" fill=\"#26A69A\" name=\"Number of Orders\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Laundromat Performance Table - With Improved Styling */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            Laundromat Performance\n          </Typography>\n          <Paper sx={{ p: 0, mb: 4, overflowX: 'auto', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n            <Box sx={{ p: 3, borderBottom: '1px solid #E5E7EB' }}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={3}>\n                  <FormControl fullWidth variant=\"outlined\" size=\"small\">\n                    <InputLabel>Filter by Laundromat</InputLabel>\n                    <Select\n                      value={laundromatFilter}\n                      onChange={(e) => setLaundromatFilter(e.target.value)}\n                      label=\"Filter by Laundromat\"\n                    >\n                      <MenuItem value=\"all\">All Laundromats</MenuItem>\n                      {laundromats.map(laundromat => (\n                        <MenuItem key={laundromat.id} value={laundromat.id}>{laundromat.name}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </Box>\n            <Box>\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr style={{ backgroundColor: '#F9FAFB' }}>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('name')}\n                    >\n                      Laundromat Name <SortIcon column=\"name\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('orders')}\n                    >\n                      Total Orders <SortIcon column=\"orders\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('revenue')}\n                    >\n                      Revenue <SortIcon column=\"revenue\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('avgOrderValue')}\n                    >\n                      Avg. Order Value <SortIcon column=\"avgOrderValue\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('customers')}\n                    >\n                      Customers <SortIcon column=\"customers\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('returningCustomers')}\n                    >\n                      Returning <SortIcon column=\"returningCustomers\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('retentionScore')}\n                    >\n                      Retention <SortIcon column=\"retentionScore\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('avgTurnaroundDays')}\n                    >\n                      Turnaround <SortIcon column=\"avgTurnaroundDays\" />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {renderLaundromatTable()}\n                </tbody>\n              </table>\n            </Box>\n          </Paper>\n\n          {/* Map Section - replaced with Coming Soon version */}\n          {renderMapSection()}\n        </Container>\n      </Box>\n\n      {/* Footer */}\n      <Box component=\"footer\" sx={{ p: 3, backgroundColor: '#F1F5F9', borderTop: '1px solid #E2E8F0' }}>\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n          Laundry Service Analytics Dashboard &bull; Last updated: {new Date().toLocaleDateString()} \n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Dashboard; ","import React, { useState, useEffect } from 'react';\nimport { Box, CircularProgress, Typography, Button } from '@mui/material';\nimport Dashboard from './components/Dashboard';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabaseUrl = 'https://cnbpmepdmtpgrbllufcb.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNuYnBtZXBkbXRwZ3JibGx1ZmNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc5MjM4MjEsImV4cCI6MjA1MzQ5OTgyMX0.UqDleR4ucntrg9x6FNgJigKZjKiATFYiMiLiZZj3B2w';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Load data from Supabase\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        console.log('Fetching data from Supabase...');\n        \n        // First try Supabase\n        const { data: supabaseData, error: supabaseError } = await supabase\n          .from('appointments')\n          .select('*');\n        \n        if (supabaseError) {\n          console.error('Supabase error:', supabaseError);\n          throw new Error(`Failed to load data from Supabase: ${supabaseError.message}`);\n        }\n        \n        if (supabaseData && supabaseData.length > 0) {\n          console.log(`Successfully loaded ${supabaseData.length} records from Supabase`);\n          setData(supabaseData);\n        } else {\n          // Fallback to local JSON file\n          console.log('No data found in Supabase, falling back to local JSON file');\n          const response = await fetch('/appointments.json');\n          if (!response.ok) {\n            throw new Error(`Failed to load local data: ${response.status} ${response.statusText}`);\n          }\n          const jsonData = await response.json();\n          setData(jsonData);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err.message || 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Handle retry when loading fails\n  const handleRetry = () => {\n    setError(null);\n    setLoading(true);\n    // Re-trigger the effect\n    const loadData = async () => {\n      try {\n        // First try Supabase\n        const { data: supabaseData, error: supabaseError } = await supabase\n          .from('appointments')\n          .select('*');\n        \n        if (supabaseError) {\n          console.error('Supabase error:', supabaseError);\n          throw new Error(`Failed to load data from Supabase: ${supabaseError.message}`);\n        }\n        \n        if (supabaseData && supabaseData.length > 0) {\n          console.log(`Successfully loaded ${supabaseData.length} records from Supabase`);\n          setData(supabaseData);\n        } else {\n          // Fallback to local JSON file\n          console.log('No data found in Supabase, falling back to local JSON file');\n          const response = await fetch('/appointments.json');\n          if (!response.ok) {\n            throw new Error(`Failed to load local data: ${response.status} ${response.statusText}`);\n          }\n          const jsonData = await response.json();\n          setData(jsonData);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err.message || 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  };\n\n  if (loading) {\n    return (\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column',\n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          backgroundColor: '#F3F4F6'\n        }}\n      >\n        <CircularProgress size={60} sx={{ mb: 3 }} />\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          Loading laundry service data...\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column',\n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          backgroundColor: '#F3F4F6',\n          p: 3\n        }}\n      >\n        <Typography variant=\"h5\" color=\"error\" gutterBottom>\n          Error Loading Data\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3, maxWidth: 600, textAlign: 'center' }}>\n          {error}\n        </Typography>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleRetry}>\n          Retry\n        </Button>\n      </Box>\n    );\n  }\n\n  return <Dashboard jsonData={data} />;\n};\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport App from './App';\n\n// Create a custom theme\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1E3A8A',\n    },\n    secondary: {\n      main: '#10B981',\n    },\n    background: {\n      default: '#F3F4F6',\n    },\n  },\n  typography: {\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n    h5: {\n      fontWeight: 600,\n    },\n    h6: {\n      fontWeight: 600,\n    },\n  },\n  components: {\n    MuiPaper: {\n      defaultProps: {\n        elevation: 0,\n      },\n      styleOverrides: {\n        root: {\n          boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.05)',\n        },\n      },\n    },\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          textTransform: 'none',\n          borderRadius: 8,\n        },\n      },\n    },\n    MuiSelect: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8,\n        },\n      },\n    },\n  },\n});\n\n// Create the root element for our React application\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Render the application\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n); "],"sourceRoot":""}