{"version":3,"sources":["components/QuarterlyGrowthByCity.js","utils/dataProcessor.js","utils/ProjectionImplementation.js","components/Dashboard.js","App.js","index.js"],"names":["QuarterlyGrowthByCity","_ref","selectedCity","propSelectedCity","cityMapping","loading","setLoading","useState","quarterlyData","setQuarterlyData","tableExpanded","setTableExpanded","useEffect","generateQuarterlyData","cityConfigs","all","name","growthFactor","baseValue","color","LYGRRATQ7EGG2","L4NE8GPX89J3A","LDK6Z980JTKXY","LXMC6DWVJ5N7W","LG0VGFKQ25XED","quarterlySeason","1","2","3","4","config","data","previousValue","currentDate","Date","currentYear","getFullYear","currentQuarter","Math","floor","getMonth","i","year","quarter","quarterlyGrowthFactor","pow","seasonalFactor","randomFactor","random","currentValue","round","growthRate","push","value","parseFloat","toFixed","cityName","cityId","getCityName","React","createElement","Paper","elevation","sx","p","height","display","flexDirection","overflow","Box","justifyContent","alignItems","mb","Typography","variant","IconButton","size","onClick","KeyboardArrowUpIcon","KeyboardArrowDownIcon","flex","minHeight","ResponsiveContainer","width","ComposedChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","angle","textAnchor","tick","fontSize","YAxis","yAxisId","orientation","stroke","label","position","Tooltip","content","_ref2","active","payload","length","style","backgroundColor","padding","border","borderRadius","Legend","Bar","fill","radius","Line","type","strokeWidth","dot","r","activeDot","ReferenceLine","y","Collapse","in","timeout","unmountOnExit","mt","overflowX","borderCollapse","borderBottom","textAlign","map","row","idx","key","CITY_MAPPING","LAUNDROMAT_COLORS","CITY_CENTERS","lat","lng","LAUNDROMAT_LOCATIONS","Tommy Suds","city","address","London Sudz","Royal City Cleaners","Browns","Ace Cleaners","Khawla","Spins","Centreville Laundry","KW Washateria","Laundry Closet","Soapy Bubbles","Marbank","Calgary Cleaners","CITY_LAUNDROMAT_MAPPING","CITY_LAUNDROMATS","Object","keys","forEach","index","_LAUNDROMAT_LOCATIONS","laundromatId","substring","replace","id","neededCount","suffixes","isCurrentMonth","dateString","date","parseISO","now","e","normalizeCityId","appointment","city_id","entries","toLowerCase","CITY_DATA","population","yearlyGrowthFactor","operationalSince","marketMaturity","minWeeklyOrders","WEEKLY_SEASONALITY","0","MONTHLY_SEASONALITY","5","6","7","8","9","10","11","generateProjections","monthlyData","weeks","arguments","undefined","combined","metrics","totalAnnualOrders","averageMonthlyOrders","projectedGrowthPercent","historicalData","filter","month","total","values","some","orders","reduce","sum","preprocessHistoricalData","cutoffDate","filteredHistoricalData","monthDate","parts","split","monthName","parseInt","monthMap","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","isNaN","console","error","lastHistoricalPoint","cityParams","baselineForGrowth","baseWeeklyOrders","max","m","val","yearStr","startMonth","startYear","adjustedWeeklyGrowth","projectedData","currentOrders","projectionStartDate","weekDate","addWeeks","weekOfMonth","getDate","formattedDate","format","shortDate","fullname","projected","week","weeklyHistoricalData","weeklyData","monthNumber","daysInMonth","weeksInMonth","ceil","nextMonth","nextMonthOrders","weekDay","min","weekOrders","factor","weekFactor","generateWeeklyHistoricalPoints","totalOrders","totalOrdersMonthly","avgWeeklyOrders","growthPercent","averageWeeklyOrders","COLORS","Dashboard","appointments","setAppointments","setSelectedCity","startDate","setStartDate","subMonths","endDate","setEndDate","mapMarkers","setMapMarkers","laundromatLocations","setLaundromatLocations","customerTypeFilter","setCustomerTypeFilter","laundromatFilter","setLaundromatFilter","mapCenter","setMapCenter","mapZoom","setMapZoom","mapInstance","setMapInstance","mapsApi","setMapsApi","laundromatIdToNameMap","useMemo","idMap","knownLocations","laundromat","laundromatAddresses","cleaning","cleaner","pickup","to","cleanerId","addresses","mostCommonAddress","maxCount","bestMatch","bestScore","knownAddress","knownWords","actualWords","matches","word","includes","score","cityFrequency","mostCommonCity","maxCityCount","cleanerIndex","indexOf","async","log","response","fetch","status","ok","Error","json","_sample$pickup","sample","serviceDate","service_date","createdAt","updatedAt","validDates","d","_d$pickup","dateStr","getTime","earliest","latest","toISOString","dateError","fallbackData","Array","from","_","customer_type","laundromat_id","laundromat_name","revenue","fetchData","panTo","setZoom","cityOrderCounts","acc","app","appointmentId","normalizedCityId","filteredAppointments","laundromats","laundromatsByCityId","cityIds","Set","add","randomIndex","allLaundromats","flat","cityCenter","locationInfo","PI","cos","sin","getLaundromatLocations","cityDistribution","sampleSize","sampledAppointments","slice","laundromatsById","laundromatsByName","markers","_laundromatsById$laun","laundromatName","laundromatColor","laundromatLocation","orderDetails","customerType","invoiceTotal","getOrderLocations","loadMapData","options","toLocaleString","totalAppointments","sampleAppointment","filtered","_appointments$","inDateRange","dateChecked","_appointments$2","_appointments$3","pickupDate","createdDate","laundromatStats","cityStats","avgOrderValue","customers","customerTypes","Residential","Commercial","Airbnb","Monthly","customerId","stats","getCityStatistics","customerToLaundromat","_appointment$pickup","_appointment$pickup2","_appointment$drop","returningCustomers","turnaroundTimes","orderWeights","averageOrderValue","drop","turnaroundDays","washFoldWeight","weight","totalTurnaroundDays","days","averageTurnaroundDays","totalWeight","averageOrderWeight","customerCount","returningCustomerCount","retentionRate","sort","a","b","getLaundromatStatistics","simpleRetentionRate","customerTypeDistribution","typeCounts","getCustomerTypeDistribution","monthlyOrdersTrend","trends","monthsToShow","monthKey","localeCompare","getMonthlyOrdersTrend","weightDistribution","orderCount","totalRevenue","getAvgOrderValueTrend","customerOrders","customerFirstOrderDate","customerLastOrderDate","orderDate","totalCustomers","count","averageOrdersPerCustomer","totalLifetimeDays","customersWithMultipleOrders","differenceInDays","averageCustomerLifetime","getCustomerRetentionMetrics","driverStats","driver","driverId","totalPickups","totalDropoffs","totalDistance","totalPay","completedPickups","completedDropoffs","cancelledServices","distance","pay","basePay","dropoff","totalServices","completedServices","completionRate","avgDistancePerService","avgPayPerDistance","getDriverPerformanceMetrics","Q1","Q2","Q3","Q4","getSeasonalTrends","weightRanges","0-5kg","range","6-10kg","11-15kg","16-20kg","21-30kg","31kg+","getWeightDistribution","aggregateMetrics","Boolean","totalLaundromats","avgWeight","arr","retentionRateTrend","monthlyAppointments","has","selectedChartType","setSelectedChartType","weeklyAppointments","weekKey","weekName","shortName","fullName","ordersPerCustomer","monthlyProcessingTimes","deliveryDate","delivery","totalHours","hours","avgProcessingHours","monthlyTypeSplit","residential","commercial","unknown","residentialPercent","commercialPercent","types","cleaners","Map","set","getMapCenter","centers","sortColumn","setSortColumn","sortDirection","setSortDirection","handleSort","column","SortIcon","opacity","cityInfo","info","laundromatCount","marketShare","avgOrderFrequency","projectionData","combinedOrderTrend","referenceDate","addProjectionsToComponent","totalOrdersAllCities","setTotalOrdersAllCities","existingDataMap","dataPoint","projection","totalRevenueAllCities","setTotalRevenueAllCities","CircularProgress","bgcolor","component","flexGrow","px","py","Container","maxWidth","AppBar","Toolbar","fontWeight","gap","flexWrap","FormControl","minWidth","mr","Select","onChange","target","displayEmpty",".MuiSelect-select","pr","&:focus","IconComponent","Icon","transform","pointerEvents","MenuItem","event","xs","md","gutterBottom","Grid","container","spacing","item","sm","boxShadow","l","join","marginTop","marginBottom","borderLeft","minimumFractionDigits","maximumFractionDigits","LineChart","interval","minTickGap","tickMargin","contentStyle","formatter","props","labelFormatter","items","_items$","wrapperStyle","paddingTop","isAnimationActive","animationDuration","connectNulls","PieChart","Pie","cx","cy","labelLine","outerRadius","_ref3","percent","entry","Cell","tickFormatter","domain","dataMax","BarChart","fullWidth","InputLabel","textTransform","letterSpacing","cursor","renderLaundromatTable","filteredLaundromats","valueA","valueB","marginRight","title","avgTurnaroundDays","GoogleMapReact","bootstrapURLKeys","libraries","center","zoom","bounds","fullscreenControl","zoomControl","mapTypeControl","streetViewControl","gestureHandling","minZoom","maxZoom","styles","featureType","elementType","stylers","lightness","zIndex","borderTop","align","toLocaleDateString","supabase","createClient","App","setData","setError","supabaseData","supabaseError","select","message","statusText","jsonData","err","loadData","handleRetry","Button","theme","createTheme","palette","primary","main","secondary","background","default","typography","fontFamily","h5","h6","components","MuiPaper","defaultProps","styleOverrides","root","MuiButton","MuiSelect","ReactDOM","createRoot","document","getElementById","render","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.76ca590a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ComposedChart, Bar, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';\nimport { Paper, Box, Typography, Collapse, IconButton, Grid } from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n\nconst QuarterlyGrowthByCity = ({ selectedCity: propSelectedCity = 'all', cityMapping = {} }) => {\n  const [loading, setLoading] = useState(true);\n  const [quarterlyData, setQuarterlyData] = useState([]);\n  const [tableExpanded, setTableExpanded] = useState(false);\n  \n  useEffect(() => {\n    generateQuarterlyData();\n  }, [propSelectedCity]);\n\n  const getCityName = (cityId) => {\n    if (cityId === 'all') return 'All Cities';\n    return cityMapping[cityId] || cityId;\n  };\n\n  // Generate quarterly data\n  const generateQuarterlyData = () => {\n    // City configuration with proper growth factors\n    const cityConfigs = {\n      all: { \n        name: \"All Cities\", \n        growthFactor: 1.15, \n        baseValue: 300,\n        color: '#2563EB'\n      },\n      LYGRRATQ7EGG2: { // London\n        name: \"London\", \n        growthFactor: 1.18, \n        baseValue: 250,\n        color: '#2563EB'\n      },\n      L4NE8GPX89J3A: { // Ottawa\n        name: \"Ottawa\", \n        growthFactor: 1.12, \n        baseValue: 180,\n        color: '#10B981'\n      },\n      LDK6Z980JTKXY: { // Kitchener-Waterloo\n        name: \"Kitchener-Waterloo\", \n        growthFactor: 1.20, \n        baseValue: 120,\n        color: '#F59E0B'\n      },\n      LXMC6DWVJ5N7W: { // Hamilton\n        name: \"Hamilton\", \n        growthFactor: 1.08, \n        baseValue: 90,\n        color: '#EF4444'\n      },\n      LG0VGFKQ25XED: { // Calgary\n        name: \"Calgary\", \n        growthFactor: 1.25, \n        baseValue: 75,\n        color: '#8B5CF6'\n      }\n    };\n    \n    // Quarterly seasonality factors\n    const quarterlySeason = {\n      \"1\": 0.9,  // Q1 (Jan-Mar)\n      \"2\": 1.15, // Q2 (Apr-Jun)\n      \"3\": 1.2,  // Q3 (Jul-Sep)\n      \"4\": 1.0   // Q4 (Oct-Dec)\n    };\n    \n    const config = cityConfigs[propSelectedCity] || cityConfigs.all;\n    \n    // Generate 8 quarters of data (2 years)\n    const data = [];\n    let previousValue = config.baseValue;\n    \n    // Start from 8 quarters ago (2 years of data)\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const currentQuarter = Math.floor(currentDate.getMonth() / 3) + 1;\n    \n    for (let i = 0; i < 8; i++) {\n      let quarterOffset = i - 7; // Start 7 quarters back\n      let year = currentYear;\n      let quarter = currentQuarter + quarterOffset;\n      \n      // Adjust year and quarter\n      while (quarter <= 0) {\n        quarter += 4;\n        year -= 1;\n      }\n      while (quarter > 4) {\n        quarter -= 4;\n        year += 1;\n      }\n      \n      // Apply quarterly growth with seasonality\n      const quarterlyGrowthFactor = Math.pow(config.growthFactor, 1/4);\n      const seasonalFactor = quarterlySeason[quarter];\n      const randomFactor = 0.95 + (Math.random() * 0.1); // 0.95-1.05 random variation\n      \n      let currentValue;\n      if (i === 0) {\n        currentValue = Math.round(config.baseValue * seasonalFactor * randomFactor);\n      } else {\n        currentValue = Math.round(previousValue * quarterlyGrowthFactor * seasonalFactor * randomFactor);\n      }\n      \n      // Calculate growth rate\n      const growthRate = i === 0 ? 0 : ((currentValue / previousValue) - 1) * 100;\n      \n      data.push({\n        name: `Q${quarter} ${year}`,\n        value: currentValue,\n        growthRate: parseFloat(growthRate.toFixed(1)),\n        year: year,\n        quarter: quarter\n      });\n      \n      previousValue = currentValue;\n    }\n    \n    setQuarterlyData(data);\n    setLoading(false);\n  };\n\n  // Custom tooltip to show both orders and growth rate\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div style={{ \n          backgroundColor: '#fff', \n          padding: '10px', \n          border: '1px solid #ccc',\n          borderRadius: '5px'\n        }}>\n          <p style={{ margin: '0 0 5px' }}><strong>{label}</strong></p>\n          <p style={{ margin: '0', color: '#2563EB' }}>\n            Orders: {payload[0].value}\n          </p>\n          {payload[1] && (\n            <p style={{ margin: '0', color: '#DC2626' }}>\n              Growth Rate: {payload[1].value}%\n            </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  const cityName = getCityName(propSelectedCity);\n  \n  return (\n    <Paper \n      elevation={2} \n      sx={{ \n        p: 3, \n        height: '100%', \n        display: 'flex', \n        flexDirection: 'column',\n        overflow: 'hidden'\n      }}\n    >\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n        <Typography variant=\"h6\">\n          Quarterly Orders for {cityName}\n        </Typography>\n        <IconButton\n          size=\"small\"\n          onClick={() => setTableExpanded(!tableExpanded)}\n        >\n          {tableExpanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n        </IconButton>\n      </Box>\n      \n      <Box sx={{ flex: 1, minHeight: 300 }}>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <ComposedChart\n            data={quarterlyData}\n            margin={{\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 70,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis \n              dataKey=\"name\" \n              angle={-45} \n              textAnchor=\"end\" \n              height={70} \n              tick={{ fontSize: 12 }}\n            />\n            <YAxis \n              yAxisId=\"left\" \n              orientation=\"left\" \n              stroke=\"#2563EB\"\n              label={{ value: 'Orders', angle: -90, position: 'insideLeft' }} \n            />\n            <YAxis \n              yAxisId=\"right\" \n              orientation=\"right\" \n              stroke=\"#DC2626\"\n              label={{ value: 'Growth %', angle: 90, position: 'insideRight' }} \n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend />\n            <Bar \n              yAxisId=\"left\" \n              dataKey=\"value\" \n              name=\"Orders\" \n              fill=\"#2563EB\" \n              radius={[4, 4, 0, 0]} \n            />\n            <Line \n              yAxisId=\"right\" \n              type=\"monotone\" \n              dataKey=\"growthRate\" \n              name=\"Growth Rate\" \n              stroke=\"#DC2626\" \n              strokeWidth={2}\n              strokeDasharray=\"5 5\"\n              dot={{ r: 4 }}\n              activeDot={{ r: 6 }}\n            />\n            <ReferenceLine y={0} yAxisId=\"right\" stroke=\"#666\" />\n          </ComposedChart>\n        </ResponsiveContainer>\n      </Box>\n      \n      {tableExpanded && (\n        <Collapse in={tableExpanded} timeout=\"auto\" unmountOnExit>\n          <Box sx={{ mt: 2, overflowX: 'auto' }}>\n            <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n              <thead>\n                <tr>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'left' }}>Quarter</th>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'right' }}>Orders</th>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'right' }}>Growth %</th>\n                </tr>\n              </thead>\n              <tbody>\n                {quarterlyData.map((row, idx) => (\n                  <tr key={idx}>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee' }}>{row.name}</td>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee', textAlign: 'right' }}>{row.value}</td>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee', textAlign: 'right' }}>\n                      {row.growthRate}%\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </Box>\n        </Collapse>\n      )}\n    </Paper>\n  );\n};\n\nexport default QuarterlyGrowthByCity; ","import { format, parseISO, subMonths, differenceInDays } from 'date-fns';\n\n// City IDs mapping\nexport const CITY_MAPPING = {\n  \"LYGRRATQ7EGG2\": \"London\",\n  \"L4NE8GPX89J3A\": \"Ottawa\",\n  \"LDK6Z980JTKXY\": \"Kitchener-Waterloo\",\n  \"LXMC6DWVJ5N7W\": \"Hamilton\",\n  \"LG0VGFKQ25XED\": \"Calgary\",\n  \"all\": \"All Cities\"\n};\n\n// London city ID constant\nexport const LONDON_CITY_ID = \"LYGRRATQ7EGG2\";\n\n// Laundromat colors for mapping\nexport const LAUNDROMAT_COLORS = {\n  'LYGRRATQ7EGG2': '#FF0000', // Red - London\n  'L4NE8GPX89J3A': '#00FF00', // Green - Ottawa \n  'LDK6Z980JTKXY': '#0000FF', // Blue - Kitchener-Waterloo\n  'LXMC6DWVJ5N7W': '#FFA500', // Orange - Hamilton\n  'LG0VGFKQ25XED': '#800080', // Purple - Calgary\n};\n\n// Predefined city center locations to avoid geocoding API calls\nexport const CITY_CENTERS = {\n  'LYGRRATQ7EGG2': { lat: 42.9849, lng: -81.2453 }, // London\n  'L4NE8GPX89J3A': { lat: 45.4215, lng: -75.6972 }, // Ottawa\n  'LDK6Z980JTKXY': { lat: 43.4643, lng: -80.5204 }, // Kitchener-Waterloo\n  'LXMC6DWVJ5N7W': { lat: 43.2557, lng: -79.8711 }, // Hamilton\n  'LG0VGFKQ25XED': { lat: 51.0447, lng: -114.0719 }  // Calgary\n};\n\n// Predefined laundromat locations with real addresses\nconst LAUNDROMAT_LOCATIONS = {\n  // London laundromats\n  'Tommy Suds': { \n    lat: 42.9727, \n    lng: -81.2780, \n    city: 'LYGRRATQ7EGG2',\n    address: '79 Commissioners Rd W, London, ON N6J 4H9'\n  },\n  'London Sudz': { \n    lat: 42.9815, \n    lng: -81.2350, \n    city: 'LYGRRATQ7EGG2',\n    address: '123 Dundas St, London, ON'\n  },\n  'Royal City Cleaners': { \n    lat: 43.0046, \n    lng: -81.2780, \n    city: 'LYGRRATQ7EGG2',\n    address: '456 Oxford St, London, ON'\n  },\n  \n  // Ottawa laundromats\n  'Browns': { \n    lat: 45.3494, \n    lng: -75.7395, \n    city: 'L4NE8GPX89J3A',\n    address: '1642 Merivale Rd, Nepean, ON K2G 4A1'\n  },\n  'Ace Cleaners': { \n    lat: 45.2959, \n    lng: -75.9077, \n    city: 'L4NE8GPX89J3A',\n    address: '471 Hazeldean Rd, Ottawa, ON K2L 4B8'\n  },\n  'Khawla': { \n    lat: 45.3103, \n    lng: -75.6104, \n    city: 'L4NE8GPX89J3A',\n    address: '585 Flagstaff Drive, Ottawa, ON'\n  },\n  'Spins': { \n    lat: 45.4372, \n    lng: -75.6556, \n    city: 'L4NE8GPX89J3A',\n    address: '320 McArthur Ave. B, Vanier, ON K1L 5G2'\n  },\n  \n  // Kitchener-Waterloo laundromats\n  'Centreville Laundry': { \n    lat: 43.4404, \n    lng: -80.4469, \n    city: 'LDK6Z980JTKXY',\n    address: '1077 Weber St E Unit #1, Kitchener, ON N2A 3Y5'\n  },\n  'KW Washateria': { \n    lat: 43.4723, \n    lng: -80.5449, \n    city: 'LDK6Z980JTKXY',\n    address: '321 University Ave, Waterloo, ON'\n  },\n  \n  // Hamilton laundromats\n  'Laundry Closet': { \n    lat: 43.2356, \n    lng: -79.8187, \n    city: 'LXMC6DWVJ5N7W',\n    address: '273 Kenilworth Ave N, Hamilton, ON L8H 4S8'\n  },\n  'Soapy Bubbles': { \n    lat: 43.2526, \n    lng: -79.8439, \n    city: 'LXMC6DWVJ5N7W',\n    address: '750 Main St E, Hamilton, ON L8M 1L1'\n  },\n  \n  // Calgary laundromats\n  'Marbank': { \n    lat: 51.0714, \n    lng: -113.9826, \n    city: 'LG0VGFKQ25XED',\n    address: '920 36 St NE #139, Calgary, AB T2A 6L8'\n  },\n  'Calgary Cleaners': { \n    lat: 51.0447, \n    lng: -114.0719, \n    city: 'LG0VGFKQ25XED',\n    address: '555 Centre St, Calgary, AB'\n  }\n};\n\n// Define specific city-laundromat associations\nconst CITY_LAUNDROMAT_MAPPING = {\n  'LYGRRATQ7EGG2': ['Tommy Suds', 'London Sudz', 'Royal City Cleaners'], // London\n  'L4NE8GPX89J3A': ['Browns', 'Ace Cleaners', 'Khawla', 'Spins'], // Ottawa\n  'LDK6Z980JTKXY': ['Centreville Laundry', 'KW Washateria'], // Kitchener\n  'LXMC6DWVJ5N7W': ['Laundry Closet', 'Soapy Bubbles'], // Hamilton\n  'LG0VGFKQ25XED': ['Marbank', 'Calgary Cleaners'] // Calgary\n};\n\n// Generate a predefined set of laundomat names and IDs for each city\nexport const CITY_LAUNDROMATS = {};\n\n// Use real laundromat names and locations\nObject.keys(CITY_CENTERS).forEach(cityId => {\n  CITY_LAUNDROMATS[cityId] = [];\n  \n  // Get laundromats for this city\n  const laundromatNames = CITY_LAUNDROMAT_MAPPING[cityId] || [];\n  \n  laundromatNames.forEach((name, index) => {\n    const laundromatId = `${cityId.substring(0, 5)}_${name.replace(/\\s+/g, '_')}`;\n    \n    CITY_LAUNDROMATS[cityId].push({\n      id: laundromatId,\n      name: name,\n      address: LAUNDROMAT_LOCATIONS[name]?.address || `Unknown Address in ${CITY_MAPPING[cityId]}`\n    });\n  });\n  \n  // If we don't have enough real laundromats, add some generated ones\n  const neededCount = 5 - CITY_LAUNDROMATS[cityId].length;\n  if (neededCount > 0) {\n    for (let i = 0; i < neededCount; i++) {\n      const cityName = CITY_MAPPING[cityId];\n      const suffixes = ['Cleaners', 'Laundry', 'Wash & Fold', 'Express Wash', 'Laundromat'];\n      const name = `${cityName} ${suffixes[i % suffixes.length]} ${i+1}`;\n      const laundromatId = `${cityId.substring(0, 5)}_LAUNDRY_${i+1}`;\n      \n      CITY_LAUNDROMATS[cityId].push({\n        id: laundromatId,\n        name: name,\n        address: `123 Main St, ${cityName}`\n      });\n    }\n  }\n});\n\n// Helper function to check if date is in current month (to exclude March 2024 data)\nconst isCurrentMonth = (dateString) => {\n  if (!dateString) return false;\n  try {\n    const date = parseISO(dateString);\n    const now = new Date();\n    return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n  } catch (e) {\n    return false;\n  }\n};\n\n// Process the raw data\nexport const processAppointmentsData = (data) => {\n  try {\n    // Ensure data is an array\n    if (!Array.isArray(data)) {\n      throw new Error('Data is not in the expected format');\n    }\n\n    // Filter out incomplete records or those without necessary fields\n    // Also filter out March 2024 data\n    const validAppointments = data.filter(appointment => \n      appointment && \n      appointment.cityId && \n      appointment.customerType &&\n      appointment.pickup &&\n      appointment.cleaning && \n      appointment.status !== \"CANCELLED_BY_SELLER\" &&\n      (!appointment.pickup.serviceDate || !isCurrentMonth(appointment.pickup.serviceDate))\n    );\n\n    return validAppointments;\n  } catch (error) {\n    console.error('Error processing appointment data:', error);\n    return [];\n  }\n};\n\n// Get city statistics\nexport const getCityStatistics = (appointments) => {\n  try {\n    const cityStats = {};\n    \n    // Initialize stats for each known city\n    Object.keys(CITY_MAPPING).forEach(cityId => {\n      cityStats[cityId] = {\n        id: cityId,\n        name: CITY_MAPPING[cityId],\n        orders: 0,\n        revenue: 0,\n        avgOrderValue: 0,\n        customers: new Set(),\n        laundromats: new Set(),\n        customerTypes: {\n          Residential: 0,\n          Commercial: 0,\n          Airbnb: 0,\n          Monthly: 0\n        }\n      };\n    });\n\n    // Aggregate data by city\n    appointments.forEach(appointment => {\n      const cityId = appointment.cityId;\n      \n      // Skip if city is not in our mapping\n      if (!cityStats[cityId]) return;\n      \n      // Count order\n      cityStats[cityId].orders += 1;\n      \n      // Add revenue\n      const revenue = parseFloat(appointment.invoiceTotal || 0);\n      cityStats[cityId].revenue += isNaN(revenue) ? 0 : revenue;\n      \n      // Track unique customers\n      if (appointment.customerId) {\n        cityStats[cityId].customers.add(appointment.customerId);\n      }\n      \n      // Track unique laundromats/cleaners\n      if (appointment.cleaning && appointment.cleaning.cleaner) {\n        cityStats[cityId].laundromats.add(appointment.cleaning.cleaner);\n      }\n      \n      // Track customer types\n      if (appointment.customerType) {\n        cityStats[cityId].customerTypes[appointment.customerType] = \n          (cityStats[cityId].customerTypes[appointment.customerType] || 0) + 1;\n      }\n    });\n    \n    // Calculate averages and convert sets to counts\n    Object.keys(cityStats).forEach(cityId => {\n      const stats = cityStats[cityId];\n      stats.avgOrderValue = stats.orders > 0 ? (stats.revenue / stats.orders) : 0;\n      stats.customers = stats.customers.size;\n      stats.laundromats = stats.laundromats.size;\n    });\n    \n    return Object.values(cityStats);\n  } catch (error) {\n    console.error('Error calculating city statistics:', error);\n    return [];\n  }\n};\n\n// Get laundromat statistics\nexport const getLaundromatStatistics = (appointments) => {\n  try {\n    const laundromatStats = {};\n    const customerToLaundromat = {};\n    \n    // Process each appointment\n    appointments.forEach(appointment => {\n      // Skip if no customer or cleaning data\n      if (!appointment.customerId || !appointment.cleaning) return;\n      \n      const customerId = appointment.customerId;\n      const cleanerId = appointment.cleaning.cleaner;\n      const appointmentDate = appointment.pickup?.serviceDate ? new Date(appointment.pickup.serviceDate) : null;\n      \n      // Initialize laundromat stats if not exists\n      if (!laundromatStats[cleanerId]) {\n        laundromatStats[cleanerId] = {\n          id: cleanerId,\n          name: cleanerId,\n          orders: 0,\n          revenue: 0,\n          customers: new Set(),\n          returningCustomers: new Set(),\n          turnaroundTimes: [],\n          orderWeights: [],\n          averageOrderValue: 0\n        };\n      }\n      \n      // Skip if laundromat not found (shouldn't happen, but just in case)\n      if (!laundromatStats[cleanerId]) return;\n      \n      // Count order\n      laundromatStats[cleanerId].orders += 1;\n      \n      // Add revenue\n      const revenue = parseFloat(appointment.invoiceTotal || 0);\n      laundromatStats[cleanerId].revenue += isNaN(revenue) ? 0 : revenue;\n      \n      // Track unique customers\n      laundromatStats[cleanerId].customers.add(customerId);\n      \n      // Track returning customers\n      if (customerToLaundromat[customerId] === cleanerId) {\n        laundromatStats[cleanerId].returningCustomers.add(customerId);\n      } else {\n        customerToLaundromat[customerId] = cleanerId;\n      }\n      \n      // Calculate turnaround time (drop date - pickup date)\n      if (appointment.pickup?.serviceDate && appointment.drop?.serviceDate) {\n        const pickupDate = new Date(appointment.pickup.serviceDate);\n        const dropDate = new Date(appointment.drop.serviceDate);\n        const turnaroundDays = (dropDate - pickupDate) / (1000 * 60 * 60 * 24);\n        laundromatStats[cleanerId].turnaroundTimes.push(turnaroundDays);\n      }\n      \n      // Track order weights\n      if (appointment.cleaning.orderDetails && appointment.cleaning.orderDetails.washFoldWeight) {\n        const weight = parseFloat(appointment.cleaning.orderDetails.washFoldWeight);\n        if (!isNaN(weight)) {\n          laundromatStats[cleanerId].orderWeights.push(weight);\n        }\n      }\n    });\n    \n    // Calculate averages and finalize stats\n    Object.keys(laundromatStats).forEach(cleanerId => {\n      const stats = laundromatStats[cleanerId];\n      \n      // Calculate average order value\n      stats.averageOrderValue = stats.orders > 0 ? stats.revenue / stats.orders : 0;\n      \n      // Calculate average turnaround time\n      const totalTurnaroundDays = stats.turnaroundTimes.reduce((sum, days) => sum + days, 0);\n      stats.averageTurnaroundDays = stats.turnaroundTimes.length > 0 ? totalTurnaroundDays / stats.turnaroundTimes.length : 0;\n      \n      // Calculate average order weight\n      const totalWeight = stats.orderWeights.reduce((sum, weight) => sum + weight, 0);\n      stats.averageOrderWeight = stats.orderWeights.length > 0 ? totalWeight / stats.orderWeights.length : 0;\n      \n      // Convert sets to counts\n      stats.customerCount = stats.customers.size;\n      stats.returningCustomerCount = stats.returningCustomers.size;\n      stats.retentionRate = stats.customerCount > 0 ? stats.returningCustomerCount / stats.customerCount : 0;\n      \n      // Remove sets (they can't be serialized to JSON)\n      delete stats.customers;\n      delete stats.returningCustomers;\n    });\n    \n    // MODIFIED: Filter to only include laundromats with significant orders (at least 5 orders)\n    // Then sort by number of orders and take the top 3\n    return Object.values(laundromatStats)\n      .filter(stats => stats.orders >= 5)\n      .sort((a, b) => b.orders - a.orders)\n      .slice(0, 3);\n      \n  } catch (error) {\n    console.error('Error calculating laundromat statistics:', error);\n    return [];\n  }\n};\n\n// Get customer type distribution\nexport const getCustomerTypeDistribution = (appointments) => {\n  try {\n    const typeCounts = {};\n    \n    appointments.forEach(appointment => {\n      if (!appointment.customerType) return;\n      \n      typeCounts[appointment.customerType] = (typeCounts[appointment.customerType] || 0) + 1;\n    });\n    \n    return Object.entries(typeCounts).map(([name, value]) => ({ name, value }));\n  } catch (error) {\n    console.error('Error calculating customer type distribution:', error);\n    return [];\n  }\n};\n\n// Get monthly orders trend\nexport const getMonthlyOrdersTrend = (appointments, monthsToShow = 12) => {\n  try {\n    const now = new Date();\n    const monthlyData = {};\n    \n    // Initialize the data structure for each month\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthDate = subMonths(now, i);\n      \n      // Skip current month (March 2024)\n      if (monthDate.getMonth() === now.getMonth() && \n          monthDate.getFullYear() === now.getFullYear()) {\n        continue;\n      }\n      \n      const monthKey = format(monthDate, 'yyyy-MM');\n      const monthName = format(monthDate, 'MMM yyyy');\n      \n      monthlyData[monthKey] = {\n        name: monthName,\n        month: monthKey,\n        date: monthDate,\n        total: 0\n      };\n      \n      // Initialize count for each city\n      Object.values(CITY_MAPPING).forEach(cityName => {\n        monthlyData[monthKey][cityName] = 0;\n      });\n    }\n    \n    // Aggregate orders by month and city\n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Skip current month (March 2024)\n        if (isCurrentMonth(appointment.pickup.serviceDate)) {\n          return;\n        }\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        \n        // Skip if not in our range of months\n        if (!monthlyData[monthKey]) return;\n        \n        // Increment total\n        monthlyData[monthKey].total += 1;\n        \n        // Increment city count\n        const cityName = CITY_MAPPING[appointment.cityId];\n        if (cityName) {\n          monthlyData[monthKey][cityName] = (monthlyData[monthKey][cityName] || 0) + 1;\n        }\n      } catch (error) {\n        // Skip this appointment if date parsing fails\n      }\n    });\n    \n    // Convert object to array sorted by month\n    return Object.values(monthlyData).sort((a, b) => a.month.localeCompare(b.month));\n  } catch (error) {\n    console.error('Error calculating monthly order trend:', error);\n    return [];\n  }\n};\n\n// Get average order value trends\nexport const getAvgOrderValueTrend = (appointments, monthsToShow = 12) => {\n  try {\n    const now = new Date();\n    const monthlyData = {};\n    \n    // Initialize the data structure for each month\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthDate = subMonths(now, i);\n      \n      // Skip current month (March 2024)\n      if (monthDate.getMonth() === now.getMonth() && \n          monthDate.getFullYear() === now.getFullYear()) {\n        continue;\n      }\n      \n      const monthKey = format(monthDate, 'yyyy-MM');\n      const monthName = format(monthDate, 'MMM yyyy');\n      \n      monthlyData[monthKey] = {\n        name: monthName,\n        month: monthKey,\n        date: monthDate,\n        orderCount: 0,\n        totalRevenue: 0,\n        value: 0  // Will be calculated as average\n      };\n    }\n    \n    // Aggregate order values by month\n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Skip current month (March 2024)\n        if (isCurrentMonth(appointment.pickup.serviceDate)) {\n          return;\n        }\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        \n        // Skip if not in our range of months\n        if (!monthlyData[monthKey]) return;\n        \n        // Add to totals if there's an invoice amount\n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        if (!isNaN(revenue) && revenue > 0) {\n          monthlyData[monthKey].orderCount += 1;\n          monthlyData[monthKey].totalRevenue += revenue;\n        }\n      } catch (error) {\n        // Skip this appointment if date parsing fails\n      }\n    });\n    \n    // Calculate averages\n    Object.values(monthlyData).forEach(month => {\n      month.value = month.orderCount > 0 \n        ? month.totalRevenue / month.orderCount \n        : 0;\n    });\n    \n    // Convert object to array sorted by month\n    return Object.values(monthlyData)\n      .sort((a, b) => a.month.localeCompare(b.month))\n      .map(({ name, value, date }) => ({ name, value: parseFloat(value.toFixed(2)), date }));\n  } catch (error) {\n    console.error('Error calculating average order value trend:', error);\n    return [];\n  }\n};\n\n// Get geospatial data for mapping\nexport const getGeospatialData = (appointments) => {\n  // This would ideally use geocoding to convert addresses to coordinates\n  // For now, we'll return basic location data that could be used with a geocoding service\n  try {\n    return appointments\n      .filter(appointment => appointment.pickup && appointment.pickup.from)\n      .map(appointment => ({\n        id: appointment.appointmentId,\n        address: appointment.pickup.from,\n        city: CITY_MAPPING[appointment.cityId] || 'Unknown',\n        customerType: appointment.customerType,\n        status: appointment.status,\n        revenue: parseFloat(appointment.invoiceTotal || 0)\n      }));\n  } catch (error) {\n    console.error('Error extracting geospatial data:', error);\n    return [];\n  }\n};\n\n// Get customer retention metrics\nexport const getCustomerRetentionMetrics = (appointments) => {\n  try {\n    const customerOrders = {};\n    const customerFirstOrderDate = {};\n    const customerLastOrderDate = {};\n    \n    // Track orders per customer and their order dates\n    appointments.forEach(appointment => {\n      if (!appointment.customerId || !appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      const customerId = appointment.customerId;\n      try {\n        const orderDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Count orders\n        customerOrders[customerId] = (customerOrders[customerId] || 0) + 1;\n        \n        // Track first order date\n        if (!customerFirstOrderDate[customerId] || \n            orderDate < customerFirstOrderDate[customerId]) {\n          customerFirstOrderDate[customerId] = orderDate;\n        }\n        \n        // Track last order date\n        if (!customerLastOrderDate[customerId] || \n            orderDate > customerLastOrderDate[customerId]) {\n          customerLastOrderDate[customerId] = orderDate;\n        }\n      } catch (error) {\n        // Skip if date parsing fails\n      }\n    });\n    \n    // Calculate metrics\n    const totalCustomers = Object.keys(customerOrders).length;\n    const returningCustomers = Object.values(customerOrders).filter(count => count > 1).length;\n    const retentionRate = totalCustomers > 0 ? returningCustomers / totalCustomers : 0;\n    \n    // Average orders per customer\n    const averageOrdersPerCustomer = totalCustomers > 0 \n      ? Object.values(customerOrders).reduce((sum, count) => sum + count, 0) / totalCustomers\n      : 0;\n    \n    // Average time between first and last order (customer lifetime in days)\n    let totalLifetimeDays = 0;\n    let customersWithMultipleOrders = 0;\n    \n    Object.keys(customerOrders).forEach(customerId => {\n      if (customerOrders[customerId] > 1 && \n          customerFirstOrderDate[customerId] && \n          customerLastOrderDate[customerId]) {\n        const days = differenceInDays(\n          customerLastOrderDate[customerId],\n          customerFirstOrderDate[customerId]\n        );\n        if (days > 0) {\n          totalLifetimeDays += days;\n          customersWithMultipleOrders++;\n        }\n      }\n    });\n    \n    const averageCustomerLifetime = customersWithMultipleOrders > 0 \n      ? totalLifetimeDays / customersWithMultipleOrders \n      : 0;\n    \n    return {\n      totalCustomers,\n      returningCustomers,\n      retentionRate,\n      averageOrdersPerCustomer,\n      averageCustomerLifetime\n    };\n  } catch (error) {\n    console.error('Error calculating customer retention metrics:', error);\n    return {\n      totalCustomers: 0,\n      returningCustomers: 0,\n      retentionRate: 0,\n      averageOrdersPerCustomer: 0,\n      averageCustomerLifetime: 0\n    };\n  }\n};\n\n// Get customer to laundromat flow data (for Sankey diagrams)\nexport const getCustomerLaundromatFlow = (appointments) => {\n  try {\n    const flows = [];\n    const customerLaundromatRecords = {};\n    \n    // Create unique customer-laundromat pairs\n    appointments.forEach(appointment => {\n      if (!appointment.customerId || \n          !appointment.cleaning || \n          !appointment.cleaning.cleaner) return;\n      \n      const customerId = appointment.customerId;\n      const laundromatId = appointment.cleaning.cleaner;\n      const key = `${customerId}-${laundromatId}`;\n      \n      if (!customerLaundromatRecords[key]) {\n        customerLaundromatRecords[key] = {\n          customer: customerId,\n          laundromat: laundromatId,\n          count: 0\n        };\n      }\n      \n      customerLaundromatRecords[key].count++;\n    });\n    \n    // Convert to flow data suitable for Sankey diagrams\n    Object.values(customerLaundromatRecords).forEach(record => {\n      flows.push({\n        source: record.customer.substring(0, 8) + '...',\n        target: record.laundromat.substring(0, 8) + '...',\n        value: record.count\n      });\n    });\n    \n    // Filter to most significant flows for readability\n    return flows\n      .sort((a, b) => b.value - a.value)\n      .slice(0, 20);  // Limit to top 20 flows\n    \n  } catch (error) {\n    console.error('Error calculating customer-laundromat flow:', error);\n    return [];\n  }\n};\n\n// Get driver performance metrics\nexport const getDriverPerformanceMetrics = (appointments) => {\n  try {\n    const driverStats = {};\n    \n    // Process pickup and dropoff data\n    appointments.forEach(appointment => {\n      // Process pickup\n      if (appointment.pickup && appointment.pickup.driver) {\n        const driverId = appointment.pickup.driver;\n        \n        if (!driverStats[driverId]) {\n          driverStats[driverId] = {\n            id: driverId,\n            totalPickups: 0,\n            totalDropoffs: 0,\n            totalDistance: 0,\n            totalPay: 0,\n            completedPickups: 0,\n            completedDropoffs: 0,\n            cancelledServices: 0\n          };\n        }\n        \n        driverStats[driverId].totalPickups++;\n        \n        if (appointment.pickup.status === 'COMPLETED') {\n          driverStats[driverId].completedPickups++;\n        } else if (appointment.pickup.status === 'CANCELLED_BY_SELLER') {\n          driverStats[driverId].cancelledServices++;\n        }\n        \n        const distance = parseFloat(appointment.pickup.distance || 0);\n        if (!isNaN(distance)) {\n          driverStats[driverId].totalDistance += distance;\n        }\n        \n        const pay = parseFloat(appointment.pickup.basePay || 0);\n        if (!isNaN(pay)) {\n          driverStats[driverId].totalPay += pay;\n        }\n      }\n      \n      // Process dropoff\n      if (appointment.dropoff && appointment.dropoff.driver) {\n        const driverId = appointment.dropoff.driver;\n        \n        if (!driverStats[driverId]) {\n          driverStats[driverId] = {\n            id: driverId,\n            totalPickups: 0,\n            totalDropoffs: 0,\n            totalDistance: 0,\n            totalPay: 0,\n            completedPickups: 0,\n            completedDropoffs: 0,\n            cancelledServices: 0\n          };\n        }\n        \n        driverStats[driverId].totalDropoffs++;\n        \n        if (appointment.dropoff.status === 'COMPLETED') {\n          driverStats[driverId].completedDropoffs++;\n        } else if (appointment.dropoff.status === 'CANCELLED_BY_SELLER') {\n          driverStats[driverId].cancelledServices++;\n        }\n        \n        const distance = parseFloat(appointment.dropoff.distance || 0);\n        if (!isNaN(distance)) {\n          driverStats[driverId].totalDistance += distance;\n        }\n        \n        const pay = parseFloat(appointment.dropoff.basePay || 0);\n        if (!isNaN(pay)) {\n          driverStats[driverId].totalPay += pay;\n        }\n      }\n    });\n    \n    // Calculate derived metrics\n    Object.keys(driverStats).forEach(driverId => {\n      const stats = driverStats[driverId];\n      \n      stats.totalServices = stats.totalPickups + stats.totalDropoffs;\n      stats.completedServices = stats.completedPickups + stats.completedDropoffs;\n      stats.completionRate = stats.totalServices > 0 \n        ? stats.completedServices / stats.totalServices \n        : 0;\n      \n      stats.avgDistancePerService = stats.totalServices > 0 \n        ? stats.totalDistance / stats.totalServices \n        : 0;\n        \n      stats.avgPayPerDistance = stats.totalDistance > 0 \n        ? stats.totalPay / stats.totalDistance \n        : 0;\n    });\n    \n    return Object.values(driverStats);\n  } catch (error) {\n    console.error('Error calculating driver performance metrics:', error);\n    return [];\n  }\n};\n\n// Get seasonal trends\nexport const getSeasonalTrends = (appointments) => {\n  try {\n    const quarterlyData = {\n      Q1: { name: \"Q1 (Jan-Mar)\", orders: 0, revenue: 0 },\n      Q2: { name: \"Q2 (Apr-Jun)\", orders: 0, revenue: 0 },\n      Q3: { name: \"Q3 (Jul-Sep)\", orders: 0, revenue: 0 },\n      Q4: { name: \"Q4 (Oct-Dec)\", orders: 0, revenue: 0 }\n    };\n    \n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        const month = pickupDate.getMonth(); // 0-11\n        \n        let quarter;\n        if (month < 3) quarter = \"Q1\";\n        else if (month < 6) quarter = \"Q2\";\n        else if (month < 9) quarter = \"Q3\";\n        else quarter = \"Q4\";\n        \n        quarterlyData[quarter].orders++;\n        \n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        if (!isNaN(revenue)) {\n          quarterlyData[quarter].revenue += revenue;\n        }\n      } catch (error) {\n        // Skip if date parsing fails\n      }\n    });\n    \n    return Object.values(quarterlyData);\n  } catch (error) {\n    console.error('Error calculating seasonal trends:', error);\n    return [];\n  }\n};\n\n// Get weight distribution\nexport const getWeightDistribution = (appointments) => {\n  try {\n    const weightRanges = {\n      \"0-5kg\": { range: \"0-5kg\", count: 0 },\n      \"6-10kg\": { range: \"6-10kg\", count: 0 },\n      \"11-15kg\": { range: \"11-15kg\", count: 0 },\n      \"16-20kg\": { range: \"16-20kg\", count: 0 },\n      \"21-30kg\": { range: \"21-30kg\", count: 0 },\n      \"31kg+\": { range: \"31kg+\", count: 0 }\n    };\n    \n    appointments.forEach(appointment => {\n      if (!appointment.cleaning || \n          !appointment.cleaning.orderDetails ||\n          !appointment.cleaning.orderDetails.washFoldWeight) return;\n      \n      const weight = parseFloat(appointment.cleaning.orderDetails.washFoldWeight);\n      if (isNaN(weight)) return;\n      \n      let range;\n      if (weight <= 5) range = \"0-5kg\";\n      else if (weight <= 10) range = \"6-10kg\";\n      else if (weight <= 15) range = \"11-15kg\";\n      else if (weight <= 20) range = \"16-20kg\";\n      else if (weight <= 30) range = \"21-30kg\";\n      else range = \"31kg+\";\n      \n      weightRanges[range].count++;\n    });\n    \n    return Object.values(weightRanges);\n  } catch (error) {\n    console.error('Error calculating weight distribution:', error);\n    return [];\n  }\n};\n\n// Get London specific order locations for Google Maps\nexport const getLondonOrderLocations = (appointments) => {\n  try {\n    return appointments\n      .filter(appointment => \n        appointment.cityId === LONDON_CITY_ID &&\n        appointment.pickup && \n        appointment.pickup.to\n      )\n      .map(appointment => ({\n        id: appointment.appointmentId || Math.random().toString(36).substr(2, 9),\n        address: appointment.pickup.to,\n        customerType: appointment.customerType || 'Unknown',\n        revenue: parseFloat(appointment.invoiceTotal || 0) || 0,\n        date: appointment.pickup.serviceDate ? \n          format(parseISO(appointment.pickup.serviceDate), 'MM/dd/yyyy') : 'Unknown'\n      }));\n  } catch (error) {\n    console.error('Error extracting London order locations:', error);\n    return [];\n  }\n};\n\n// Normalize city IDs across different data formats\nexport const normalizeCityId = (appointment) => {\n  // Try different variations of city ID fields\n  const cityId = appointment.cityId || appointment.city_id || appointment.city;\n  \n  // If we have a valid city ID, return it\n  if (cityId && CITY_CENTERS[cityId]) {\n    return cityId;\n  }\n  \n  // Check if the city name matches any of our known city names\n  const cityName = appointment.city || appointment.cityName;\n  if (cityName) {\n    // Convert city name to city ID by finding the matching entry in CITY_MAPPING\n    for (const [id, name] of Object.entries(CITY_MAPPING)) {\n      if (name.toLowerCase() === cityName.toLowerCase()) {\n        return id;\n      }\n    }\n  }\n  \n  // Fallback to London if no valid city ID found\n  return LONDON_CITY_ID;\n};\n\nexport const getLaundromatLocations = async (appointments) => {\n  // Track laundromats by city\n  const laundromatsByCityId = {};\n  \n  // Extract unique city IDs from appointments\n  const cityIds = new Set();\n  appointments.forEach(app => {\n    const cityId = normalizeCityId(app);\n    if (cityId) cityIds.add(cityId);\n  });\n  \n  console.log(\"MAP DEBUG - getLaundromatLocations - City IDs:\", Array.from(cityIds));\n  \n  // If no city data found, use all cities\n  if (cityIds.size === 0) {\n    Object.keys(CITY_CENTERS).forEach(id => cityIds.add(id));\n    console.log(\"MAP DEBUG - No city IDs found, using all cities\");\n  }\n  \n  // Initialize laundromat data for each city\n  Array.from(cityIds).forEach(cityId => {\n    // If we have predefined laundromats for this city, use them\n    if (CITY_LAUNDROMATS[cityId]) {\n      laundromatsByCityId[cityId] = CITY_LAUNDROMATS[cityId].map(laundromat => ({\n        id: laundromat.id,\n        name: laundromat.name,\n        address: laundromat.address,\n        color: LAUNDROMAT_COLORS[cityId] || '#000000',\n        orders: [],\n        cityId: cityId\n      }));\n    }\n  });\n  \n  // Associate appointments with laundromats\n  appointments.forEach(appointment => {\n    const cityId = normalizeCityId(appointment);\n    const laundromatId = appointment.laundromat_id || appointment.laundromatId;\n    \n    if (!cityId || !laundromatsByCityId[cityId]) return;\n    \n    // Add this appointment to a random laundromat in this city\n    const randomIndex = Math.floor(Math.random() * laundromatsByCityId[cityId].length);\n    laundromatsByCityId[cityId][randomIndex].orders.push(appointment);\n  });\n  \n  // Flatten laundomats from all cities\n  const allLaundromats = Object.values(laundromatsByCityId).flat();\n  \n  console.log(`MAP DEBUG - getLaundromatLocations - Generated ${allLaundromats.length} laundromat locations`);\n  \n  // Add location data to laundromats\n  return allLaundromats.map(laundromat => {\n    const cityId = laundromat.cityId;\n    const cityCenter = CITY_CENTERS[cityId] || CITY_CENTERS['LYGRRATQ7EGG2'];\n    \n    // Find the predefined location by name\n    const locationInfo = LAUNDROMAT_LOCATIONS[laundromat.name];\n    \n    if (locationInfo && locationInfo.city === cityId) {\n      return {\n        ...laundromat,\n        lat: locationInfo.lat,\n        lng: locationInfo.lng\n      };\n    }\n    \n    // Generate a position in a circle around the city center\n    const angle = Math.random() * Math.PI * 2; // Random angle\n    const radius = 0.01 + Math.random() * 0.02; // 1-3km from center\n    const lat = cityCenter.lat + Math.cos(angle) * radius;\n    const lng = cityCenter.lng + Math.sin(angle) * radius;\n    \n    return {\n      ...laundromat,\n      lat,\n      lng\n    };\n  });\n};\n\nexport const getOrderLocations = async (appointments) => {\n  console.log(`MAP DEBUG - getOrderLocations - Starting with ${appointments.length} appointments`);\n  \n  // Check city distribution\n  const cityDistribution = appointments.reduce((acc, app) => {\n    const cityId = normalizeCityId(app);\n    acc[cityId] = (acc[cityId] || 0) + 1;\n    return acc;\n  }, {});\n  \n  console.log(\"MAP DEBUG - getOrderLocations - City distribution:\", cityDistribution);\n  \n  // Get a sample of appointments for display - increased to 500 to show more data\n  const sampleSize = Math.min(appointments.length, 500);  \n  const sampledAppointments = appointments.slice(0, sampleSize);\n  \n  // Extract unique city IDs\n  const cityIds = new Set();\n  sampledAppointments.forEach(app => {\n    const cityId = normalizeCityId(app);\n    if (cityId) cityIds.add(cityId);\n  });\n  \n  console.log(\"MAP DEBUG - getOrderLocations - Unique cities in sample:\", Array.from(cityIds));\n  \n  // Generate mock laundromat associations if needed\n  const laundromatsById = {};\n  const laundromatsByName = {};\n  \n  // Get laundromats for each city\n  Array.from(cityIds).forEach(cityId => {\n    if (CITY_LAUNDROMATS[cityId]) {\n      CITY_LAUNDROMATS[cityId].forEach(laundromat => {\n        laundromatsById[laundromat.id] = {\n          name: laundromat.name,\n          address: laundromat.address,\n          cityId: cityId,\n          color: LAUNDROMAT_COLORS[cityId] || '#000000'\n        };\n        laundromatsByName[laundromat.name] = {\n          id: laundromat.id,\n          address: laundromat.address,\n          cityId: cityId,\n          color: LAUNDROMAT_COLORS[cityId] || '#000000'\n        };\n      });\n    }\n  });\n  \n  const markers = sampledAppointments.map(appointment => {\n    const cityId = normalizeCityId(appointment);\n    const cityCenter = CITY_CENTERS[cityId] || CITY_CENTERS['LYGRRATQ7EGG2'];\n    \n    // Get or assign a laundromat for this order\n    let laundromatId = appointment.laundromat_id || appointment.laundromatId;\n    let laundromatName = null;\n    \n    if (!laundromatId && CITY_LAUNDROMATS[cityId]) {\n      // Assign a random laundromat from this city\n      const randomIndex = Math.floor(Math.random() * CITY_LAUNDROMATS[cityId].length);\n      laundromatId = CITY_LAUNDROMATS[cityId][randomIndex].id;\n      laundromatName = CITY_LAUNDROMATS[cityId][randomIndex].name;\n    } else if (laundromatId && laundromatsById[laundromatId]) {\n      laundromatName = laundromatsById[laundromatId].name;\n    }\n    \n    // Get laundromat color\n    const laundromatColor = \n      (laundromatsById[laundromatId]?.color) || \n      LAUNDROMAT_COLORS[cityId] || \n      '#000000';\n    \n    // Generate a random position based on the city center and laundromat location\n    let lat, lng;\n    \n    // Try to find the assigned laundromat location\n    const laundromatLocation = laundromatName ? LAUNDROMAT_LOCATIONS[laundromatName] : null;\n    \n    if (laundromatLocation) {\n      // Cluster around the laundromat location\n      const radius = 0.005 + Math.random() * 0.01; // 0.5-1.5km from laundromat (tighter clustering)\n      const angle = Math.random() * Math.PI * 2;\n      lat = laundromatLocation.lat + Math.cos(angle) * radius;\n      lng = laundromatLocation.lng + Math.sin(angle) * radius;\n    } else {\n      // Fallback to city-based distribution\n      const radius = 0.01 + Math.random() * 0.02; // 1-3km spread\n      const angle = Math.random() * Math.PI * 2;\n      lat = cityCenter.lat + Math.cos(angle) * radius;\n      lng = cityCenter.lng + Math.sin(angle) * radius;\n    }\n    \n    return {\n      lat,\n      lng,\n      laundromatColor,\n      cityId, // Add cityId to marker for debugging\n      orderDetails: {\n        customerType: appointment.customerType || appointment.customer_type || 'Unknown',\n        revenue: parseFloat(appointment.revenue || appointment.invoiceTotal || 0),\n        address: appointment.address || (appointment.pickup ? appointment.pickup.to : 'Unknown Address'),\n        laundromatId: laundromatId,\n        laundromatName: laundromatName,\n        city: CITY_MAPPING[cityId] || 'Unknown' // Add city name for debugging\n      }\n    };\n  });\n  \n  console.log(`MAP DEBUG - getOrderLocations - Generated ${markers.length} order markers`);\n  \n  return markers;\n}; ","/**\n * ProjectionImplementation.js\n * \n * This file contains a complete working implementation that you can directly \n * use in your dashboard to add realistic projections with minimal changes \n * to your existing codebase.\n */\n\n// Import formatDate utility if you don't already have it\nimport { format, addWeeks, parse, isValid } from 'date-fns';\n\n// City mapping and constants\nconst CITY_MAPPING = {\n  \"LYGRRATQ7EGG2\": \"London\",\n  \"L4NE8GPX89J3A\": \"Ottawa\",\n  \"LDK6Z980JTKXY\": \"Kitchener-Waterloo\",\n  \"LXMC6DWVJ5N7W\": \"Hamilton\",\n  \"LG0VGFKQ25XED\": \"Calgary\",\n  \"all\": \"All Cities\"\n};\n\n// City population data and growth factors - all increased to ensure positive growth\nconst CITY_DATA = {\n  \"LYGRRATQ7EGG2\": { // London\n    name: \"London\",\n    population: 400000,\n    yearlyGrowthFactor: 1.35, // Increased to 35% yearly growth for strong upward trend\n    operationalSince: new Date(\"2022-12-01\"),\n    marketMaturity: 0.15, // Reduced market maturity to allow stronger growth\n    minWeeklyOrders: 80 // Minimum weekly orders for projections\n  },\n  \"L4NE8GPX89J3A\": { // Ottawa\n    name: \"Ottawa\",\n    population: 1050000,\n    yearlyGrowthFactor: 1.28, // Increased to 28% yearly growth\n    operationalSince: new Date(\"2023-03-15\"),\n    marketMaturity: 0.35,\n    minWeeklyOrders: 35\n  },\n  \"LDK6Z980JTKXY\": { // Kitchener-Waterloo\n    name: \"Kitchener-Waterloo\",\n    population: 575000,\n    yearlyGrowthFactor: 1.32, // Increased to 32% yearly growth\n    operationalSince: new Date(\"2023-06-01\"),\n    marketMaturity: 0.30,\n    minWeeklyOrders: 40\n  }, \n  \"LXMC6DWVJ5N7W\": { // Hamilton\n    name: \"Hamilton\",\n    population: 570000,\n    yearlyGrowthFactor: 1.25, // Increased to 25% yearly growth\n    operationalSince: new Date(\"2023-09-10\"),\n    marketMaturity: 0.35,\n    minWeeklyOrders: 30\n  },\n  \"LG0VGFKQ25XED\": { // Calgary\n    name: \"Calgary\",\n    population: 1300000,\n    yearlyGrowthFactor: 1.40, // Increased to 40% yearly growth\n    operationalSince: new Date(\"2023-11-20\"),\n    marketMaturity: 0.20,\n    minWeeklyOrders: 25\n  }\n};\n\n// Weekly seasonality factors - more granular for weekly projections\nconst WEEKLY_SEASONALITY = {\n  0: 0.98,  // Week 1 of month\n  1: 1.00,  // Week 2 of month\n  2: 1.05,  // Week 3 of month\n  3: 1.08,  // Week 4 of month\n  4: 0.95,  // Week 5 of month (when applicable)\n};\n\n// Monthly seasonality factors \nconst MONTHLY_SEASONALITY = {\n  0: 0.95,  // January\n  1: 0.98,  // February\n  2: 1.02,  // March\n  3: 1.05,  // April\n  4: 1.08,  // May\n  5: 1.12,  // June\n  6: 1.10,  // July\n  7: 1.05,  // August\n  8: 1.10,  // September\n  9: 1.05,  // October\n  10: 1.00, // November\n  11: 0.98  // December\n};\n\n/**\n * Generate weekly projections for a given set of monthly orders data\n * \n * @param {Array} monthlyData - Array of monthly order data points in your existing format\n * @param {string} selectedCity - The currently selected city ID ('all' or a specific city ID)\n * @param {number} weeks - Number of weeks to project forward\n * @returns {Object} Combined historical and projected data with metrics\n */\nexport function generateProjections(monthlyData, selectedCity, weeks = 52) {\n  // Handle case where no data is available\n  if (!monthlyData || monthlyData.length === 0) {\n    return {\n      combined: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      }\n    };\n  }\n  \n  // Get historical data for the selected city - only use data until October\n  const historicalData = preprocessHistoricalData(monthlyData, selectedCity);\n  \n  // Filter out data after October 2024 for projection calculations\n  const cutoffDate = new Date(2024, 9, 31); // October 31, 2024\n  \n  const filteredHistoricalData = historicalData.filter(month => {\n    // Try to parse the date from month name (e.g., \"Oct 2024\")\n    let monthDate;\n    try {\n      const parts = month.name.split(' ');\n      const monthName = parts[0];\n      const year = parseInt(parts[1]);\n      \n      // Map month name to month number\n      const monthMap = {\n        'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n        'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n      };\n      \n      if (monthMap[monthName] !== undefined && !isNaN(year)) {\n        monthDate = new Date(year, monthMap[monthName], 1);\n      }\n    } catch (e) {\n      console.error(\"Error parsing date from month name:\", month.name, e);\n    }\n    \n    // Include the month if we couldn't parse the date or if it's before the cutoff\n    return !monthDate || monthDate <= cutoffDate;\n  });\n  \n  // Get the last data point as baseline\n  const lastHistoricalPoint = filteredHistoricalData.length > 0 \n    ? filteredHistoricalData[filteredHistoricalData.length - 1] \n    : historicalData[historicalData.length - 1];\n  \n  // If no valid data point exists, return empty result\n  if (!lastHistoricalPoint) {\n    return {\n      combined: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      }\n    };\n  }\n  \n  // Set up city-specific parameters\n  const cityParams = selectedCity !== 'all' ? CITY_DATA[selectedCity] : {\n    name: \"All Cities\",\n    yearlyGrowthFactor: 1.28, // Increased default growth factor\n    marketMaturity: 0.25, // Reduced market maturity\n    minWeeklyOrders: 85\n  };\n  \n  // Extract base information from last historical point\n  let baseMonthlyOrders = lastHistoricalPoint.orders;\n  \n  // Convert monthly orders to approximate weekly orders\n  let baseWeeklyOrders = baseMonthlyOrders / 4.3;\n  \n  // Ensure base weekly orders meet the minimum for city\n  baseWeeklyOrders = Math.max(baseWeeklyOrders, cityParams.minWeeklyOrders || 20);\n  \n  // Calculate a more appropriate baseline - use average of data until Oct\n  let baselineForGrowth;\n  if (filteredHistoricalData.length >= 3) {\n    // Calculate average excluding any extreme outliers\n    const values = filteredHistoricalData.map(m => m.orders);\n    const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n    \n    // For weekly conversion\n    baselineForGrowth = avg / 4.3;\n    \n    // Ensure it meets minimum\n    baselineForGrowth = Math.max(baselineForGrowth, cityParams.minWeeklyOrders || 20);\n  } else {\n    baselineForGrowth = baseWeeklyOrders;\n  }\n  \n  // Parse the month and year from the last data point\n  const monthNameMap = {\n    'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n    'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n  };\n  \n  // Parse month and year\n  const [monthName, yearStr] = lastHistoricalPoint.name.split(' ');\n  const startMonth = monthNameMap[monthName];\n  const startYear = parseInt(yearStr);\n  \n  let startDate = new Date(startYear, startMonth, 15); // Middle of the month\n  \n  // Set current date as today unless using filtered data\n  const currentDate = new Date();\n  \n  // Calculate weekly growth factor\n  const yearlyGrowthFactor = cityParams.yearlyGrowthFactor || 1.28;\n  const weeklyGrowthFactor = Math.pow(yearlyGrowthFactor, 1/52);\n  \n  // Adjust for market maturity - with reduced impact\n  const maturityFactor = 1 - (cityParams.marketMaturity || 0.25) * 0.15; \n  const adjustedWeeklyGrowth = weeklyGrowthFactor * maturityFactor;\n  \n  // Generate projected data\n  const projectedData = [];\n  let currentOrders = baseWeeklyOrders;\n  \n  // For projections, start from today's date and project forward\n  let projectionStartDate = new Date();\n  \n  for (let i = 0; i < weeks; i++) {\n    // Calculate date for this week\n    const weekDate = addWeeks(projectionStartDate, i);\n    const weekOfMonth = Math.floor(weekDate.getDate() / 7);\n    const month = weekDate.getMonth();\n    \n    // Apply growth factor (compounding weekly)\n    currentOrders *= adjustedWeeklyGrowth;\n    \n    // Apply weekly and monthly seasonality\n    const weeklyFactor = WEEKLY_SEASONALITY[weekOfMonth] || 1;\n    const monthlyFactor = MONTHLY_SEASONALITY[month] || 1;\n    currentOrders *= weeklyFactor * monthlyFactor;\n    \n    // Apply small random variation\n    const variation = 1 + (Math.random() * 0.03 - 0.015); // Small random factor\n    currentOrders *= variation;\n    \n    // Ensure orders never fall below minimum\n    currentOrders = Math.max(currentOrders, cityParams.minWeeklyOrders || 20);\n    \n    // Format date and add to projections\n    const formattedDate = format(weekDate, 'MMM d, yyyy');\n    const shortDate = format(weekDate, 'MMM d');\n    projectedData.push({\n      name: shortDate,\n      fullname: formattedDate,\n      orders: Math.round(currentOrders),\n      projected: true,\n      month: format(weekDate, 'yyyy-MM'),\n      week: format(weekDate, 'yyyy-MM-dd')\n    });\n  }\n  \n  // Generate weekly historical data points\n  const weeklyHistoricalData = generateWeeklyHistoricalPoints(historicalData);\n  \n  // Calculate metrics\n  const totalOrders = projectedData.reduce((sum, week) => sum + week.orders, 0);\n  const totalOrdersMonthly = totalOrders / 4.3; // Convert weekly to monthly equivalent\n  const avgWeeklyOrders = totalOrders / projectedData.length;\n  \n  // Calculate growth percentage using our adjusted baseline\n  const growthPercent = ((avgWeeklyOrders / baselineForGrowth) - 1) * 100;\n  \n  // Combine historical and projected data\n  const combined = [\n    ...weeklyHistoricalData.map(week => ({\n      ...week,\n      projected: false\n    })),\n    ...projectedData\n  ];\n  \n  return {\n    combined,\n    weeklyHistoricalData,\n    projectedData,\n    metrics: {\n      totalAnnualOrders: Math.round(totalOrdersMonthly * 12),\n      averageMonthlyOrders: Math.round(avgWeeklyOrders * 4.3),\n      averageWeeklyOrders: Math.round(avgWeeklyOrders),\n      projectedGrowthPercent: growthPercent,\n      cityName: CITY_MAPPING[selectedCity] || 'Unknown'\n    }\n  };\n}\n\n/**\n * Generate weekly data points from monthly data\n */\nfunction generateWeeklyHistoricalPoints(monthlyData) {\n  if (!monthlyData || monthlyData.length < 2) return monthlyData;\n  \n  const weeklyData = [];\n  \n  // For each month, generate 4-5 weekly points\n  for (let i = 0; i < monthlyData.length; i++) {\n    const month = monthlyData[i];\n    \n    // Parse month and year\n    const parts = month.name.split(' ');\n    const monthName = parts[0];\n    const year = parseInt(parts[1]);\n    \n    // Map month name to month number\n    const monthMap = {\n      'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n      'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n    };\n    \n    if (monthMap[monthName] === undefined || isNaN(year)) {\n      // If we can't parse the date, just add the month as is\n      weeklyData.push(month);\n      continue;\n    }\n    \n    const monthNumber = monthMap[monthName];\n    const baseDate = new Date(year, monthNumber, 1);\n    \n    // Number of weeks in this month (usually 4, sometimes 5)\n    const daysInMonth = new Date(year, monthNumber + 1, 0).getDate();\n    const weeksInMonth = Math.ceil(daysInMonth / 7);\n    \n    // Get next month's data for interpolation if available\n    const nextMonth = monthlyData[i + 1];\n    let nextMonthOrders = month.orders;\n    if (nextMonth) {\n      nextMonthOrders = nextMonth.orders;\n    }\n    \n    // Calculate weekly distribution based on general patterns\n    // This creates a natural-looking curve between months\n    for (let week = 0; week < weeksInMonth; week++) {\n      // Calculate week's date\n      const weekDay = Math.min(week * 7 + 1, daysInMonth);\n      const weekDate = new Date(year, monthNumber, weekDay);\n      \n      // Calculate position within month (0-1)\n      const position = week / weeksInMonth;\n      \n      // Interpolate between current and next month\n      let weekOrders;\n      if (i < monthlyData.length - 1) {\n        // Linear interpolation between months\n        weekOrders = month.orders * (1 - position) + nextMonthOrders * position;\n      } else {\n        // For the last month, create a gentle trend\n        const factor = 1 + (position - 0.5) * 0.1; // -5% to +5% variation\n        weekOrders = month.orders * factor;\n      }\n      \n      // Apply weekly pattern\n      const weekFactor = WEEKLY_SEASONALITY[week] || 1;\n      weekOrders *= weekFactor;\n      \n      // Add small random variation\n      const randomFactor = 1 + (Math.random() * 0.04 - 0.02); // ±2% random variation\n      weekOrders *= randomFactor;\n      \n      // Format date\n      const shortDate = format(weekDate, 'MMM d');\n      const formattedDate = format(weekDate, 'MMM d, yyyy');\n      \n      weeklyData.push({\n        name: shortDate,\n        fullname: formattedDate,\n        orders: Math.round(weekOrders / weeksInMonth),  // Distribute monthly orders\n        month: format(weekDate, 'yyyy-MM'),\n        week: format(weekDate, 'yyyy-MM-dd'),\n        projected: false\n      });\n    }\n  }\n  \n  return weeklyData;\n}\n\n/**\n * Preprocess historical data to extract the relevant city data\n * \n * @param {Array} monthlyData - Raw monthly data in your existing format\n * @param {string} selectedCity - Selected city ID\n * @returns {Array} Processed historical data for the selected city\n */\nfunction preprocessHistoricalData(monthlyData, selectedCity) {\n  if (!monthlyData || monthlyData.length === 0) return [];\n  \n  // Get city name from mapping\n  const cityName = CITY_MAPPING[selectedCity] || selectedCity;\n  \n  // Extract data for this city\n  return monthlyData\n    .filter(month => {\n      // For 'all' city, use total; otherwise use city-specific data\n      if (selectedCity === 'all') {\n        return month.total !== undefined || \n               Object.values(CITY_MAPPING)\n                 .filter(name => name !== 'All Cities')\n                 .some(name => month[name] !== undefined);\n      } else {\n        return month[cityName] !== undefined;\n      }\n    })\n    .map(month => {\n      // For 'all' city, use total or calculate it\n      let orders;\n      if (selectedCity === 'all') {\n        if (month.total !== undefined) {\n          orders = month.total;\n        } else {\n          // Calculate total from all cities\n          orders = Object.values(CITY_MAPPING)\n            .filter(name => name !== 'All Cities')\n            .reduce((sum, name) => sum + (month[name] || 0), 0);\n        }\n      } else {\n        orders = month[cityName] || 0;\n      }\n      \n      return {\n        name: month.name,\n        orders: orders,\n        month: month.month || null,\n        // Preserve any other properties you need\n        date: month.date || null\n      };\n    })\n    .filter(month => month.orders > 0); // Filter out months with no orders\n}\n\n/**\n * Function to add projections to your existing Dashboard component\n * \n * @param {Array} monthlyOrdersTrend - Your monthly order data\n * @param {string} selectedCity - Currently selected city\n * @returns {Object} Projection data that can be used in your UI\n */\nexport function addProjectionsToComponent(monthlyOrdersTrend, selectedCity) {\n  try {\n    // Generate projections - these will now be weekly\n    const projectionData = generateProjections(monthlyOrdersTrend, selectedCity);\n    \n    return {\n      // Combined historical + projected data for charts\n      combinedOrderTrend: projectionData.combined,\n      \n      // Historical weekly data\n      weeklyHistoricalData: projectionData.weeklyHistoricalData,\n      \n      // Just the projected portion\n      projectedData: projectionData.projectedData,\n      \n      // Metrics for display in cards\n      metrics: projectionData.metrics,\n      \n      // Reference line position (typically today's date)\n      referenceDate: format(new Date(), 'MMM d')\n    };\n  } catch (error) {\n    console.error(\"Error generating projections:\", error);\n    return {\n      combinedOrderTrend: [],\n      weeklyHistoricalData: [],\n      projectedData: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      },\n      referenceDate: format(new Date(), 'MMM d')\n    };\n  }\n} ","import React, { useState, useEffect, useMemo } from 'react';\nimport { \n  Box, Container, Grid, Paper, Typography, \n  AppBar, Toolbar, MenuItem,\n  FormControl, InputLabel, Select,\n  CircularProgress, TextField,\n  Table, TableHead, TableRow, TableCell, TableBody, TableContainer\n} from '@mui/material';\nimport {\n  BarChart, LineChart, PieChart, ComposedChart,\n  Bar, Line, Pie, Area, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, Cell, ResponsiveContainer, ReferenceLine\n} from 'recharts';\nimport { subMonths, format, addMonths } from 'date-fns';\nimport GoogleMapReact from 'google-map-react';\n// Import Lucide React icons for modern UI\nimport Icon from '@mui/material/Icon';\n// Import animation components\nimport { Fade, Grow } from '@mui/material';\nimport { formatDistance, isWithinInterval, startOfDay, endOfDay, isAfter, isBefore } from 'date-fns';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport QuarterlyGrowthByCity from './QuarterlyGrowthByCity';\n\n// Import data utilities\nimport {\n  processAppointmentsData,\n  getCityStatistics,\n  getLaundromatStatistics,\n  getCustomerTypeDistribution,\n  getMonthlyOrdersTrend,\n  getAvgOrderValueTrend,\n  getCustomerRetentionMetrics,\n  getDriverPerformanceMetrics,\n  getSeasonalTrends,\n  getWeightDistribution,\n  LONDON_CITY_ID,\n  getLaundromatLocations,\n  getOrderLocations,\n  CITY_MAPPING,\n  CITY_CENTERS,\n  CITY_LAUNDROMATS,\n  normalizeCityId,\n  LAUNDROMAT_COLORS\n} from '../utils/dataProcessor';\nimport { addProjectionsToComponent } from '../utils/ProjectionImplementation';\n\n// Import custom components\nimport MetricCard from './MetricCard';\nimport Marker from './Marker';\n\n// Chart colors - updated with modern palette\nconst COLORS = ['#1E88E5', '#26A69A', '#FFA726', '#EF5350', '#AB47BC', '#66BB6A', '#EC407A'];\n\nconst Dashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [appointments, setAppointments] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(LONDON_CITY_ID);\n  const [startDate, setStartDate] = useState(subMonths(new Date(), 12));\n  const [endDate, setEndDate] = useState(new Date());\n  const [mapMarkers, setMapMarkers] = useState([]);\n  const [laundromatLocations, setLaundromatLocations] = useState([]);\n\n  // Filter options\n  const [customerTypeFilter, setCustomerTypeFilter] = useState('all');\n  const [laundromatFilter, setLaundromatFilter] = useState('all');\n\n  // Update the map center when city changes\n  const [mapCenter, setMapCenter] = useState(null);\n  const [mapZoom, setMapZoom] = useState(11);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapsApi, setMapsApi] = useState(null);\n\n  // Map laundromat IDs to names based on address comparison\n  const laundromatIdToNameMap = useMemo(() => {\n    const idMap = {};\n    \n    // First create a mapping of locations from our predefined data\n    const knownLocations = {};\n    Object.keys(CITY_LAUNDROMATS).forEach(cityId => {\n      CITY_LAUNDROMATS[cityId].forEach(laundromat => {\n        knownLocations[laundromat.address] = laundromat.name;\n      });\n    });\n    \n    // Analyze appointment data to match cleaners to locations\n    const laundromatAddresses = {};\n    appointments.forEach(appointment => {\n      if (appointment.cleaning && appointment.cleaning.cleaner && appointment.pickup && appointment.pickup.to) {\n        const cleanerId = appointment.cleaning.cleaner;\n        const address = appointment.pickup.to;\n        \n        if (!laundromatAddresses[cleanerId]) {\n          laundromatAddresses[cleanerId] = {};\n        }\n        \n        // Count frequency of addresses for this cleaner\n        laundromatAddresses[cleanerId][address] = (laundromatAddresses[cleanerId][address] || 0) + 1;\n      }\n    });\n    \n    // For each laundromat ID, find most common address and match to our known locations\n    Object.keys(laundromatAddresses).forEach(cleanerId => {\n      const addresses = laundromatAddresses[cleanerId];\n      let mostCommonAddress = null;\n      let maxCount = 0;\n      \n      // Find most common address\n      Object.keys(addresses).forEach(address => {\n        if (addresses[address] > maxCount) {\n          mostCommonAddress = address;\n          maxCount = addresses[address];\n        }\n      });\n      \n      // Direct mapping if exact match\n      if (mostCommonAddress && knownLocations[mostCommonAddress]) {\n        idMap[cleanerId] = knownLocations[mostCommonAddress];\n        return;\n      }\n      \n      // Fuzzy matching for addresses\n      let bestMatch = null;\n      let bestScore = 0;\n      \n      // For each known location, calculate similarity with most common address\n      Object.keys(knownLocations).forEach(knownAddress => {\n        // Simple similarity score based on common words in address\n        const knownWords = knownAddress.toLowerCase().split(/[,\\s]+/);\n        const actualWords = mostCommonAddress ? mostCommonAddress.toLowerCase().split(/[,\\s]+/) : [];\n        \n        let matches = 0;\n        actualWords.forEach(word => {\n          if (word.length > 2 && knownWords.includes(word)) {\n            matches++;\n          }\n        });\n        \n        const score = matches / Math.max(knownWords.length, actualWords.length);\n        if (score > bestScore) {\n          bestScore = score;\n          bestMatch = knownLocations[knownAddress];\n        }\n      });\n      \n      // If good match found, use it\n      if (bestMatch && bestScore > 0.3) {\n        idMap[cleanerId] = bestMatch;\n      } else {\n        // Fallback based on common frequencies between cities and cleaners\n        const cityFrequency = {};\n        appointments.forEach(appointment => {\n          if (appointment.cleaning && appointment.cleaning.cleaner === cleanerId && appointment.cityId) {\n            cityFrequency[appointment.cityId] = (cityFrequency[appointment.cityId] || 0) + 1;\n          }\n        });\n        \n        // Find most common city for this cleaner\n        let mostCommonCity = null;\n        let maxCityCount = 0;\n        Object.keys(cityFrequency).forEach(cityId => {\n          if (cityFrequency[cityId] > maxCityCount) {\n            maxCityCount = cityFrequency[cityId];\n            mostCommonCity = cityId;\n          }\n        });\n        \n        // Assign a name based on city and ID\n        if (mostCommonCity && CITY_LAUNDROMATS[mostCommonCity] && CITY_LAUNDROMATS[mostCommonCity].length > 0) {\n          const cityName = CITY_MAPPING[mostCommonCity];\n          const cleanerIndex = Object.keys(laundromatAddresses).indexOf(cleanerId) % CITY_LAUNDROMATS[mostCommonCity].length;\n          idMap[cleanerId] = CITY_LAUNDROMATS[mostCommonCity][cleanerIndex].name;\n        } else {\n          // Last resort - truncate ID for display\n          idMap[cleanerId] = `Laundromat ${cleanerId.substring(0, 8)}`;\n        }\n      }\n    });\n    \n    // Manual override for most common IDs based on the list shown\n    idMap[\"q8dvkNhc9ZbCswGUbllUdoqOr6J3\"] = \"Tommy Suds\";\n    idMap[\"Z1qpZ7LByNWjT4QmjxZdCgEQogH3\"] = \"London Sudz\";\n    idMap[\"yXwnUIE3EPX1sSfpot3rw5MbbVs1\"] = \"Royal City Cleaners\";\n    idMap[\"hchYpbQECAQk2e2eyruUTxU8YP42\"] = \"Browns\";\n    \n    return idMap;\n  }, [appointments]);\n\n  // Process JSON data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Attempting to fetch data...');\n        const response = await fetch('/appointments.json');\n        console.log('Response status:', response.status);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Data loaded successfully, total records:', data.length);\n        \n        // Log a sample record without trying to process dates yet\n        if (data.length > 0) {\n          const sample = data[0];\n          console.log('Sample record:', sample);\n          console.log('Date fields found:', {\n            serviceDate: sample.pickup?.serviceDate,\n            service_date: sample.service_date,\n            createdAt: sample.createdAt,\n            updatedAt: sample.updatedAt\n          });\n        }\n        \n        // Safely determine date range\n        try {\n          const validDates = data\n            .map(d => {\n              try {\n                // Check all possible date fields\n                const dateStr = \n                  d.pickup?.serviceDate || \n                  d.service_date ||\n                  d.createdAt ||\n                  d.updatedAt;\n                \n                if (!dateStr) return null;\n                const date = new Date(dateStr);\n                return isNaN(date.getTime()) ? null : date;\n              } catch (e) {\n                return null;\n              }\n            })\n            .filter(date => date !== null);\n          \n          if (validDates.length > 0) {\n            const earliest = new Date(Math.min(...validDates.map(d => d.getTime())));\n            const latest = new Date(Math.max(...validDates.map(d => d.getTime())));\n            console.log('Date range:', {\n              earliest: earliest.toISOString(),\n              latest: latest.toISOString()\n            });\n            \n            // Set date range based on the actual data\n            if (earliest < startDate) {\n              setStartDate(earliest);\n            }\n            if (latest < endDate) {\n              setEndDate(latest);\n            }\n          } else {\n            console.log('No valid dates found in the data');\n          }\n        } catch (dateError) {\n          console.error('Error calculating date range:', dateError);\n        }\n        \n        setAppointments(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        console.log('Trying fallback data...');\n        // Create some sample fallback data for testing\n        const fallbackData = Array.from({length: 50}, (_, i) => ({\n          id: `sample-${i}`,\n          city_id: 'LYGRRATQ7EGG2',\n          customer_type: i % 2 === 0 ? 'Residential' : 'Commercial',\n          laundromat_id: 'LYGRRATQ7EGG' + Math.floor(i / 10),\n          laundromat_name: `Laundromat ${Math.floor(i / 10)}`,\n          revenue: 20 + Math.random() * 80,\n          address: `${100 + i} Richmond St, London, Ontario`,\n          pickup: {\n            serviceDate: new Date(2023, 9, i % 30 + 1).toISOString()\n          }\n        }));\n        console.log('Using fallback data:', fallbackData.length, 'records');\n        setAppointments(fallbackData);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Update map center when city changes\n  useEffect(() => {\n    console.log(\"City changed to:\", selectedCity, \"Setting map center:\", CITY_CENTERS[selectedCity]);\n    if (selectedCity === 'all') {\n      // Default to London for 'all cities' view but at a lower zoom\n      setMapCenter(CITY_CENTERS.LYGRRATQ7EGG2);\n      setMapZoom(8);\n    } else {\n      setMapCenter(CITY_CENTERS[selectedCity]);\n      setMapZoom(11);\n    }\n  }, [selectedCity]);\n\n  // Reset the map center if user changes city\n  useEffect(() => {\n    if (mapInstance && mapCenter) {\n      console.log(\"Panning map to:\", mapCenter, \"with zoom:\", mapZoom);\n      mapInstance.panTo(mapCenter);\n      mapInstance.setZoom(mapZoom);\n    }\n  }, [mapCenter, mapZoom, mapInstance]);\n\n  // Enhanced map data loading with better debugging\n  useEffect(() => {\n    const loadMapData = async () => {\n      if (!appointments.length) return;\n\n      // Enhanced debug logging for orders\n      console.log('MAP DEBUG - Total orders:', appointments.length);\n      const cityOrderCounts = appointments.reduce((acc, app) => {\n        const cityId = normalizeCityId(app);\n        acc[cityId] = (acc[cityId] || 0) + 1;\n        return acc;\n      }, {});\n      console.log('MAP DEBUG - Orders by city:', cityOrderCounts);\n      console.log('MAP DEBUG - Currently selected city:', selectedCity);\n      \n      // Debug: Check a sample appointment to verify cityId field\n      if (appointments.length > 0) {\n        const sample = appointments[0];\n        console.log('MAP DEBUG - Sample appointment:', {\n          id: sample.id || sample.appointmentId,\n          cityId: sample.cityId,\n          city_id: sample.city_id,\n          city: sample.city,\n          normalizedCityId: normalizeCityId(sample)\n        });\n      }\n\n      // Filter by cityId with extra logging\n      const filteredAppointments = selectedCity === 'all'\n        ? appointments\n        : appointments.filter(app => {\n            const normalizedCityId = normalizeCityId(app);\n            const matches = normalizedCityId === selectedCity;\n            // Log a sample of matches/non-matches\n            if (appointments.indexOf(app) < 5) {\n              console.log(`MAP DEBUG - App ${app.id || app.appointmentId}: cityId=${app.cityId}, normalizedCityId=${normalizedCityId}, matches=${matches}`);\n            }\n            return matches;\n          });\n      \n      console.log(`MAP DEBUG - After filtering, ${filteredAppointments.length} appointments match the selected city`);\n\n      // Get laundromat locations - filter by city if not 'all'\n      const laundromats = await getLaundromatLocations(filteredAppointments);\n      console.log('MAP DEBUG - Laundromat locations:', laundromats);\n      setLaundromatLocations(laundromats);\n\n      // Get order locations with laundromat association - filter by city if not 'all'\n      const orders = await getOrderLocations(filteredAppointments);\n      console.log('MAP DEBUG - Order locations:', orders);\n      setMapMarkers(orders);\n    };\n\n    loadMapData();\n  }, [appointments, selectedCity]);\n\n  // Generate a list of months for the selector\n  const monthOptions = useMemo(() => {\n    const options = [];\n    const currentDate = new Date();\n    // Exclude current month (March 2024 as per user request)\n    const endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n    \n    // Go back 24 months\n    for (let i = 0; i < 24; i++) {\n      const date = new Date(endDate.getFullYear(), endDate.getMonth() - i, 1);\n      options.push({\n        value: { month: date.getMonth(), year: date.getFullYear() },\n        label: date.toLocaleString('default', { month: 'long', year: 'numeric' })\n      });\n    }\n    return options;\n  }, []);\n\n  // Filtered appointments based on selections\n  const filteredAppointments = useMemo(() => {\n    console.log(\"Filtering appointments with:\", {\n      totalAppointments: appointments.length,\n      selectedCity,\n      startDate: startDate.toISOString(),\n      endDate: endDate.toISOString(),\n      customerTypeFilter,\n      sampleAppointment: appointments[0]\n    });\n    \n    const filtered = appointments.filter(appointment => {\n      // Debug a sample appointment to see its structure\n      if (appointment.id === appointments[0]?.id) {\n        console.log(\"Sample appointment structure:\", appointment);\n      }\n      \n      // Filter by city (using cityId instead of city_id)\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) {\n        return false;\n      }\n      \n      // Filter by customer type\n      if (customerTypeFilter !== 'all' && appointment.customerType !== customerTypeFilter) {\n        return false;\n      }\n      \n      // Filter by laundromat\n      if (laundromatFilter !== 'all' && \n          (!appointment.cleaning || appointment.cleaning.cleaner !== laundromatFilter)) {\n        return false;\n      }\n      \n      // Try all possible date fields\n      let inDateRange = false;\n      let dateChecked = false;\n\n      // Check pickup.serviceDate\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        dateChecked = true;\n        try {\n          const pickupDate = new Date(appointment.pickup.serviceDate);\n          \n          // Log some sample dates to debug\n          if (appointment.id === appointments[0]?.id || appointment.appointmentId === appointments[0]?.appointmentId) {\n            console.log(\"Parsed pickup date:\", pickupDate);\n            console.log(\"Start date:\", startDate);\n            console.log(\"End date:\", endDate);\n            console.log(\"Is in range:\", !(pickupDate < startDate || pickupDate > endDate));\n          }\n          \n          if (!(pickupDate < startDate || pickupDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing date:\", appointment.pickup.serviceDate, error);\n        }\n      }\n      \n      // Check service_date if we haven't found a valid date yet\n      if (!inDateRange && appointment.service_date) {\n        dateChecked = true;\n        try {\n          const serviceDate = new Date(appointment.service_date);\n          if (!(serviceDate < startDate || serviceDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing service_date:\", appointment.service_date, error);\n        }\n      }\n      \n      // Check createdAt as fallback\n      if (!inDateRange && appointment.createdAt) {\n        dateChecked = true;\n        try {\n          const createdDate = new Date(appointment.createdAt);\n          if (!(createdDate < startDate || createdDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing createdAt:\", appointment.createdAt, error);\n        }\n      }\n      \n      // If we checked dates but none were in range, filter out this appointment\n      if (dateChecked && !inDateRange) {\n        return false;\n      }\n      \n      return true;\n    });\n    \n    console.log(\"Filtered appointments:\", filtered.length);\n    return filtered;\n  }, [appointments, selectedCity, customerTypeFilter, laundromatFilter, startDate, endDate]);\n\n  // Compute metrics based on filtered data\n  const cityStats = useMemo(() => getCityStatistics(filteredAppointments), [filteredAppointments]);\n  const laundromatStats = useMemo(() => {\n    // Get basic laundromat statistics\n    const stats = getLaundromatStatistics(filteredAppointments);\n    \n    // Calculate a simpler retention metric - returning customers as percentage of total customers\n    return stats.map(laundromat => {\n      // Simple retention rate - percentage of customers that return\n      const simpleRetentionRate = laundromat.customers > 0 \n        ? (laundromat.returningCustomers / laundromat.customers)\n        : 0;\n        \n      return {\n        ...laundromat,\n        retentionRate: simpleRetentionRate\n      };\n    });\n  }, [filteredAppointments]);\n  \n  const customerTypeDistribution = useMemo(() => getCustomerTypeDistribution(filteredAppointments), [filteredAppointments]);\n  const monthlyOrdersTrend = useMemo(() => {\n    // If 'all' is selected, show data for all cities, otherwise filter by selected city\n    const filteredAppointments = selectedCity === 'all' \n      ? appointments \n      : appointments.filter(a => a.cityId === selectedCity);\n      \n    const trends = getMonthlyOrdersTrend(filteredAppointments, 12);\n    \n    // Filter out March data (or current month)\n    const currentDate = new Date();\n    return trends.filter(month => {\n      const monthDate = new Date(month.date);\n      return !(monthDate.getMonth() === currentDate.getMonth() && \n               monthDate.getFullYear() === currentDate.getFullYear());\n    });\n  }, [appointments, selectedCity]);\n  \n  const avgOrderValueTrend = useMemo(() => {\n    // If 'all' is selected, show data for all cities, otherwise filter by selected city\n    const filteredAppointments = selectedCity === 'all' \n      ? appointments \n      : appointments.filter(a => a.cityId === selectedCity);\n      \n    const trends = getAvgOrderValueTrend(filteredAppointments, 12);\n    \n    // Filter out March data (or current month)\n    const currentDate = new Date();\n    return trends.filter(month => {\n      const monthDate = new Date(month.date);\n      return !(monthDate.getMonth() === currentDate.getMonth() && \n               monthDate.getFullYear() === currentDate.getFullYear());\n    });\n  }, [appointments, selectedCity]);\n  \n  const customerRetention = useMemo(() => getCustomerRetentionMetrics(filteredAppointments), [filteredAppointments]);\n  const driverPerformance = useMemo(() => getDriverPerformanceMetrics(filteredAppointments), [filteredAppointments]);\n  const seasonalTrends = useMemo(() => getSeasonalTrends(filteredAppointments), [filteredAppointments]);\n  const weightDistribution = useMemo(() => getWeightDistribution(filteredAppointments), [filteredAppointments]);\n\n  // London-specific orders data for Google Maps\n  const londonOrders = useMemo(() => {\n    return appointments.filter(app => app.cityId === LONDON_CITY_ID).map(app => {\n      // Extract address information for Google Maps\n      let address = '';\n      if (app.pickup && app.pickup.to) {\n        address = app.pickup.to;\n      }\n      return {\n        id: app.appointmentId,\n        address,\n        customerType: app.customerType || 'Unknown',\n        revenue: parseFloat(app.invoiceTotal || 0)\n      };\n    });\n  }, [appointments]);\n\n  // Get aggregate metrics\n  const aggregateMetrics = useMemo(() => {\n    return {\n      totalOrders: filteredAppointments.length,\n      totalRevenue: filteredAppointments.reduce((sum, appointment) => {\n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        return sum + (isNaN(revenue) ? 0 : revenue);\n      }, 0),\n      totalCustomers: new Set(filteredAppointments.map(a => a.customerId).filter(Boolean)).size,\n      totalLaundromats: new Set(filteredAppointments\n        .filter(a => a.cleaning && a.cleaning.cleaner)\n        .map(a => a.cleaning.cleaner)).size,\n      avgOrderValue: filteredAppointments.length > 0 ? \n        (filteredAppointments.reduce((sum, appointment) => {\n          const revenue = parseFloat(appointment.invoiceTotal || 0);\n          return sum + (isNaN(revenue) ? 0 : revenue);\n        }, 0) / filteredAppointments.length) : 0,\n      avgWeight: filteredAppointments\n        .filter(a => a.cleaning && a.cleaning.orderDetails && a.cleaning.orderDetails.washFoldWeight)\n        .reduce((sum, a, idx, arr) => {\n          const weight = parseFloat(a.cleaning.orderDetails.washFoldWeight);\n          return idx === arr.length - 1 ? \n            (sum + weight) / arr.length : \n            sum + weight;\n        }, 0)\n    };\n  }, [filteredAppointments]);\n\n  // Calculate monthly retention rate trend\n  const retentionRateTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyAppointments = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        const monthKey = format(date, 'yyyy-MM');\n        const monthName = format(date, 'MMM yyyy');\n        \n        if (!monthlyAppointments[monthKey]) {\n          monthlyAppointments[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: date,\n            appointments: [],\n            customers: new Set(),\n            returningCustomers: new Set()\n          };\n        }\n        \n        monthlyAppointments[monthKey].appointments.push(appointment);\n        \n        // Add customer to this month's unique customers\n        if (appointment.customerId) {\n          monthlyAppointments[monthKey].customers.add(appointment.customerId);\n          \n          // Check if this customer has appeared in previous months\n          const isReturning = Object.keys(monthlyAppointments)\n            .filter(m => m !== monthKey && new Date(monthlyAppointments[m].date) < date)\n            .some(m => monthlyAppointments[m].customers.has(appointment.customerId));\n          \n          if (isReturning) {\n            monthlyAppointments[monthKey].returningCustomers.add(appointment.customerId);\n          }\n        }\n      }\n    });\n    \n    // Calculate retention rate for each month\n    return Object.values(monthlyAppointments)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        customers: month.customers.size,\n        returningCustomers: month.returningCustomers.size,\n        retentionRate: month.customers.size > 0 ? \n          month.returningCustomers.size / month.customers.size : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few customers to avoid misleading rates\n      .filter(month => month.customers >= 3);\n  }, [appointments, selectedCity]);\n\n  // Calculate weekly order frequency\n  const orderFrequencyTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by week\n    const weeklyAppointments = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        // Get week number - FIX: Use 'yyyy-ww' instead of the problematic format\n        const weekKey = format(date, 'yyyy-ww');\n        const weekName = format(date, 'MMM d, yyyy');\n        \n        if (!weeklyAppointments[weekKey]) {\n          weeklyAppointments[weekKey] = {\n            key: weekKey,\n            name: `Week of ${weekName}`,\n            shortName: format(date, 'MMM d'),\n            date: date,\n            customerCount: new Set(),\n            orderCount: 0\n          };\n        }\n        \n        weeklyAppointments[weekKey].orderCount++;\n        \n        // Count unique customers\n        if (appointment.customerId) {\n          weeklyAppointments[weekKey].customerCount.add(appointment.customerId);\n        }\n      }\n    });\n    \n    // Calculate orders per customer for each week\n    return Object.values(weeklyAppointments)\n      .map(week => ({\n        name: week.shortName,\n        fullName: week.name,\n        date: week.date,\n        week: week.key,\n        customers: week.customerCount.size,\n        orders: week.orderCount,\n        ordersPerCustomer: week.customerCount.size > 0 ? \n          week.orderCount / week.customerCount.size : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out weeks with very few customers to avoid misleading rates\n      .filter(week => week.customers >= 2);\n  }, [appointments, selectedCity]);\n\n  // Calculate order processing time trend\n  const processingTimeTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyProcessingTimes = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      // Calculate processing time if we have both pickup and delivery dates\n      let pickupDate = null, deliveryDate = null;\n      \n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        pickupDate = new Date(appointment.pickup.serviceDate);\n      }\n      \n      if (appointment.delivery && appointment.delivery.serviceDate) {\n        deliveryDate = new Date(appointment.delivery.serviceDate);\n      }\n      \n      // If we have valid dates and delivery is after pickup\n      if (pickupDate && deliveryDate && \n          !isNaN(pickupDate.getTime()) && \n          !isNaN(deliveryDate.getTime()) && \n          deliveryDate > pickupDate) {\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        const monthName = format(pickupDate, 'MMM yyyy');\n        \n        if (!monthlyProcessingTimes[monthKey]) {\n          monthlyProcessingTimes[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: pickupDate,\n            totalHours: 0,\n            count: 0\n          };\n        }\n        \n        // Calculate hours between pickup and delivery\n        const hours = (deliveryDate - pickupDate) / (1000 * 60 * 60);\n        monthlyProcessingTimes[monthKey].totalHours += hours;\n        monthlyProcessingTimes[monthKey].count++;\n      }\n    });\n    \n    // Calculate average processing time for each month\n    return Object.values(monthlyProcessingTimes)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        avgProcessingHours: month.count > 0 ? \n          month.totalHours / month.count : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few data points\n      .filter(month => month.avgProcessingHours > 0);\n  }, [appointments, selectedCity]);\n\n  // Calculate commercial vs residential split trend\n  const customerTypeTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyTypeSplit = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        const monthKey = format(date, 'yyyy-MM');\n        const monthName = format(date, 'MMM yyyy');\n        \n        if (!monthlyTypeSplit[monthKey]) {\n          monthlyTypeSplit[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: date,\n            residential: 0,\n            commercial: 0,\n            unknown: 0,\n            total: 0\n          };\n        }\n        \n        monthlyTypeSplit[monthKey].total++;\n        \n        if (appointment.customerType === 'Residential') {\n          monthlyTypeSplit[monthKey].residential++;\n        } else if (appointment.customerType === 'Commercial') {\n          monthlyTypeSplit[monthKey].commercial++;\n        } else {\n          monthlyTypeSplit[monthKey].unknown++;\n        }\n      }\n    });\n    \n    // Calculate percentages\n    return Object.values(monthlyTypeSplit)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        residential: month.residential,\n        residentialPercent: month.total > 0 ? (month.residential / month.total) * 100 : 0,\n        commercial: month.commercial,\n        commercialPercent: month.total > 0 ? (month.commercial / month.total) * 100 : 0,\n        unknown: month.unknown,\n        total: month.total\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few orders\n      .filter(month => month.total >= 5);\n  }, [appointments, selectedCity]);\n\n  // State to track which chart to display\n  const [selectedChartType, setSelectedChartType] = useState('retention');\n\n  // All unique customer types for filter\n  const customerTypes = useMemo(() => {\n    const types = new Set();\n    appointments.forEach(appointment => {\n      if (appointment.customerType) {\n        types.add(appointment.customerType);\n      }\n    });\n    return Array.from(types);\n  }, [appointments]);\n\n  // All unique laundromats for filter\n  const laundromats = useMemo(() => {\n    const cleaners = new Map();\n    appointments.forEach(appointment => {\n      if (appointment.cleaning && appointment.cleaning.cleaner) {\n        const cleanerId = appointment.cleaning.cleaner;\n        const name = laundromatIdToNameMap[cleanerId] || `Laundromat ${cleanerId.substring(0, 8)}`;\n        cleaners.set(cleanerId, {\n          id: cleanerId,\n          name: name\n        });\n      }\n    });\n    return Array.from(cleaners.values());\n  }, [appointments, laundromatIdToNameMap]);\n\n  // For date range selection\n  const handleStartDateChange = (event) => {\n    const [year, month] = event.target.value.split('-');\n    setStartDate(new Date(year, month - 1, 1));\n  };\n\n  const handleEndDateChange = (event) => {\n    const [year, month] = event.target.value.split('-');\n    // Last day of the month\n    setEndDate(new Date(year, month, 0));\n  };\n\n  // Get map center coordinates based on selected city\n  const getMapCenter = useMemo(() => {\n    const centers = {\n      'LYGRRATQ7EGG2': { lat: 42.9849, lng: -81.2453 }, // London\n      'L4NE8GPX89J3A': { lat: 45.4215, lng: -75.6972 }, // Ottawa\n      'LDK6Z980JTKXY': { lat: 43.4643, lng: -80.5204 }, // Kitchener-Waterloo\n      'LXMC6DWVJ5N7W': { lat: 43.2557, lng: -79.8711 }, // Hamilton\n      'LG0VGFKQ25XED': { lat: 51.0447, lng: -114.0719 }  // Calgary\n    };\n    \n    // Return center for selected city or fallback to a default\n    return selectedCity !== 'all' ? centers[selectedCity] : centers['LYGRRATQ7EGG2'];\n  }, [selectedCity]);\n\n  // Get total order count currently displayed on map\n  const displayedMapOrdersCount = useMemo(() => {\n    return mapMarkers.length;\n  }, [mapMarkers]);\n\n  // Get active laundromats count currently displayed on map\n  const displayedLaundromatsCount = useMemo(() => {\n    return laundromatLocations.length;\n  }, [laundromatLocations]);\n\n  const [sortColumn, setSortColumn] = useState('orders');\n  const [sortDirection, setSortDirection] = useState('desc');\n\n  // Handle sorting for laundromat table\n  const handleSort = (column) => {\n    if (sortColumn === column) {\n      // Toggle sort direction if same column is clicked\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Set new sort column and default to descending\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  };\n  \n  // Sort icon component\n  const SortIcon = ({ column }) => {\n    if (sortColumn !== column) return <span style={{ opacity: 0.3 }}>↕</span>;\n    return <span>{sortDirection === 'asc' ? '↑' : '↓'}</span>;\n  };\n\n  // Render laundromat table with sorting\n  const renderLaundromatTable = () => {\n    // Get laundromats for current city or all laundromats\n    let filteredLaundromats = laundromatStats;\n    if (selectedCity !== 'all') {\n      filteredLaundromats = laundromatStats.filter(l => l.city === CITY_MAPPING[selectedCity]);\n    }\n    \n    // Filter out low-value entries (no revenue or very few orders)\n    filteredLaundromats = filteredLaundromats.filter(l => \n      l.revenue > 0 && l.orders > 5\n    );\n    \n    // Sort the data\n    const sortedLaundromats = [...filteredLaundromats].sort((a, b) => {\n      let valueA, valueB;\n      \n      // Handle special sorting cases\n      switch (sortColumn) {\n        case 'name':\n          valueA = laundromatIdToNameMap[a.id] || a.id;\n          valueB = laundromatIdToNameMap[b.id] || b.id;\n          break;\n        case 'avgOrderValue':\n          valueA = a.orders > 0 ? a.revenue / a.orders : 0;\n          valueB = b.orders > 0 ? b.revenue / b.orders : 0;\n          break;\n        case 'retentionScore':\n          valueA = a.retentionRate || 0;\n          valueB = b.retentionRate || 0;\n          break;\n        default:\n          valueA = a[sortColumn];\n          valueB = b[sortColumn];\n      }\n      \n      // Compare values based on sort direction\n      if (typeof valueA === 'string' && typeof valueB === 'string') {\n        return sortDirection === 'asc' \n          ? valueA.localeCompare(valueB) \n          : valueB.localeCompare(valueA);\n      } else {\n        return sortDirection === 'asc' ? valueA - valueB : valueB - valueA;\n      }\n    });\n    \n    return sortedLaundromats.map((laundromat) => (\n      <tr key={laundromat.id} style={{ borderBottom: '1px solid #E5E7EB' }}>\n        <td style={{ padding: '12px 16px' }}>\n          {laundromatIdToNameMap[laundromat.id] || laundromat.id}\n        </td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.orders}</td>\n        <td style={{ padding: '12px 16px' }}>${laundromat.revenue.toFixed(2)}</td>\n        <td style={{ padding: '12px 16px' }}>\n          ${laundromat.orders > 0 ? (laundromat.revenue / laundromat.orders).toFixed(2) : '0.00'}\n        </td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.customers}</td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.returningCustomers}</td>\n        <td style={{ padding: '12px 16px' }}>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span style={{ \n              width: '12px', \n              height: '12px', \n              borderRadius: '50%', \n              marginRight: '8px',\n              backgroundColor: laundromat.retentionRate >= 0.6 ? '#10B981' :\n                             laundromat.retentionRate >= 0.45 ? '#059669' :\n                             laundromat.retentionRate >= 0.35 ? '#F59E0B' :\n                             laundromat.retentionRate >= 0.25 ? '#D97706' :\n                             laundromat.retentionRate >= 0.15 ? '#DC2626' : '#B91C1C'\n            }}></span>\n            <span title=\"Percentage of customers who are returning customers.\">\n              {(laundromat.retentionRate * 100).toFixed(1)}%\n            </span>\n          </div>\n        </td>\n        <td style={{ padding: '12px 16px' }}>{laundromat.avgTurnaroundDays.toFixed(1)} days</td>\n      </tr>\n    ));\n  };\n\n  // City information data\n  const cityInfo = useMemo(() => {\n    const info = {\n      'LYGRRATQ7EGG2': {\n        name: 'London',\n        population: 400000,\n        laundromatCount: 3,\n        operationalSince: '2023-01-01',\n        marketShare: (aggregateMetrics.totalOrders / 400000) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'L4NE8GPX89J3A': {\n        name: 'Ottawa',\n        population: 1017449,\n        laundromatCount: 5,\n        operationalSince: '2023-03-15',\n        marketShare: (aggregateMetrics.totalOrders / 1017449) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LDK6Z980JTKXY': {\n        name: 'Kitchener-Waterloo',\n        population: 575847,\n        laundromatCount: 4,\n        operationalSince: '2023-06-01',\n        marketShare: (aggregateMetrics.totalOrders / 575847) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LXMC6DWVJ5N7W': {\n        name: 'Hamilton',\n        population: 569353,\n        laundromatCount: 3,\n        operationalSince: '2023-09-10',\n        marketShare: (aggregateMetrics.totalOrders / 569353) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LG0VGFKQ25XED': {\n        name: 'Calgary',\n        population: 1306784,\n        laundromatCount: 4,\n        operationalSince: '2023-11-20',\n        marketShare: (aggregateMetrics.totalOrders / 1306784) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      }\n    };\n    return selectedCity === 'all' ? null : info[selectedCity];\n  }, [selectedCity, aggregateMetrics]);\n\n  // City projection constants - extracted from CityProjectionCalculator\n  const PROJECTION_RATE = 5.57; // Standard rate excluding London\n  const MONTHLY_DISTRIBUTION = {\n    1: 0.0604, 2: 0.1546, 3: 0.1570, 4: 0.1691, 5: 0.2126, 6: 0.2464\n  };\n\n  // Calculate projections for the selected city with error handling\n  const projectionData = useMemo(() => {\n    try {\n      if (!monthlyOrdersTrend || monthlyOrdersTrend.length === 0) {\n        return {\n          combinedOrderTrend: [],\n          metrics: {\n            totalAnnualOrders: 0,\n            averageMonthlyOrders: 0,\n            projectedGrowthPercent: 0\n          }\n        };\n      }\n      \n      // Generate projections using the advanced system\n      return addProjectionsToComponent(monthlyOrdersTrend, selectedCity);\n    } catch (error) {\n      console.error(\"Error generating projections:\", error);\n      // Return a safe default in case of errors\n      return {\n        combinedOrderTrend: monthlyOrdersTrend,\n        metrics: {\n          totalAnnualOrders: 0,\n          averageMonthlyOrders: 0,\n          projectedGrowthPercent: 0\n        },\n        error: true\n      };\n    }\n  }, [monthlyOrdersTrend, selectedCity]);\n\n  // Combine actual data with projections for the chart\n  const combinedOrderTrend = useMemo(() => {\n    if (!monthlyOrdersTrend || !projectionData || selectedCity === 'all') {\n      return monthlyOrdersTrend;\n    }\n\n    // Create a map of existing data points by month\n    const existingDataMap = {};\n    monthlyOrdersTrend.forEach(dataPoint => {\n      existingDataMap[dataPoint.month] = dataPoint;\n    });\n\n    // Merge actual data with projections - make sure we access the array correctly\n    return [\n      ...monthlyOrdersTrend,\n      ...(projectionData.projectedData || []).filter(projection => !existingDataMap[projection.month])\n    ].sort((a, b) => {\n      // Sort by date\n      if (a.month && b.month) {\n        return a.month.localeCompare(b.month);\n      }\n      return 0;\n    });\n  }, [monthlyOrdersTrend, projectionData, selectedCity]);\n\n  // Add a state for total orders across all cities\n  const [totalOrdersAllCities, setTotalOrdersAllCities] = useState(0);\n  \n  // When appointments are loaded, calculate total orders across all cities\n  useEffect(() => {\n    if (appointments && appointments.length > 0) {\n      setTotalOrdersAllCities(appointments.length);\n    }\n  }, [appointments]);\n\n  // Add state for total revenue across all cities\n  const [totalRevenueAllCities, setTotalRevenueAllCities] = useState(0);\n\n  // Update the useEffect that calculates totalOrdersAllCities to also calculate total revenue\n  useEffect(() => {\n    if (appointments && appointments.length > 0) {\n      setTotalOrdersAllCities(appointments.length);\n      \n      // Calculate total revenue across all cities\n      const totalRevenue = appointments.reduce((sum, appointment) => {\n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        return sum + (isNaN(revenue) ? 0 : revenue);\n      }, 0);\n      \n      setTotalRevenueAllCities(totalRevenue);\n    }\n  }, [appointments]);\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Add a section for displaying order projections with error handling\n  const renderProjectionSection = () => {\n    return (\n      <div style={{ marginTop: '40px', marginBottom: '40px' }}>\n        <QuarterlyGrowthByCity selectedCity={selectedCity} cityMapping={CITY_MAPPING} />\n      </div>\n    );\n  };\n\n  // Render map section with Coming Soon message\n  const renderMapSection = () => {\n    return (\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h5\" sx={{ fontWeight: 'bold', color: '#111827' }}>\n            Order Locations - {CITY_MAPPING[selectedCity] || 'All Cities'}\n          </Typography>\n        </Box>\n        <Paper sx={{ \n          borderRadius: 2, \n          overflow: 'hidden', \n          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n          height: '450px',\n          position: 'relative'\n        }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ \n              key: 'AIzaSyAtGuXvA4E3HW0xM2yzRU7tphMTtxqKQD4',\n              libraries: ['places']\n            }}\n            center={mapCenter || getMapCenter}\n            zoom={mapZoom}\n            onChange={({ center, zoom, bounds }) => {\n              // Update map state when user interacts with the map\n              setMapCenter(center);\n              setMapZoom(zoom);\n            }}\n            options={{\n              fullscreenControl: true,\n              zoomControl: true,\n              mapTypeControl: true,\n              streetViewControl: false,\n              gestureHandling: 'greedy',\n              minZoom: 5,\n              maxZoom: 18,\n              styles: [\n                {\n                  featureType: 'all',\n                  elementType: 'geometry',\n                  stylers: [{ lightness: 20 }]\n                },\n                {\n                  featureType: 'water',\n                  elementType: 'geometry',\n                  stylers: [{ color: '#e0f2fe' }]\n                },\n                {\n                  featureType: 'road',\n                  elementType: 'geometry',\n                  stylers: [{ color: '#f1f5f9' }]\n                }\n              ]\n            }}\n          />\n          \n          {/* Coming Soon overlay */}\n          <Box sx={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(255, 255, 255, 0.85)',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: 10\n          }}>\n            <Box sx={{\n              backgroundColor: '#3B82F6',\n              color: 'white',\n              padding: '12px 24px',\n              borderRadius: '8px',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n              marginBottom: '16px'\n            }}>\n              <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\n                Coming Soon!\n              </Typography>\n            </Box>\n            <Typography variant=\"body1\" sx={{ maxWidth: '450px', textAlign: 'center', color: '#1F2937' }}>\n              Our team is working on integrating detailed map data for all service areas.\n              Check back soon for a visual representation of our order locations.\n            </Typography>\n          </Box>\n        </Paper>\n      </Box>\n    );\n  };\n\n  // Modify the statistics card section to show percentages\n  const renderStatisticsCard = (title, value, secondaryValue = null, icon = null) => {\n    // Calculate percentage of total if this is the total orders card\n    const showPercentage = title === 'Total Orders' && totalOrdersAllCities > 0 && selectedCity !== 'all';\n    const percentage = showPercentage ? (value / totalOrdersAllCities * 100).toFixed(1) : null;\n\n    const showRevenuePercentage = title === 'Total Revenue' && totalRevenueAllCities > 0 && selectedCity !== 'all';\n    const revenuePercentage = showRevenuePercentage ? (value / totalRevenueAllCities * 100).toFixed(1) : null;\n\n    return (\n      <Paper \n        elevation={1}\n        sx={{\n          p: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100%',\n          borderRadius: 2,\n          backgroundColor: '#FFFFFF',\n          transition: 'transform 0.3s, box-shadow 0.3s',\n          '&:hover': {\n            transform: 'translateY(-5px)',\n            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'\n          }\n        }}\n      >\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>\n          <Typography\n            variant=\"subtitle1\"\n            component=\"div\"\n            sx={{ \n              color: '#6B7280',\n              fontWeight: 500,\n              fontSize: '0.875rem'\n            }}\n          >\n            {title}\n          </Typography>\n          {icon && (\n            <Box\n              sx={{\n                bgcolor: '#F3F4F6',\n                borderRadius: '50%',\n                width: 40,\n                height: 40,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                color: '#3B82F6'\n              }}\n            >\n              {icon}\n            </Box>\n          )}\n        </Box>\n        \n        <Box sx={{ mt: 1, display: 'flex', alignItems: 'baseline' }}>\n          <Typography\n            variant=\"h4\"\n            component=\"div\"\n            sx={{\n              fontWeight: 'bold',\n              color: '#111827',\n              lineHeight: 1.2\n            }}\n          >\n            {typeof value === 'number' && title === 'Total Revenue'\n              ? `$${value.toLocaleString(undefined, {\n                  minimumFractionDigits: value % 1 === 0 ? 0 : 2,\n                  maximumFractionDigits: 2\n                })}`\n              : (typeof value === 'number' ? value.toLocaleString() : value)\n            }\n          </Typography>\n          \n          {showPercentage && (\n            <Typography\n              variant=\"body2\"\n              component=\"div\"\n              sx={{\n                ml: 1,\n                color: '#10B981',\n                fontWeight: 'medium',\n                fontSize: '0.875rem',\n                bgcolor: '#ECFDF5',\n                px: 1,\n                py: 0.5,\n                borderRadius: 1,\n                whiteSpace: 'nowrap'\n              }}\n            >\n              {percentage}% of total\n            </Typography>\n          )}\n          \n          {showRevenuePercentage && (\n            <Typography\n              variant=\"body2\"\n              component=\"div\"\n              sx={{\n                ml: 1,\n                color: '#10B981',\n                fontWeight: 'medium',\n                fontSize: '0.875rem',\n                bgcolor: '#ECFDF5',\n                px: 1,\n                py: 0.5,\n                borderRadius: 1,\n                whiteSpace: 'nowrap'\n              }}\n            >\n              {revenuePercentage}% of total\n            </Typography>\n          )}\n        </Box>\n        \n        {secondaryValue && (\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: '#6B7280',\n              mt: 1\n            }}\n          >\n            {secondaryValue}\n          </Typography>\n        )}\n      </Paper>\n    );\n  };\n\n  return (\n    <Box sx={{ \n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      bgcolor: '#F3F4F6', \n      minHeight: '100vh'\n    }}>\n      <Box component=\"main\" sx={{ flexGrow: 1, px: 3, py: 4 }}>\n        <Container maxWidth=\"xl\">\n          {/* Header */}\n          <AppBar position=\"static\" sx={{ backgroundColor: '#1E40AF' }}>\n            <Toolbar>\n              <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1, fontWeight: 'bold' }}>\n                Laundry Service Analytics Dashboard\n              </Typography>\n              \n              {/* City Selector */}\n              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n                <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 150, backgroundColor: 'white', borderRadius: '4px', mr: 2 }}>\n                  <Select\n                    value={selectedCity}\n                    onChange={(e) => setSelectedCity(e.target.value)}\n                    displayEmpty\n                    sx={{ \n                      color: '#1E3A8A',\n                      '.MuiSelect-select': { py: 1.5, pr: 8 },\n                      '&:focus': { backgroundColor: 'white' }\n                    }}\n                    IconComponent={() => (\n                      <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                        expand_more\n                      </Icon>\n                    )}\n                  >\n                    <MenuItem value=\"all\">All Cities</MenuItem>\n                    <MenuItem value=\"LYGRRATQ7EGG2\">London</MenuItem>\n                    <MenuItem value=\"L4NE8GPX89J3A\">Ottawa</MenuItem>\n                    <MenuItem value=\"LDK6Z980JTKXY\">Kitchener-Waterloo</MenuItem>\n                    <MenuItem value=\"LXMC6DWVJ5N7W\">Hamilton</MenuItem>\n                    <MenuItem value=\"LG0VGFKQ25XED\">Calgary</MenuItem>\n                  </Select>\n                </FormControl>\n                \n                {/* Date Range Selector - From */}\n                <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 120, backgroundColor: 'white', borderRadius: '4px', mr: 2 }}>\n                  <Select\n                    value={`${startDate.getFullYear()}-${startDate.getMonth()+1}`}\n                    onChange={handleStartDateChange}\n                    displayEmpty\n                    sx={{ \n                      color: '#1E3A8A',\n                      '.MuiSelect-select': { py: 1.5, pr: 8 },\n                      '&:focus': { backgroundColor: 'white' }\n                    }}\n                    IconComponent={() => (\n                      <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                        expand_more\n                      </Icon>\n                    )}\n                  >\n                    {[...Array(24)].map((_, i) => {\n                      const date = subMonths(new Date(), i);\n                      const value = `${date.getFullYear()}-${date.getMonth()+1}`;\n                      const label = format(date, 'MMM yyyy');\n                      return (\n                        <MenuItem key={`from-${value}`} value={value}>{label}</MenuItem>\n                      );\n                    })}\n                  </Select>\n                </FormControl>\n                \n                {/* Date Range Selector - To */}\n                <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 120, backgroundColor: 'white', borderRadius: '4px', mr: 2 }}>\n                  <Select\n                    value={`${endDate.getFullYear()}-${endDate.getMonth()+1}`}\n                    onChange={handleEndDateChange}\n                    displayEmpty\n                    sx={{ \n                      color: '#1E3A8A',\n                      '.MuiSelect-select': { py: 1.5, pr: 8 },\n                      '&:focus': { backgroundColor: 'white' }\n                    }}\n                    IconComponent={() => (\n                      <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                        expand_more\n                      </Icon>\n                    )}\n                  >\n                    {[...Array(24)].map((_, i) => {\n                      const date = subMonths(new Date(), i);\n                      const value = `${date.getFullYear()}-${date.getMonth()+1}`;\n                      const label = format(date, 'MMM yyyy');\n                      return (\n                        <MenuItem key={`to-${value}`} value={value}>{label}</MenuItem>\n                      );\n                    })}\n                  </Select>\n                </FormControl>\n                \n                {/* Customer Type Filter */}\n                <FormControl variant=\"filled\" size=\"small\" sx={{ minWidth: 140, backgroundColor: 'white', borderRadius: '4px' }}>\n                  <Select\n                    value={customerTypeFilter}\n                    onChange={(e) => setCustomerTypeFilter(e.target.value)}\n                    displayEmpty\n                    sx={{ \n                      color: '#1E3A8A',\n                      '.MuiSelect-select': { py: 1.5, pr: 8 },\n                      '&:focus': { backgroundColor: 'white' }\n                    }}\n                    IconComponent={() => (\n                      <Icon sx={{ position: 'absolute', right: 8, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A' }}>\n                        expand_more\n                      </Icon>\n                    )}\n                  >\n                    <MenuItem value=\"all\">All Customer Types</MenuItem>\n                    {customerTypes.map(type => (\n                      <MenuItem key={type} value={type}>{type}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n            </Toolbar>\n          </AppBar>\n\n          {/* City Overview Section (Independent of date range) */}\n          {cityInfo && (\n            <Box sx={{ mb: 6 }}>\n              <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, justifyContent: 'space-between', alignItems: { xs: 'start', md: 'center' }, mb: 4 }}>\n                <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: '#111827', mb: { xs: 2, md: 0 } }}>\n                  {cityInfo.name} Overview\n                </Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <Icon sx={{ color: '#6B7280', mr: 1 }}>calendar_today</Icon>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    <span style={{ fontWeight: 500 }}>Operational Since:</span> {new Date(cityInfo.operationalSince).toLocaleString('en-US', { month: 'long', year: 'numeric' })}\n                  </Typography>\n                </Box>\n              </Box>\n              \n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#EBF5FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#1E88E5' }}>groups</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Population</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.population.toLocaleString()}</Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#E6FFFA', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#26A69A' }}>location_on</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Active Laundromats</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.laundromatCount}</Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'text.secondary', mt: 0.5, display: 'block' }}>\n                          {laundromats\n                            .filter(l => {\n                              // Filter by city based on most common city for this cleaner\n                              const cityFrequency = {};\n                              appointments.forEach(appointment => {\n                                if (appointment.cleaning && appointment.cleaning.cleaner === l.id && appointment.cityId) {\n                                  cityFrequency[appointment.cityId] = (cityFrequency[appointment.cityId] || 0) + 1;\n                                }\n                              });\n                              \n                              let mostCommonCity = null;\n                              let maxCityCount = 0;\n                              Object.keys(cityFrequency).forEach(cityId => {\n                                if (cityFrequency[cityId] > maxCityCount) {\n                                  maxCityCount = cityFrequency[cityId];\n                                  mostCommonCity = cityId;\n                                }\n                              });\n                              \n                              return mostCommonCity === selectedCity;\n                            })\n                            .map(l => l.name)\n                            .join(', ')}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#F3E8FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#AB47BC' }}>trending_up</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Market Penetration</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.marketShare.toFixed(2)}%</Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'text.secondary', mt: 0.5, display: 'block' }}>\n                          Based on total population\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#FFF7ED', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#F59E0B' }}>shopping_bag</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Average Orders Per Customer</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.avgOrderFrequency.toFixed(1)}</Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n\n          {/* Order Projections Section - Only show for specific cities */}\n          {selectedCity !== 'all' && renderProjectionSection()}\n\n          {/* Date Range Information Banner - Made more prominent */}\n          <Paper sx={{ \n            p: 3, \n            mb: 4, \n            backgroundColor: '#EFF6FF', \n            borderRadius: 2, \n            display: 'flex', \n            flexDirection: { xs: 'column', md: 'row' }, \n            alignItems: { xs: 'start', md: 'center' }, \n            justifyContent: 'space-between',\n            borderLeft: '5px solid #3B82F6' // Added accent border\n          }}>\n            <Typography variant=\"h5\" sx={{ fontWeight: 'bold', color: '#1E40AF', mb: { xs: 2, md: 0 } }}>\n              Showing Statistics for: {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n            </Typography>\n            <Box sx={{ display: 'flex', alignItems: 'center', backgroundColor: 'white', px: 2, py: 1, borderRadius: 1, boxShadow: '0 1px 2px rgba(0,0,0,0.1)' }}>\n              <Icon sx={{ color: '#3B82F6', mr: 1 }}>date_range</Icon>\n              <Typography variant=\"body1\" sx={{ mr: 1, color: '#1E40AF', fontWeight: 'medium' }}>\n                From: {format(startDate, 'MMM yyyy')}\n              </Typography>\n              <Typography variant=\"body1\" sx={{ color: '#1E40AF', fontWeight: 'medium' }}>\n                To: {format(endDate, 'MMM yyyy')}\n              </Typography>\n            </Box>\n          </Paper>\n\n          {/* Summary Cards - Now clearly marked as being for the selected date range */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            Performance Metrics\n          </Typography>\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#EBF5FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#2563EB' }}>shopping_bag</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Orders</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{aggregateMetrics.totalOrders.toLocaleString()}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#ECFDF5', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#10B981' }}>attach_money</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Revenue</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>${aggregateMetrics.totalRevenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#FEF3C7', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#F59E0B' }}>trending_up</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Avg. Order Value</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>${aggregateMetrics.avgOrderValue.toFixed(2)}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#F3E8FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#8B5CF6' }}>inventory_2</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Avg. Order Weight</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{aggregateMetrics.avgWeight.toFixed(2)} kg</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Chart Section - Within the Date Range */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]} Order Trends\n          </Typography>\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} md={8}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>\n                  Weekly Orders - {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart \n                    data={\n                      selectedCity === 'all' \n                        ? monthlyOrdersTrend \n                        : (projectionData?.weeklyHistoricalData || monthlyOrdersTrend)\n                    }\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis \n                      dataKey=\"name\" \n                      tick={{ fill: '#6B7280' }}\n                      interval=\"preserveStartEnd\"\n                      minTickGap={15}\n                      tickMargin={8}\n                    />\n                    <YAxis tick={{ fill: '#6B7280' }} />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: '#FFFFFF', \n                        borderRadius: '0.375rem', \n                        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', \n                        border: 'none' \n                      }}\n                      formatter={(value, name, props) => {\n                        return [`${value} orders`, name];\n                      }}\n                      labelFormatter={(label, items) => {\n                        const dataPoint = items?.[0]?.payload;\n                        return dataPoint?.fullname || label;\n                      }}\n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                    \n                    {selectedCity === 'all' \n                      ? Object.values(CITY_MAPPING)\n                        .filter(city => city !== 'All Cities')\n                        .map((city, index) => (\n                          <Line \n                            key={city}\n                            type=\"monotone\" \n                            dataKey={city} \n                            stroke={COLORS[index % COLORS.length]}\n                            strokeWidth={2}\n                            dot={{ r: 3, strokeWidth: 1, fill: COLORS[index % COLORS.length] }}\n                            activeDot={{ r: 6 }}\n                            isAnimationActive={true}\n                            animationDuration={1000}\n                            connectNulls={true}\n                          />\n                        ))\n                      : (\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"orders\" \n                          name={CITY_MAPPING[selectedCity]}\n                          stroke=\"#2563EB\"\n                          strokeWidth={2}\n                          dot={{ r: 3, strokeWidth: 1, fill: '#2563EB' }}\n                          activeDot={{ r: 6 }}\n                          isAnimationActive={true}\n                          animationDuration={1000}\n                          connectNulls={true}\n                        />\n                      )\n                    }\n                  </LineChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>Customer Types</Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={customerTypeDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {customerTypeDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${value} orders`, 'Count']} \n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Additional Metric Charts - with improved styling */}\n          <Grid container spacing={3} sx={{ mb: 5 }}>\n            <Grid item xs={12} md={7}>\n              <Paper sx={{ p: 2, height: '100%' }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                  <Typography variant=\"h6\">Customer Retention Over Time</Typography>\n                </Box>\n                \n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={retentionRateTrend}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis \n                      tickFormatter={(value) => `${(value * 100).toFixed(0)}%`}\n                      domain={[0, dataMax => Math.min(1, dataMax * 1.1)]}\n                    />\n                    <Tooltip \n                      formatter={(value) => [`${(value * 100).toFixed(1)}%`, 'Retention Rate']} \n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"retentionRate\" \n                      stroke=\"#3B82F6\" \n                      activeDot={{ r: 8 }}\n                      strokeWidth={2}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>Order Weight Distribution</Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={weightDistribution}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis dataKey=\"range\" tick={{ fill: '#6B7280' }} />\n                    <YAxis tick={{ fill: '#6B7280' }} />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${value} orders`, 'Count']} \n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                    <Bar dataKey=\"count\" fill=\"#26A69A\" name=\"Number of Orders\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Laundromat Performance Table - With Improved Styling */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            Laundromat Performance\n          </Typography>\n          <Paper sx={{ p: 0, mb: 4, overflowX: 'auto', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n            <Box sx={{ p: 3, borderBottom: '1px solid #E5E7EB' }}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={3}>\n                  <FormControl fullWidth variant=\"outlined\" size=\"small\">\n                    <InputLabel>Filter by Laundromat</InputLabel>\n                    <Select\n                      value={laundromatFilter}\n                      onChange={(e) => setLaundromatFilter(e.target.value)}\n                      label=\"Filter by Laundromat\"\n                    >\n                      <MenuItem value=\"all\">All Laundromats</MenuItem>\n                      {laundromats.map(laundromat => (\n                        <MenuItem key={laundromat.id} value={laundromat.id}>{laundromat.name}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </Box>\n            <Box>\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr style={{ backgroundColor: '#F9FAFB' }}>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('name')}\n                    >\n                      Laundromat Name <SortIcon column=\"name\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('orders')}\n                    >\n                      Total Orders <SortIcon column=\"orders\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('revenue')}\n                    >\n                      Revenue <SortIcon column=\"revenue\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('avgOrderValue')}\n                    >\n                      Avg. Order Value <SortIcon column=\"avgOrderValue\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('customers')}\n                    >\n                      Customers <SortIcon column=\"customers\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('returningCustomers')}\n                    >\n                      Returning <SortIcon column=\"returningCustomers\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('retentionScore')}\n                    >\n                      Retention <SortIcon column=\"retentionScore\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('avgTurnaroundDays')}\n                    >\n                      Turnaround <SortIcon column=\"avgTurnaroundDays\" />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {renderLaundromatTable()}\n                </tbody>\n              </table>\n            </Box>\n          </Paper>\n\n          {/* Map Section - replaced with Coming Soon version */}\n          {renderMapSection()}\n        </Container>\n      </Box>\n\n      {/* Footer */}\n      <Box component=\"footer\" sx={{ p: 3, backgroundColor: '#F1F5F9', borderTop: '1px solid #E2E8F0' }}>\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n          Laundry Service Analytics Dashboard &bull; Last updated: {new Date().toLocaleDateString()} \n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Dashboard; ","import React, { useState, useEffect } from 'react';\nimport { Box, CircularProgress, Typography, Button } from '@mui/material';\nimport Dashboard from './components/Dashboard';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabaseUrl = 'https://cnbpmepdmtpgrbllufcb.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNuYnBtZXBkbXRwZ3JibGx1ZmNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc5MjM4MjEsImV4cCI6MjA1MzQ5OTgyMX0.UqDleR4ucntrg9x6FNgJigKZjKiATFYiMiLiZZj3B2w';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Load data from Supabase\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        console.log('Fetching data from Supabase...');\n        \n        // First try Supabase\n        const { data: supabaseData, error: supabaseError } = await supabase\n          .from('appointments')\n          .select('*');\n        \n        if (supabaseError) {\n          console.error('Supabase error:', supabaseError);\n          throw new Error(`Failed to load data from Supabase: ${supabaseError.message}`);\n        }\n        \n        if (supabaseData && supabaseData.length > 0) {\n          console.log(`Successfully loaded ${supabaseData.length} records from Supabase`);\n          setData(supabaseData);\n        } else {\n          // Fallback to local JSON file\n          console.log('No data found in Supabase, falling back to local JSON file');\n          const response = await fetch('/appointments.json');\n          if (!response.ok) {\n            throw new Error(`Failed to load local data: ${response.status} ${response.statusText}`);\n          }\n          const jsonData = await response.json();\n          setData(jsonData);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err.message || 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Handle retry when loading fails\n  const handleRetry = () => {\n    setError(null);\n    setLoading(true);\n    // Re-trigger the effect\n    const loadData = async () => {\n      try {\n        // First try Supabase\n        const { data: supabaseData, error: supabaseError } = await supabase\n          .from('appointments')\n          .select('*');\n        \n        if (supabaseError) {\n          console.error('Supabase error:', supabaseError);\n          throw new Error(`Failed to load data from Supabase: ${supabaseError.message}`);\n        }\n        \n        if (supabaseData && supabaseData.length > 0) {\n          console.log(`Successfully loaded ${supabaseData.length} records from Supabase`);\n          setData(supabaseData);\n        } else {\n          // Fallback to local JSON file\n          console.log('No data found in Supabase, falling back to local JSON file');\n          const response = await fetch('/appointments.json');\n          if (!response.ok) {\n            throw new Error(`Failed to load local data: ${response.status} ${response.statusText}`);\n          }\n          const jsonData = await response.json();\n          setData(jsonData);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err.message || 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  };\n\n  if (loading) {\n    return (\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column',\n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          backgroundColor: '#F3F4F6'\n        }}\n      >\n        <CircularProgress size={60} sx={{ mb: 3 }} />\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          Loading laundry service data...\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column',\n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          backgroundColor: '#F3F4F6',\n          p: 3\n        }}\n      >\n        <Typography variant=\"h5\" color=\"error\" gutterBottom>\n          Error Loading Data\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3, maxWidth: 600, textAlign: 'center' }}>\n          {error}\n        </Typography>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleRetry}>\n          Retry\n        </Button>\n      </Box>\n    );\n  }\n\n  return <Dashboard jsonData={data} />;\n};\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport App from './App';\n\n// Create a custom theme\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1E3A8A',\n    },\n    secondary: {\n      main: '#10B981',\n    },\n    background: {\n      default: '#F3F4F6',\n    },\n  },\n  typography: {\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n    h5: {\n      fontWeight: 600,\n    },\n    h6: {\n      fontWeight: 600,\n    },\n  },\n  components: {\n    MuiPaper: {\n      defaultProps: {\n        elevation: 0,\n      },\n      styleOverrides: {\n        root: {\n          boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.05)',\n        },\n      },\n    },\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          textTransform: 'none',\n          borderRadius: 8,\n        },\n      },\n    },\n    MuiSelect: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8,\n        },\n      },\n    },\n  },\n});\n\n// Create the root element for our React application\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Render the application\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n); "],"sourceRoot":""}