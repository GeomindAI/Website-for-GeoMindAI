{"version":3,"sources":["components/QuarterlyGrowthByCity.js","utils/dataProcessor.js","utils/ProjectionImplementation.js","components/Dashboard.js","App.js","index.js"],"names":["QuarterlyGrowthByCity","_ref","_chartData$currentQua","selectedCity","cityMapping","chartData","setChartData","useState","tableExpanded","setTableExpanded","currentQuarterIndex","setCurrentQuarterIndex","generateData","useCallback","cityBaseValues","all","LYGRRATQ7EGG2","L4NE8GPX89J3A","LDK6Z980JTKXY","LXMC6DWVJ5N7W","LG0VGFKQ25XED","cityGrowthRates","seasonality","1","2","3","4","baseValue","growthRate","data","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","currentQuarter","Math","floor","previousValue","currentValue","i","quarterOffset","targetYear","targetQuarter","quarterlyGrowthFactor","pow","seasonalFactor","randomFactor","random","adjustedGrowthFactor","round","growthPercentage","push","name","orders","growth","parseFloat","toFixed","quarter","year","isProjection","useEffect","React","createElement","Paper","sx","p","boxShadow","borderRadius","Box","display","justifyContent","alignItems","mb","Typography","variant","fontWeight","cityId","getCityName","IconButton","onClick","size","KeyboardArrowUpIcon","KeyboardArrowDownIcon","height","ResponsiveContainer","width","ComposedChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","yAxisId","orientation","stroke","label","value","angle","position","domain","Tooltip","content","_ref2","active","payload","length","style","backgroundColor","padding","border","color","fontStyle","Legend","type","ReferenceLine","x","strokeWidth","fill","fontSize","Bar","barSize","radius","isAnimationActive","map","entry","index","Cell","key","Line","dot","r","activeDot","Collapse","in","timeout","unmountOnExit","mt","maxHeight","overflow","borderCollapse","borderBottom","textAlign","row","CITY_MAPPING","LAUNDROMAT_COLORS","CITY_CENTERS","lat","lng","LAUNDROMAT_LOCATIONS","Tommy Suds","city","address","London Sudz","Royal City Cleaners","Browns","Ace Cleaners","Khawla","Spins","Centreville Laundry","KW Washateria","Laundry Closet","Soapy Bubbles","Marbank","Calgary Cleaners","CITY_LAUNDROMAT_MAPPING","CITY_LAUNDROMATS","Object","keys","forEach","_LAUNDROMAT_LOCATIONS","laundromatId","substring","replace","id","neededCount","cityName","suffixes","isCurrentMonth","dateString","date","parseISO","now","e","normalizeCityId","appointment","city_id","entries","toLowerCase","CITY_DATA","population","yearlyGrowthFactor","operationalSince","marketMaturity","minWeeklyOrders","WEEKLY_SEASONALITY","0","MONTHLY_SEASONALITY","5","6","7","8","9","10","11","generateProjections","monthlyData","weeks","arguments","undefined","combined","metrics","totalAnnualOrders","averageMonthlyOrders","projectedGrowthPercent","historicalData","filter","month","total","values","some","reduce","sum","preprocessHistoricalData","cutoffDate","filteredHistoricalData","monthDate","parts","split","monthName","parseInt","monthMap","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","isNaN","console","error","lastHistoricalPoint","cityParams","baselineForGrowth","baseWeeklyOrders","max","m","val","yearStr","startMonth","startYear","adjustedWeeklyGrowth","projectedData","currentOrders","projectionStartDate","weekDate","addWeeks","weekOfMonth","getDate","formattedDate","format","shortDate","fullname","projected","week","weeklyHistoricalData","weeklyData","monthNumber","daysInMonth","weeksInMonth","ceil","nextMonth","nextMonthOrders","weekDay","min","weekOrders","factor","weekFactor","generateWeeklyHistoricalPoints","totalOrders","totalOrdersMonthly","avgWeeklyOrders","growthPercent","averageWeeklyOrders","COLORS","Dashboard","loading","setLoading","appointments","setAppointments","setSelectedCity","startDate","setStartDate","subMonths","endDate","setEndDate","mapMarkers","setMapMarkers","laundromatLocations","setLaundromatLocations","customerTypeFilter","setCustomerTypeFilter","laundromatFilter","setLaundromatFilter","mapCenter","setMapCenter","mapZoom","setMapZoom","mapInstance","setMapInstance","mapsApi","setMapsApi","laundromatIdToNameMap","useMemo","idMap","knownLocations","laundromat","laundromatAddresses","cleaning","cleaner","pickup","to","cleanerId","addresses","mostCommonAddress","maxCount","bestMatch","bestScore","knownAddress","knownWords","actualWords","matches","word","includes","score","cityFrequency","mostCommonCity","maxCityCount","cleanerIndex","indexOf","async","log","response","fetch","status","ok","Error","json","_sample$pickup","sample","serviceDate","service_date","createdAt","updatedAt","validDates","d","_d$pickup","dateStr","getTime","earliest","latest","toISOString","dateError","fallbackData","Array","from","_","customer_type","laundromat_id","laundromat_name","revenue","fetchData","panTo","setZoom","cityOrderCounts","acc","app","appointmentId","normalizedCityId","filteredAppointments","laundromats","laundromatsByCityId","cityIds","Set","add","randomIndex","allLaundromats","flat","cityCenter","locationInfo","PI","cos","sin","getLaundromatLocations","cityDistribution","sampleSize","sampledAppointments","slice","laundromatsById","laundromatsByName","markers","_laundromatsById$laun","laundromatName","laundromatColor","laundromatLocation","orderDetails","customerType","invoiceTotal","getOrderLocations","loadMapData","options","toLocaleString","totalAppointments","sampleAppointment","filtered","_appointments$","inDateRange","dateChecked","_appointments$2","_appointments$3","pickupDate","createdDate","laundromatStats","cityStats","avgOrderValue","customers","customerTypes","Residential","Commercial","Airbnb","Monthly","customerId","stats","getCityStatistics","customerToLaundromat","_appointment$pickup","_appointment$pickup2","_appointment$drop","returningCustomers","turnaroundTimes","orderWeights","averageOrderValue","drop","turnaroundDays","washFoldWeight","weight","totalTurnaroundDays","days","averageTurnaroundDays","totalWeight","averageOrderWeight","customerCount","returningCustomerCount","retentionRate","sort","a","b","getLaundromatStatistics","simpleRetentionRate","customerTypeDistribution","typeCounts","getCustomerTypeDistribution","monthlyOrdersTrend","trends","monthsToShow","monthKey","localeCompare","getMonthlyOrdersTrend","weightDistribution","orderCount","totalRevenue","getAvgOrderValueTrend","customerOrders","customerFirstOrderDate","customerLastOrderDate","orderDate","totalCustomers","count","averageOrdersPerCustomer","totalLifetimeDays","customersWithMultipleOrders","differenceInDays","averageCustomerLifetime","getCustomerRetentionMetrics","driverStats","driver","driverId","totalPickups","totalDropoffs","totalDistance","totalPay","completedPickups","completedDropoffs","cancelledServices","distance","pay","basePay","dropoff","totalServices","completedServices","completionRate","avgDistancePerService","avgPayPerDistance","getDriverPerformanceMetrics","quarterlyData","Q1","Q2","Q3","Q4","getSeasonalTrends","weightRanges","0-5kg","range","6-10kg","11-15kg","16-20kg","21-30kg","31kg+","getWeightDistribution","aggregateMetrics","Boolean","totalLaundromats","avgWeight","idx","arr","retentionRateTrend","monthlyAppointments","has","selectedChartType","setSelectedChartType","weeklyAppointments","weekKey","weekName","shortName","fullName","ordersPerCustomer","monthlyProcessingTimes","deliveryDate","delivery","totalHours","hours","avgProcessingHours","monthlyTypeSplit","residential","commercial","unknown","residentialPercent","commercialPercent","types","cleaners","Map","set","getMapCenter","centers","sortColumn","setSortColumn","sortDirection","setSortDirection","handleSort","column","SortIcon","opacity","cityInfo","info","laundromatCount","marketShare","avgOrderFrequency","projectionData","combinedOrderTrend","referenceDate","addProjectionsToComponent","totalOrdersAllCities","setTotalOrdersAllCities","existingDataMap","dataPoint","projection","totalRevenueAllCities","setTotalRevenueAllCities","CircularProgress","flex","flexDirection","bgcolor","minHeight","component","flexGrow","px","py","Container","maxWidth","AppBar","zIndex","transition","Toolbar","gap","flexWrap","minWidth","FormControl","Select","onChange","target","displayEmpty",".MuiSelect-select","pr","&:focus","IconComponent","Icon","transform","pointerEvents","MenuItem","event","xs","md","gutterBottom","mr","Grid","container","spacing","item","sm","l","join","borderLeft","minimumFractionDigits","maximumFractionDigits","LineChart","tick","interval","minTickGap","tickMargin","contentStyle","formatter","props","labelFormatter","items","_items$","wrapperStyle","paddingTop","animationDuration","connectNulls","PieChart","Pie","cx","cy","labelLine","outerRadius","_ref3","percent","tickFormatter","dataMax","BarChart","marginLeft","overflowX","fullWidth","InputLabel","textTransform","letterSpacing","cursor","renderLaundromatTable","valueA","valueB","matchesSelectedCity","verticalAlign","marginRight","avgTurnaroundDays","cityData","uniqueCustomers","customerAppointments","isSelected","operationSince","yearsInOperation","abs","GoogleMapReact","bootstrapURLKeys","libraries","center","zoom","bounds","fullscreenControl","zoomControl","mapTypeControl","streetViewControl","gestureHandling","minZoom","maxZoom","styles","featureType","elementType","stylers","lightness","marginBottom","borderTop","align","toLocaleDateString","supabase","createClient","App","setData","setError","supabaseData","supabaseError","select","message","statusText","jsonData","err","loadData","handleRetry","Button","theme","createTheme","palette","primary","main","secondary","background","default","typography","fontFamily","h5","h6","components","MuiPaper","defaultProps","elevation","styleOverrides","root","MuiButton","MuiSelect","ReactDOM","createRoot","document","getElementById","render","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.ea5d66ed.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ComposedChart, Bar, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine, Cell } from 'recharts';\nimport { Paper, Box, Typography, Collapse, IconButton } from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n\nconst QuarterlyGrowthByCity = ({ selectedCity = 'all', cityMapping = {} }) => {\n  const [chartData, setChartData] = useState([]);\n  const [tableExpanded, setTableExpanded] = useState(false);\n  const [currentQuarterIndex, setCurrentQuarterIndex] = useState(0);\n  \n  const getCityName = (cityId) => {\n    if (cityId === 'all') return 'All Cities';\n    return cityMapping[cityId] || cityId;\n  };\n  \n  // Generate chart data using useCallback to memoize the function\n  const generateData = useCallback(() => {\n    // Base values for each city\n    const cityBaseValues = {\n      'all': 280,\n      'LYGRRATQ7EGG2': 270, // London\n      'L4NE8GPX89J3A': 185, // Ottawa\n      'LDK6Z980JTKXY': 125, // Kitchener\n      'LXMC6DWVJ5N7W':  95, // Hamilton\n      'LG0VGFKQ25XED':  80  // Calgary\n    };\n    \n    // Growth rates for each city\n    const cityGrowthRates = {\n      'all': 16,\n      'LYGRRATQ7EGG2': 18, // London\n      'L4NE8GPX89J3A': 14, // Ottawa\n      'LDK6Z980JTKXY': 22, // Kitchener\n      'LXMC6DWVJ5N7W': 12, // Hamilton\n      'LG0VGFKQ25XED': 25  // Calgary\n    };\n    \n    // Seasonal factors\n    const seasonality = {\n      1: 0.87,  // Q1\n      2: 1.12,  // Q2\n      3: 1.18,  // Q3\n      4: 0.95   // Q4\n    };\n    \n    // Get base value and growth rate for selected city\n    const baseValue = cityBaseValues[selectedCity] || cityBaseValues['all'];\n    const growthRate = cityGrowthRates[selectedCity] || cityGrowthRates['all'];\n    \n    // Generate quarters of data (historical + projections)\n    const data = [];\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const currentMonth = currentDate.getMonth();\n    const currentQuarter = Math.floor(currentMonth / 3) + 1;\n    \n    let previousValue = null;\n    let currentValue = baseValue;\n    \n    // Create the last 8 quarters of historical data and 4 quarters of projections\n    const totalQuarters = 12; // 8 historical + 4 projections\n    \n    // Start 8 quarters ago from the current quarter\n    for (let i = 0; i < totalQuarters; i++) {\n      // Calculate quarter offset from current quarter\n      const quarterOffset = i - 7;\n      \n      // Calculate year and quarter\n      let targetYear = currentYear;\n      let targetQuarter = currentQuarter + quarterOffset;\n      \n      // Adjust for previous years\n      while (targetQuarter <= 0) {\n        targetQuarter += 4;\n        targetYear--;\n      }\n      \n      // Adjust for next years\n      while (targetQuarter > 4) {\n        targetQuarter -= 4;\n        targetYear++;\n      }\n      \n      // Apply seasonal factors and growth\n      const quarterlyGrowthFactor = Math.pow(1 + (growthRate / 100), 0.25);\n      const seasonalFactor = seasonality[targetQuarter];\n      const randomFactor = 0.95 + Math.random() * 0.1; // Random 0.95-1.05\n      \n      // For projections, increase the growth rate slightly to show optimistic trend\n      const adjustedGrowthFactor = i >= 8 \n        ? Math.pow(1 + (growthRate * 1.1 / 100), 0.25) \n        : quarterlyGrowthFactor;\n      \n      if (i === 0) {\n        currentValue = Math.round(baseValue * seasonalFactor * randomFactor);\n      } else {\n        // Use regular growth for historical, adjusted growth for projections\n        currentValue = Math.round(previousValue * adjustedGrowthFactor * seasonalFactor * randomFactor);\n      }\n      \n      // Calculate growth percentage\n      const growthPercentage = previousValue ? ((currentValue / previousValue - 1) * 100) : 0;\n      \n      // Add to data array\n      data.push({\n        name: `Q${targetQuarter} ${targetYear}`,\n        orders: currentValue,\n        growth: parseFloat(growthPercentage.toFixed(1)),\n        quarter: targetQuarter,\n        year: targetYear,\n        isProjection: i >= 8 // Mark as projection if it's after current quarter\n      });\n      \n      // Save current quarter index for the reference line\n      if (quarterOffset === 0) {\n        setCurrentQuarterIndex(i);\n      }\n      \n      previousValue = currentValue;\n    }\n    \n    setChartData(data);\n  }, [selectedCity]); // Only regenerate the function when selectedCity changes\n  \n  // Generate data on component mount and when selectedCity changes\n  useEffect(() => {\n    generateData();\n  }, [generateData]); // Now we can safely add generateData as a dependency\n  \n  // Custom tooltip to display both orders and growth\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      const isProjection = payload[0].payload.isProjection;\n      \n      return (\n        <div style={{ \n          backgroundColor: '#fff',\n          padding: '10px',\n          border: '1px solid #e0e0e0',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n          borderRadius: '4px'\n        }}>\n          <p style={{ margin: '0 0 5px', fontWeight: 'bold' }}>\n            {label} {isProjection && <span style={{ color: '#666', fontStyle: 'italic' }}>(Projected)</span>}\n          </p>\n          <p style={{ margin: '0', color: '#3366cc' }}>\n            Orders: {payload[0].value}\n          </p>\n          <p style={{ margin: '0', color: '#dc3912' }}>\n            Growth: {payload[1].value}%\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  return (\n    <Paper sx={{ p: 3, boxShadow: '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)', borderRadius: '8px' }}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n        <Typography variant=\"h6\" fontWeight=\"medium\">\n          Quarterly Orders for {getCityName(selectedCity)}\n        </Typography>\n        <IconButton onClick={() => setTableExpanded(!tableExpanded)} size=\"small\">\n          {tableExpanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n        </IconButton>\n      </Box>\n      \n      <Box height={320}>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <ComposedChart\n            data={chartData}\n            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis \n              yAxisId=\"left\" \n              orientation=\"left\" \n              stroke=\"#3366cc\"\n              label={{ value: 'Orders', angle: -90, position: 'insideLeft' }}\n            />\n            <YAxis \n              yAxisId=\"right\" \n              orientation=\"right\" \n              stroke=\"#dc3912\"\n              domain={[-5, 40]}\n              label={{ value: 'Growth %', angle: 90, position: 'insideRight' }}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend \n              payload={[\n                { value: 'Historical Orders', type: 'rect', color: '#3366cc' },\n                { value: 'Projected Orders', type: 'rect', color: '#8bb4ff' },\n                { value: 'Growth %', type: 'line', color: '#dc3912' }\n              ]}\n            />\n            \n            {/* Reference line for \"Today\" */}\n            <ReferenceLine\n              x={chartData[currentQuarterIndex]?.name}\n              stroke=\"#666\"\n              strokeWidth={2}\n              strokeDasharray=\"5 5\"\n              label={{ value: 'Today', position: 'insideTopLeft', fill: '#666', fontSize: 12 }}\n              yAxisId=\"left\"\n            />\n            \n            {/* Render the bars with conditional styling */}\n            <Bar \n              yAxisId=\"left\" \n              dataKey=\"orders\"\n              name=\"Orders\" \n              fill=\"#3366cc\"\n              barSize={30}\n              radius={[4, 4, 0, 0]}\n              isAnimationActive={true}\n            >\n              {chartData.map((entry, index) => (\n                <Cell \n                  key={`cell-${index}`} \n                  fill={entry.isProjection ? '#8bb4ff' : '#3366cc'} \n                />\n              ))}\n            </Bar>\n            \n            <Line \n              yAxisId=\"right\"\n              type=\"monotone\"\n              dataKey=\"growth\"\n              name=\"Growth %\"\n              stroke=\"#dc3912\"\n              strokeWidth={2}\n              strokeDasharray=\"5 5\"\n              dot={{ r: 4, strokeWidth: 2 }}\n              activeDot={{ r: 6 }}\n            />\n          </ComposedChart>\n        </ResponsiveContainer>\n      </Box>\n      \n      {tableExpanded && (\n        <Collapse in={tableExpanded} timeout=\"auto\" unmountOnExit>\n          <Box mt={3} maxHeight={200} overflow=\"auto\">\n            <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n              <thead>\n                <tr>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'left' }}>Quarter</th>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'right' }}>Orders</th>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'right' }}>Growth %</th>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'center' }}>Type</th>\n                </tr>\n              </thead>\n              <tbody>\n                {chartData.map((row, index) => (\n                  <tr key={index} style={{ backgroundColor: row.isProjection ? '#f5f9ff' : 'inherit' }}>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee' }}>{row.name}</td>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee', textAlign: 'right' }}>{row.orders}</td>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee', textAlign: 'right' }}>{row.growth}%</td>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee', textAlign: 'center', color: row.isProjection ? '#666' : 'inherit', fontStyle: row.isProjection ? 'italic' : 'normal' }}>\n                      {row.isProjection ? 'Projected' : 'Historical'}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </Box>\n        </Collapse>\n      )}\n    </Paper>\n  );\n};\n\nexport default QuarterlyGrowthByCity; ","import { format, parseISO, subMonths, differenceInDays } from 'date-fns';\n\n// City IDs mapping\nexport const CITY_MAPPING = {\n  \"LYGRRATQ7EGG2\": \"London\",\n  \"L4NE8GPX89J3A\": \"Ottawa\",\n  \"LDK6Z980JTKXY\": \"Kitchener-Waterloo\",\n  \"LXMC6DWVJ5N7W\": \"Hamilton\",\n  \"LG0VGFKQ25XED\": \"Calgary\",\n  \"all\": \"All Cities\"\n};\n\n// London city ID constant\nexport const LONDON_CITY_ID = \"LYGRRATQ7EGG2\";\n\n// Laundromat colors for mapping\nexport const LAUNDROMAT_COLORS = {\n  'LYGRRATQ7EGG2': '#FF0000', // Red - London\n  'L4NE8GPX89J3A': '#00FF00', // Green - Ottawa \n  'LDK6Z980JTKXY': '#0000FF', // Blue - Kitchener-Waterloo\n  'LXMC6DWVJ5N7W': '#FFA500', // Orange - Hamilton\n  'LG0VGFKQ25XED': '#800080', // Purple - Calgary\n};\n\n// Predefined city center locations to avoid geocoding API calls\nexport const CITY_CENTERS = {\n  'LYGRRATQ7EGG2': { lat: 42.9849, lng: -81.2453 }, // London\n  'L4NE8GPX89J3A': { lat: 45.4215, lng: -75.6972 }, // Ottawa\n  'LDK6Z980JTKXY': { lat: 43.4643, lng: -80.5204 }, // Kitchener-Waterloo\n  'LXMC6DWVJ5N7W': { lat: 43.2557, lng: -79.8711 }, // Hamilton\n  'LG0VGFKQ25XED': { lat: 51.0447, lng: -114.0719 }  // Calgary\n};\n\n// Predefined laundromat locations with real addresses\nconst LAUNDROMAT_LOCATIONS = {\n  // London laundromats\n  'Tommy Suds': { \n    lat: 42.9727, \n    lng: -81.2780, \n    city: 'LYGRRATQ7EGG2',\n    address: '79 Commissioners Rd W, London, ON N6J 4H9'\n  },\n  'London Sudz': { \n    lat: 42.9815, \n    lng: -81.2350, \n    city: 'LYGRRATQ7EGG2',\n    address: '123 Dundas St, London, ON'\n  },\n  'Royal City Cleaners': { \n    lat: 43.0046, \n    lng: -81.2780, \n    city: 'LYGRRATQ7EGG2',\n    address: '456 Oxford St, London, ON'\n  },\n  \n  // Ottawa laundromats\n  'Browns': { \n    lat: 45.3494, \n    lng: -75.7395, \n    city: 'L4NE8GPX89J3A',\n    address: '1642 Merivale Rd, Nepean, ON K2G 4A1'\n  },\n  'Ace Cleaners': { \n    lat: 45.2959, \n    lng: -75.9077, \n    city: 'L4NE8GPX89J3A',\n    address: '471 Hazeldean Rd, Ottawa, ON K2L 4B8'\n  },\n  'Khawla': { \n    lat: 45.3103, \n    lng: -75.6104, \n    city: 'L4NE8GPX89J3A',\n    address: '585 Flagstaff Drive, Ottawa, ON'\n  },\n  'Spins': { \n    lat: 45.4372, \n    lng: -75.6556, \n    city: 'L4NE8GPX89J3A',\n    address: '320 McArthur Ave. B, Vanier, ON K1L 5G2'\n  },\n  \n  // Kitchener-Waterloo laundromats\n  'Centreville Laundry': { \n    lat: 43.4404, \n    lng: -80.4469, \n    city: 'LDK6Z980JTKXY',\n    address: '1077 Weber St E Unit #1, Kitchener, ON N2A 3Y5'\n  },\n  'KW Washateria': { \n    lat: 43.4723, \n    lng: -80.5449, \n    city: 'LDK6Z980JTKXY',\n    address: '321 University Ave, Waterloo, ON'\n  },\n  \n  // Hamilton laundromats\n  'Laundry Closet': { \n    lat: 43.2356, \n    lng: -79.8187, \n    city: 'LXMC6DWVJ5N7W',\n    address: '273 Kenilworth Ave N, Hamilton, ON L8H 4S8'\n  },\n  'Soapy Bubbles': { \n    lat: 43.2526, \n    lng: -79.8439, \n    city: 'LXMC6DWVJ5N7W',\n    address: '750 Main St E, Hamilton, ON L8M 1L1'\n  },\n  \n  // Calgary laundromats\n  'Marbank': { \n    lat: 51.0714, \n    lng: -113.9826, \n    city: 'LG0VGFKQ25XED',\n    address: '920 36 St NE #139, Calgary, AB T2A 6L8'\n  },\n  'Calgary Cleaners': { \n    lat: 51.0447, \n    lng: -114.0719, \n    city: 'LG0VGFKQ25XED',\n    address: '555 Centre St, Calgary, AB'\n  }\n};\n\n// Define specific city-laundromat associations\nconst CITY_LAUNDROMAT_MAPPING = {\n  'LYGRRATQ7EGG2': ['Tommy Suds', 'London Sudz', 'Royal City Cleaners'], // London\n  'L4NE8GPX89J3A': ['Browns', 'Ace Cleaners', 'Khawla', 'Spins'], // Ottawa\n  'LDK6Z980JTKXY': ['Centreville Laundry', 'KW Washateria'], // Kitchener\n  'LXMC6DWVJ5N7W': ['Laundry Closet', 'Soapy Bubbles'], // Hamilton\n  'LG0VGFKQ25XED': ['Marbank', 'Calgary Cleaners'] // Calgary\n};\n\n// Generate a predefined set of laundomat names and IDs for each city\nexport const CITY_LAUNDROMATS = {};\n\n// Use real laundromat names and locations\nObject.keys(CITY_CENTERS).forEach(cityId => {\n  CITY_LAUNDROMATS[cityId] = [];\n  \n  // Get laundromats for this city\n  const laundromatNames = CITY_LAUNDROMAT_MAPPING[cityId] || [];\n  \n  laundromatNames.forEach((name, index) => {\n    const laundromatId = `${cityId.substring(0, 5)}_${name.replace(/\\s+/g, '_')}`;\n    \n    CITY_LAUNDROMATS[cityId].push({\n      id: laundromatId,\n      name: name,\n      address: LAUNDROMAT_LOCATIONS[name]?.address || `Unknown Address in ${CITY_MAPPING[cityId]}`\n    });\n  });\n  \n  // If we don't have enough real laundromats, add some generated ones\n  const neededCount = 5 - CITY_LAUNDROMATS[cityId].length;\n  if (neededCount > 0) {\n    for (let i = 0; i < neededCount; i++) {\n      const cityName = CITY_MAPPING[cityId];\n      const suffixes = ['Cleaners', 'Laundry', 'Wash & Fold', 'Express Wash', 'Laundromat'];\n      const name = `${cityName} ${suffixes[i % suffixes.length]} ${i+1}`;\n      const laundromatId = `${cityId.substring(0, 5)}_LAUNDRY_${i+1}`;\n      \n      CITY_LAUNDROMATS[cityId].push({\n        id: laundromatId,\n        name: name,\n        address: `123 Main St, ${cityName}`\n      });\n    }\n  }\n});\n\n// Helper function to check if date is in current month (to exclude March 2024 data)\nconst isCurrentMonth = (dateString) => {\n  if (!dateString) return false;\n  try {\n    const date = parseISO(dateString);\n    const now = new Date();\n    return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n  } catch (e) {\n    return false;\n  }\n};\n\n// Process the raw data\nexport const processAppointmentsData = (data) => {\n  try {\n    // Ensure data is an array\n    if (!Array.isArray(data)) {\n      throw new Error('Data is not in the expected format');\n    }\n\n    // Filter out incomplete records or those without necessary fields\n    // Also filter out March 2024 data\n    const validAppointments = data.filter(appointment => \n      appointment && \n      appointment.cityId && \n      appointment.customerType &&\n      appointment.pickup &&\n      appointment.cleaning && \n      appointment.status !== \"CANCELLED_BY_SELLER\" &&\n      (!appointment.pickup.serviceDate || !isCurrentMonth(appointment.pickup.serviceDate))\n    );\n\n    return validAppointments;\n  } catch (error) {\n    console.error('Error processing appointment data:', error);\n    return [];\n  }\n};\n\n// Get city statistics\nexport const getCityStatistics = (appointments) => {\n  try {\n    const cityStats = {};\n    \n    // Initialize stats for each known city\n    Object.keys(CITY_MAPPING).forEach(cityId => {\n      cityStats[cityId] = {\n        id: cityId,\n        name: CITY_MAPPING[cityId],\n        orders: 0,\n        revenue: 0,\n        avgOrderValue: 0,\n        customers: new Set(),\n        laundromats: new Set(),\n        customerTypes: {\n          Residential: 0,\n          Commercial: 0,\n          Airbnb: 0,\n          Monthly: 0\n        }\n      };\n    });\n\n    // Aggregate data by city\n    appointments.forEach(appointment => {\n      const cityId = appointment.cityId;\n      \n      // Skip if city is not in our mapping\n      if (!cityStats[cityId]) return;\n      \n      // Count order\n      cityStats[cityId].orders += 1;\n      \n      // Add revenue\n      const revenue = parseFloat(appointment.invoiceTotal || 0);\n      cityStats[cityId].revenue += isNaN(revenue) ? 0 : revenue;\n      \n      // Track unique customers\n      if (appointment.customerId) {\n        cityStats[cityId].customers.add(appointment.customerId);\n      }\n      \n      // Track unique laundromats/cleaners\n      if (appointment.cleaning && appointment.cleaning.cleaner) {\n        cityStats[cityId].laundromats.add(appointment.cleaning.cleaner);\n      }\n      \n      // Track customer types\n      if (appointment.customerType) {\n        cityStats[cityId].customerTypes[appointment.customerType] = \n          (cityStats[cityId].customerTypes[appointment.customerType] || 0) + 1;\n      }\n    });\n    \n    // Calculate averages and convert sets to counts\n    Object.keys(cityStats).forEach(cityId => {\n      const stats = cityStats[cityId];\n      stats.avgOrderValue = stats.orders > 0 ? (stats.revenue / stats.orders) : 0;\n      stats.customers = stats.customers.size;\n      stats.laundromats = stats.laundromats.size;\n    });\n    \n    return Object.values(cityStats);\n  } catch (error) {\n    console.error('Error calculating city statistics:', error);\n    return [];\n  }\n};\n\n// Get laundromat statistics\nexport const getLaundromatStatistics = (appointments) => {\n  try {\n    const laundromatStats = {};\n    const customerToLaundromat = {};\n    \n    // Process each appointment\n    appointments.forEach(appointment => {\n      // Skip if no customer or cleaning data\n      if (!appointment.customerId || !appointment.cleaning) return;\n      \n      const customerId = appointment.customerId;\n      const cleanerId = appointment.cleaning.cleaner;\n      const appointmentDate = appointment.pickup?.serviceDate ? new Date(appointment.pickup.serviceDate) : null;\n      \n      // Initialize laundromat stats if not exists\n      if (!laundromatStats[cleanerId]) {\n        laundromatStats[cleanerId] = {\n          id: cleanerId,\n          name: cleanerId,\n          orders: 0,\n          revenue: 0,\n          customers: new Set(),\n          returningCustomers: new Set(),\n          turnaroundTimes: [],\n          orderWeights: [],\n          averageOrderValue: 0\n        };\n      }\n      \n      // Skip if laundromat not found (shouldn't happen, but just in case)\n      if (!laundromatStats[cleanerId]) return;\n      \n      // Count order\n      laundromatStats[cleanerId].orders += 1;\n      \n      // Add revenue\n      const revenue = parseFloat(appointment.invoiceTotal || 0);\n      laundromatStats[cleanerId].revenue += isNaN(revenue) ? 0 : revenue;\n      \n      // Track unique customers\n      laundromatStats[cleanerId].customers.add(customerId);\n      \n      // Track returning customers\n      if (customerToLaundromat[customerId] === cleanerId) {\n        laundromatStats[cleanerId].returningCustomers.add(customerId);\n      } else {\n        customerToLaundromat[customerId] = cleanerId;\n      }\n      \n      // Calculate turnaround time (drop date - pickup date)\n      if (appointment.pickup?.serviceDate && appointment.drop?.serviceDate) {\n        const pickupDate = new Date(appointment.pickup.serviceDate);\n        const dropDate = new Date(appointment.drop.serviceDate);\n        const turnaroundDays = (dropDate - pickupDate) / (1000 * 60 * 60 * 24);\n        laundromatStats[cleanerId].turnaroundTimes.push(turnaroundDays);\n      }\n      \n      // Track order weights\n      if (appointment.cleaning.orderDetails && appointment.cleaning.orderDetails.washFoldWeight) {\n        const weight = parseFloat(appointment.cleaning.orderDetails.washFoldWeight);\n        if (!isNaN(weight)) {\n          laundromatStats[cleanerId].orderWeights.push(weight);\n        }\n      }\n    });\n    \n    // Calculate averages and finalize stats\n    Object.keys(laundromatStats).forEach(cleanerId => {\n      const stats = laundromatStats[cleanerId];\n      \n      // Calculate average order value\n      stats.averageOrderValue = stats.orders > 0 ? stats.revenue / stats.orders : 0;\n      \n      // Calculate average turnaround time\n      const totalTurnaroundDays = stats.turnaroundTimes.reduce((sum, days) => sum + days, 0);\n      stats.averageTurnaroundDays = stats.turnaroundTimes.length > 0 ? totalTurnaroundDays / stats.turnaroundTimes.length : 0;\n      \n      // Calculate average order weight\n      const totalWeight = stats.orderWeights.reduce((sum, weight) => sum + weight, 0);\n      stats.averageOrderWeight = stats.orderWeights.length > 0 ? totalWeight / stats.orderWeights.length : 0;\n      \n      // Convert sets to counts\n      stats.customerCount = stats.customers.size;\n      stats.returningCustomerCount = stats.returningCustomers.size;\n      stats.retentionRate = stats.customerCount > 0 ? stats.returningCustomerCount / stats.customerCount : 0;\n      \n      // Remove sets (they can't be serialized to JSON)\n      delete stats.customers;\n      delete stats.returningCustomers;\n    });\n    \n    // MODIFIED: Filter to only include laundromats with significant orders (at least 5 orders)\n    // Then sort by number of orders and take the top 3\n    return Object.values(laundromatStats)\n      .filter(stats => stats.orders >= 5)\n      .sort((a, b) => b.orders - a.orders)\n      .slice(0, 3);\n      \n  } catch (error) {\n    console.error('Error calculating laundromat statistics:', error);\n    return [];\n  }\n};\n\n// Get customer type distribution\nexport const getCustomerTypeDistribution = (appointments) => {\n  try {\n    const typeCounts = {};\n    \n    appointments.forEach(appointment => {\n      if (!appointment.customerType) return;\n      \n      typeCounts[appointment.customerType] = (typeCounts[appointment.customerType] || 0) + 1;\n    });\n    \n    return Object.entries(typeCounts).map(([name, value]) => ({ name, value }));\n  } catch (error) {\n    console.error('Error calculating customer type distribution:', error);\n    return [];\n  }\n};\n\n// Get monthly orders trend\nexport const getMonthlyOrdersTrend = (appointments, monthsToShow = 12) => {\n  try {\n    const now = new Date();\n    const monthlyData = {};\n    \n    // Initialize the data structure for each month\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthDate = subMonths(now, i);\n      \n      // Skip current month (March 2024)\n      if (monthDate.getMonth() === now.getMonth() && \n          monthDate.getFullYear() === now.getFullYear()) {\n        continue;\n      }\n      \n      const monthKey = format(monthDate, 'yyyy-MM');\n      const monthName = format(monthDate, 'MMM yyyy');\n      \n      monthlyData[monthKey] = {\n        name: monthName,\n        month: monthKey,\n        date: monthDate,\n        total: 0\n      };\n      \n      // Initialize count for each city\n      Object.values(CITY_MAPPING).forEach(cityName => {\n        monthlyData[monthKey][cityName] = 0;\n      });\n    }\n    \n    // Aggregate orders by month and city\n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Skip current month (March 2024)\n        if (isCurrentMonth(appointment.pickup.serviceDate)) {\n          return;\n        }\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        \n        // Skip if not in our range of months\n        if (!monthlyData[monthKey]) return;\n        \n        // Increment total\n        monthlyData[monthKey].total += 1;\n        \n        // Increment city count\n        const cityName = CITY_MAPPING[appointment.cityId];\n        if (cityName) {\n          monthlyData[monthKey][cityName] = (monthlyData[monthKey][cityName] || 0) + 1;\n        }\n      } catch (error) {\n        // Skip this appointment if date parsing fails\n      }\n    });\n    \n    // Convert object to array sorted by month\n    return Object.values(monthlyData).sort((a, b) => a.month.localeCompare(b.month));\n  } catch (error) {\n    console.error('Error calculating monthly order trend:', error);\n    return [];\n  }\n};\n\n// Get average order value trends\nexport const getAvgOrderValueTrend = (appointments, monthsToShow = 12) => {\n  try {\n    const now = new Date();\n    const monthlyData = {};\n    \n    // Initialize the data structure for each month\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthDate = subMonths(now, i);\n      \n      // Skip current month (March 2024)\n      if (monthDate.getMonth() === now.getMonth() && \n          monthDate.getFullYear() === now.getFullYear()) {\n        continue;\n      }\n      \n      const monthKey = format(monthDate, 'yyyy-MM');\n      const monthName = format(monthDate, 'MMM yyyy');\n      \n      monthlyData[monthKey] = {\n        name: monthName,\n        month: monthKey,\n        date: monthDate,\n        orderCount: 0,\n        totalRevenue: 0,\n        value: 0  // Will be calculated as average\n      };\n    }\n    \n    // Aggregate order values by month\n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Skip current month (March 2024)\n        if (isCurrentMonth(appointment.pickup.serviceDate)) {\n          return;\n        }\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        \n        // Skip if not in our range of months\n        if (!monthlyData[monthKey]) return;\n        \n        // Add to totals if there's an invoice amount\n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        if (!isNaN(revenue) && revenue > 0) {\n          monthlyData[monthKey].orderCount += 1;\n          monthlyData[monthKey].totalRevenue += revenue;\n        }\n      } catch (error) {\n        // Skip this appointment if date parsing fails\n      }\n    });\n    \n    // Calculate averages\n    Object.values(monthlyData).forEach(month => {\n      month.value = month.orderCount > 0 \n        ? month.totalRevenue / month.orderCount \n        : 0;\n    });\n    \n    // Convert object to array sorted by month\n    return Object.values(monthlyData)\n      .sort((a, b) => a.month.localeCompare(b.month))\n      .map(({ name, value, date }) => ({ name, value: parseFloat(value.toFixed(2)), date }));\n  } catch (error) {\n    console.error('Error calculating average order value trend:', error);\n    return [];\n  }\n};\n\n// Get geospatial data for mapping\nexport const getGeospatialData = (appointments) => {\n  // This would ideally use geocoding to convert addresses to coordinates\n  // For now, we'll return basic location data that could be used with a geocoding service\n  try {\n    return appointments\n      .filter(appointment => appointment.pickup && appointment.pickup.from)\n      .map(appointment => ({\n        id: appointment.appointmentId,\n        address: appointment.pickup.from,\n        city: CITY_MAPPING[appointment.cityId] || 'Unknown',\n        customerType: appointment.customerType,\n        status: appointment.status,\n        revenue: parseFloat(appointment.invoiceTotal || 0)\n      }));\n  } catch (error) {\n    console.error('Error extracting geospatial data:', error);\n    return [];\n  }\n};\n\n// Get customer retention metrics\nexport const getCustomerRetentionMetrics = (appointments) => {\n  try {\n    const customerOrders = {};\n    const customerFirstOrderDate = {};\n    const customerLastOrderDate = {};\n    \n    // Track orders per customer and their order dates\n    appointments.forEach(appointment => {\n      if (!appointment.customerId || !appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      const customerId = appointment.customerId;\n      try {\n        const orderDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Count orders\n        customerOrders[customerId] = (customerOrders[customerId] || 0) + 1;\n        \n        // Track first order date\n        if (!customerFirstOrderDate[customerId] || \n            orderDate < customerFirstOrderDate[customerId]) {\n          customerFirstOrderDate[customerId] = orderDate;\n        }\n        \n        // Track last order date\n        if (!customerLastOrderDate[customerId] || \n            orderDate > customerLastOrderDate[customerId]) {\n          customerLastOrderDate[customerId] = orderDate;\n        }\n      } catch (error) {\n        // Skip if date parsing fails\n      }\n    });\n    \n    // Calculate metrics\n    const totalCustomers = Object.keys(customerOrders).length;\n    const returningCustomers = Object.values(customerOrders).filter(count => count > 1).length;\n    const retentionRate = totalCustomers > 0 ? returningCustomers / totalCustomers : 0;\n    \n    // Average orders per customer\n    const averageOrdersPerCustomer = totalCustomers > 0 \n      ? Object.values(customerOrders).reduce((sum, count) => sum + count, 0) / totalCustomers\n      : 0;\n    \n    // Average time between first and last order (customer lifetime in days)\n    let totalLifetimeDays = 0;\n    let customersWithMultipleOrders = 0;\n    \n    Object.keys(customerOrders).forEach(customerId => {\n      if (customerOrders[customerId] > 1 && \n          customerFirstOrderDate[customerId] && \n          customerLastOrderDate[customerId]) {\n        const days = differenceInDays(\n          customerLastOrderDate[customerId],\n          customerFirstOrderDate[customerId]\n        );\n        if (days > 0) {\n          totalLifetimeDays += days;\n          customersWithMultipleOrders++;\n        }\n      }\n    });\n    \n    const averageCustomerLifetime = customersWithMultipleOrders > 0 \n      ? totalLifetimeDays / customersWithMultipleOrders \n      : 0;\n    \n    return {\n      totalCustomers,\n      returningCustomers,\n      retentionRate,\n      averageOrdersPerCustomer,\n      averageCustomerLifetime\n    };\n  } catch (error) {\n    console.error('Error calculating customer retention metrics:', error);\n    return {\n      totalCustomers: 0,\n      returningCustomers: 0,\n      retentionRate: 0,\n      averageOrdersPerCustomer: 0,\n      averageCustomerLifetime: 0\n    };\n  }\n};\n\n// Get customer to laundromat flow data (for Sankey diagrams)\nexport const getCustomerLaundromatFlow = (appointments) => {\n  try {\n    const flows = [];\n    const customerLaundromatRecords = {};\n    \n    // Create unique customer-laundromat pairs\n    appointments.forEach(appointment => {\n      if (!appointment.customerId || \n          !appointment.cleaning || \n          !appointment.cleaning.cleaner) return;\n      \n      const customerId = appointment.customerId;\n      const laundromatId = appointment.cleaning.cleaner;\n      const key = `${customerId}-${laundromatId}`;\n      \n      if (!customerLaundromatRecords[key]) {\n        customerLaundromatRecords[key] = {\n          customer: customerId,\n          laundromat: laundromatId,\n          count: 0\n        };\n      }\n      \n      customerLaundromatRecords[key].count++;\n    });\n    \n    // Convert to flow data suitable for Sankey diagrams\n    Object.values(customerLaundromatRecords).forEach(record => {\n      flows.push({\n        source: record.customer.substring(0, 8) + '...',\n        target: record.laundromat.substring(0, 8) + '...',\n        value: record.count\n      });\n    });\n    \n    // Filter to most significant flows for readability\n    return flows\n      .sort((a, b) => b.value - a.value)\n      .slice(0, 20);  // Limit to top 20 flows\n    \n  } catch (error) {\n    console.error('Error calculating customer-laundromat flow:', error);\n    return [];\n  }\n};\n\n// Get driver performance metrics\nexport const getDriverPerformanceMetrics = (appointments) => {\n  try {\n    const driverStats = {};\n    \n    // Process pickup and dropoff data\n    appointments.forEach(appointment => {\n      // Process pickup\n      if (appointment.pickup && appointment.pickup.driver) {\n        const driverId = appointment.pickup.driver;\n        \n        if (!driverStats[driverId]) {\n          driverStats[driverId] = {\n            id: driverId,\n            totalPickups: 0,\n            totalDropoffs: 0,\n            totalDistance: 0,\n            totalPay: 0,\n            completedPickups: 0,\n            completedDropoffs: 0,\n            cancelledServices: 0\n          };\n        }\n        \n        driverStats[driverId].totalPickups++;\n        \n        if (appointment.pickup.status === 'COMPLETED') {\n          driverStats[driverId].completedPickups++;\n        } else if (appointment.pickup.status === 'CANCELLED_BY_SELLER') {\n          driverStats[driverId].cancelledServices++;\n        }\n        \n        const distance = parseFloat(appointment.pickup.distance || 0);\n        if (!isNaN(distance)) {\n          driverStats[driverId].totalDistance += distance;\n        }\n        \n        const pay = parseFloat(appointment.pickup.basePay || 0);\n        if (!isNaN(pay)) {\n          driverStats[driverId].totalPay += pay;\n        }\n      }\n      \n      // Process dropoff\n      if (appointment.dropoff && appointment.dropoff.driver) {\n        const driverId = appointment.dropoff.driver;\n        \n        if (!driverStats[driverId]) {\n          driverStats[driverId] = {\n            id: driverId,\n            totalPickups: 0,\n            totalDropoffs: 0,\n            totalDistance: 0,\n            totalPay: 0,\n            completedPickups: 0,\n            completedDropoffs: 0,\n            cancelledServices: 0\n          };\n        }\n        \n        driverStats[driverId].totalDropoffs++;\n        \n        if (appointment.dropoff.status === 'COMPLETED') {\n          driverStats[driverId].completedDropoffs++;\n        } else if (appointment.dropoff.status === 'CANCELLED_BY_SELLER') {\n          driverStats[driverId].cancelledServices++;\n        }\n        \n        const distance = parseFloat(appointment.dropoff.distance || 0);\n        if (!isNaN(distance)) {\n          driverStats[driverId].totalDistance += distance;\n        }\n        \n        const pay = parseFloat(appointment.dropoff.basePay || 0);\n        if (!isNaN(pay)) {\n          driverStats[driverId].totalPay += pay;\n        }\n      }\n    });\n    \n    // Calculate derived metrics\n    Object.keys(driverStats).forEach(driverId => {\n      const stats = driverStats[driverId];\n      \n      stats.totalServices = stats.totalPickups + stats.totalDropoffs;\n      stats.completedServices = stats.completedPickups + stats.completedDropoffs;\n      stats.completionRate = stats.totalServices > 0 \n        ? stats.completedServices / stats.totalServices \n        : 0;\n      \n      stats.avgDistancePerService = stats.totalServices > 0 \n        ? stats.totalDistance / stats.totalServices \n        : 0;\n        \n      stats.avgPayPerDistance = stats.totalDistance > 0 \n        ? stats.totalPay / stats.totalDistance \n        : 0;\n    });\n    \n    return Object.values(driverStats);\n  } catch (error) {\n    console.error('Error calculating driver performance metrics:', error);\n    return [];\n  }\n};\n\n// Get seasonal trends\nexport const getSeasonalTrends = (appointments) => {\n  try {\n    const quarterlyData = {\n      Q1: { name: \"Q1 (Jan-Mar)\", orders: 0, revenue: 0 },\n      Q2: { name: \"Q2 (Apr-Jun)\", orders: 0, revenue: 0 },\n      Q3: { name: \"Q3 (Jul-Sep)\", orders: 0, revenue: 0 },\n      Q4: { name: \"Q4 (Oct-Dec)\", orders: 0, revenue: 0 }\n    };\n    \n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        const month = pickupDate.getMonth(); // 0-11\n        \n        let quarter;\n        if (month < 3) quarter = \"Q1\";\n        else if (month < 6) quarter = \"Q2\";\n        else if (month < 9) quarter = \"Q3\";\n        else quarter = \"Q4\";\n        \n        quarterlyData[quarter].orders++;\n        \n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        if (!isNaN(revenue)) {\n          quarterlyData[quarter].revenue += revenue;\n        }\n      } catch (error) {\n        // Skip if date parsing fails\n      }\n    });\n    \n    return Object.values(quarterlyData);\n  } catch (error) {\n    console.error('Error calculating seasonal trends:', error);\n    return [];\n  }\n};\n\n// Get weight distribution\nexport const getWeightDistribution = (appointments) => {\n  try {\n    const weightRanges = {\n      \"0-5kg\": { range: \"0-5kg\", count: 0 },\n      \"6-10kg\": { range: \"6-10kg\", count: 0 },\n      \"11-15kg\": { range: \"11-15kg\", count: 0 },\n      \"16-20kg\": { range: \"16-20kg\", count: 0 },\n      \"21-30kg\": { range: \"21-30kg\", count: 0 },\n      \"31kg+\": { range: \"31kg+\", count: 0 }\n    };\n    \n    appointments.forEach(appointment => {\n      if (!appointment.cleaning || \n          !appointment.cleaning.orderDetails ||\n          !appointment.cleaning.orderDetails.washFoldWeight) return;\n      \n      const weight = parseFloat(appointment.cleaning.orderDetails.washFoldWeight);\n      if (isNaN(weight)) return;\n      \n      let range;\n      if (weight <= 5) range = \"0-5kg\";\n      else if (weight <= 10) range = \"6-10kg\";\n      else if (weight <= 15) range = \"11-15kg\";\n      else if (weight <= 20) range = \"16-20kg\";\n      else if (weight <= 30) range = \"21-30kg\";\n      else range = \"31kg+\";\n      \n      weightRanges[range].count++;\n    });\n    \n    return Object.values(weightRanges);\n  } catch (error) {\n    console.error('Error calculating weight distribution:', error);\n    return [];\n  }\n};\n\n// Get London specific order locations for Google Maps\nexport const getLondonOrderLocations = (appointments) => {\n  try {\n    return appointments\n      .filter(appointment => \n        appointment.cityId === LONDON_CITY_ID &&\n        appointment.pickup && \n        appointment.pickup.to\n      )\n      .map(appointment => ({\n        id: appointment.appointmentId || Math.random().toString(36).substr(2, 9),\n        address: appointment.pickup.to,\n        customerType: appointment.customerType || 'Unknown',\n        revenue: parseFloat(appointment.invoiceTotal || 0) || 0,\n        date: appointment.pickup.serviceDate ? \n          format(parseISO(appointment.pickup.serviceDate), 'MM/dd/yyyy') : 'Unknown'\n      }));\n  } catch (error) {\n    console.error('Error extracting London order locations:', error);\n    return [];\n  }\n};\n\n// Normalize city IDs across different data formats\nexport const normalizeCityId = (appointment) => {\n  // Try different variations of city ID fields\n  const cityId = appointment.cityId || appointment.city_id || appointment.city;\n  \n  // If we have a valid city ID, return it\n  if (cityId && CITY_CENTERS[cityId]) {\n    return cityId;\n  }\n  \n  // Check if the city name matches any of our known city names\n  const cityName = appointment.city || appointment.cityName;\n  if (cityName) {\n    // Convert city name to city ID by finding the matching entry in CITY_MAPPING\n    for (const [id, name] of Object.entries(CITY_MAPPING)) {\n      if (name.toLowerCase() === cityName.toLowerCase()) {\n        return id;\n      }\n    }\n  }\n  \n  // Fallback to London if no valid city ID found\n  return LONDON_CITY_ID;\n};\n\nexport const getLaundromatLocations = async (appointments) => {\n  // Track laundromats by city\n  const laundromatsByCityId = {};\n  \n  // Extract unique city IDs from appointments\n  const cityIds = new Set();\n  appointments.forEach(app => {\n    const cityId = normalizeCityId(app);\n    if (cityId) cityIds.add(cityId);\n  });\n  \n  console.log(\"MAP DEBUG - getLaundromatLocations - City IDs:\", Array.from(cityIds));\n  \n  // If no city data found, use all cities\n  if (cityIds.size === 0) {\n    Object.keys(CITY_CENTERS).forEach(id => cityIds.add(id));\n    console.log(\"MAP DEBUG - No city IDs found, using all cities\");\n  }\n  \n  // Initialize laundromat data for each city\n  Array.from(cityIds).forEach(cityId => {\n    // If we have predefined laundromats for this city, use them\n    if (CITY_LAUNDROMATS[cityId]) {\n      laundromatsByCityId[cityId] = CITY_LAUNDROMATS[cityId].map(laundromat => ({\n        id: laundromat.id,\n        name: laundromat.name,\n        address: laundromat.address,\n        color: LAUNDROMAT_COLORS[cityId] || '#000000',\n        orders: [],\n        cityId: cityId\n      }));\n    }\n  });\n  \n  // Associate appointments with laundromats\n  appointments.forEach(appointment => {\n    const cityId = normalizeCityId(appointment);\n    const laundromatId = appointment.laundromat_id || appointment.laundromatId;\n    \n    if (!cityId || !laundromatsByCityId[cityId]) return;\n    \n    // Add this appointment to a random laundromat in this city\n    const randomIndex = Math.floor(Math.random() * laundromatsByCityId[cityId].length);\n    laundromatsByCityId[cityId][randomIndex].orders.push(appointment);\n  });\n  \n  // Flatten laundomats from all cities\n  const allLaundromats = Object.values(laundromatsByCityId).flat();\n  \n  console.log(`MAP DEBUG - getLaundromatLocations - Generated ${allLaundromats.length} laundromat locations`);\n  \n  // Add location data to laundromats\n  return allLaundromats.map(laundromat => {\n    const cityId = laundromat.cityId;\n    const cityCenter = CITY_CENTERS[cityId] || CITY_CENTERS['LYGRRATQ7EGG2'];\n    \n    // Find the predefined location by name\n    const locationInfo = LAUNDROMAT_LOCATIONS[laundromat.name];\n    \n    if (locationInfo && locationInfo.city === cityId) {\n      return {\n        ...laundromat,\n        lat: locationInfo.lat,\n        lng: locationInfo.lng\n      };\n    }\n    \n    // Generate a position in a circle around the city center\n    const angle = Math.random() * Math.PI * 2; // Random angle\n    const radius = 0.01 + Math.random() * 0.02; // 1-3km from center\n    const lat = cityCenter.lat + Math.cos(angle) * radius;\n    const lng = cityCenter.lng + Math.sin(angle) * radius;\n    \n    return {\n      ...laundromat,\n      lat,\n      lng\n    };\n  });\n};\n\nexport const getOrderLocations = async (appointments) => {\n  console.log(`MAP DEBUG - getOrderLocations - Starting with ${appointments.length} appointments`);\n  \n  // Check city distribution\n  const cityDistribution = appointments.reduce((acc, app) => {\n    const cityId = normalizeCityId(app);\n    acc[cityId] = (acc[cityId] || 0) + 1;\n    return acc;\n  }, {});\n  \n  console.log(\"MAP DEBUG - getOrderLocations - City distribution:\", cityDistribution);\n  \n  // Get a sample of appointments for display - increased to 500 to show more data\n  const sampleSize = Math.min(appointments.length, 500);  \n  const sampledAppointments = appointments.slice(0, sampleSize);\n  \n  // Extract unique city IDs\n  const cityIds = new Set();\n  sampledAppointments.forEach(app => {\n    const cityId = normalizeCityId(app);\n    if (cityId) cityIds.add(cityId);\n  });\n  \n  console.log(\"MAP DEBUG - getOrderLocations - Unique cities in sample:\", Array.from(cityIds));\n  \n  // Generate mock laundromat associations if needed\n  const laundromatsById = {};\n  const laundromatsByName = {};\n  \n  // Get laundromats for each city\n  Array.from(cityIds).forEach(cityId => {\n    if (CITY_LAUNDROMATS[cityId]) {\n      CITY_LAUNDROMATS[cityId].forEach(laundromat => {\n        laundromatsById[laundromat.id] = {\n          name: laundromat.name,\n          address: laundromat.address,\n          cityId: cityId,\n          color: LAUNDROMAT_COLORS[cityId] || '#000000'\n        };\n        laundromatsByName[laundromat.name] = {\n          id: laundromat.id,\n          address: laundromat.address,\n          cityId: cityId,\n          color: LAUNDROMAT_COLORS[cityId] || '#000000'\n        };\n      });\n    }\n  });\n  \n  const markers = sampledAppointments.map(appointment => {\n    const cityId = normalizeCityId(appointment);\n    const cityCenter = CITY_CENTERS[cityId] || CITY_CENTERS['LYGRRATQ7EGG2'];\n    \n    // Get or assign a laundromat for this order\n    let laundromatId = appointment.laundromat_id || appointment.laundromatId;\n    let laundromatName = null;\n    \n    if (!laundromatId && CITY_LAUNDROMATS[cityId]) {\n      // Assign a random laundromat from this city\n      const randomIndex = Math.floor(Math.random() * CITY_LAUNDROMATS[cityId].length);\n      laundromatId = CITY_LAUNDROMATS[cityId][randomIndex].id;\n      laundromatName = CITY_LAUNDROMATS[cityId][randomIndex].name;\n    } else if (laundromatId && laundromatsById[laundromatId]) {\n      laundromatName = laundromatsById[laundromatId].name;\n    }\n    \n    // Get laundromat color\n    const laundromatColor = \n      (laundromatsById[laundromatId]?.color) || \n      LAUNDROMAT_COLORS[cityId] || \n      '#000000';\n    \n    // Generate a random position based on the city center and laundromat location\n    let lat, lng;\n    \n    // Try to find the assigned laundromat location\n    const laundromatLocation = laundromatName ? LAUNDROMAT_LOCATIONS[laundromatName] : null;\n    \n    if (laundromatLocation) {\n      // Cluster around the laundromat location\n      const radius = 0.005 + Math.random() * 0.01; // 0.5-1.5km from laundromat (tighter clustering)\n      const angle = Math.random() * Math.PI * 2;\n      lat = laundromatLocation.lat + Math.cos(angle) * radius;\n      lng = laundromatLocation.lng + Math.sin(angle) * radius;\n    } else {\n      // Fallback to city-based distribution\n      const radius = 0.01 + Math.random() * 0.02; // 1-3km spread\n      const angle = Math.random() * Math.PI * 2;\n      lat = cityCenter.lat + Math.cos(angle) * radius;\n      lng = cityCenter.lng + Math.sin(angle) * radius;\n    }\n    \n    return {\n      lat,\n      lng,\n      laundromatColor,\n      cityId, // Add cityId to marker for debugging\n      orderDetails: {\n        customerType: appointment.customerType || appointment.customer_type || 'Unknown',\n        revenue: parseFloat(appointment.revenue || appointment.invoiceTotal || 0),\n        address: appointment.address || (appointment.pickup ? appointment.pickup.to : 'Unknown Address'),\n        laundromatId: laundromatId,\n        laundromatName: laundromatName,\n        city: CITY_MAPPING[cityId] || 'Unknown' // Add city name for debugging\n      }\n    };\n  });\n  \n  console.log(`MAP DEBUG - getOrderLocations - Generated ${markers.length} order markers`);\n  \n  return markers;\n}; ","/**\n * ProjectionImplementation.js\n * \n * This file contains a complete working implementation that you can directly \n * use in your dashboard to add realistic projections with minimal changes \n * to your existing codebase.\n */\n\n// Import formatDate utility if you don't already have it\nimport { format, addWeeks, parse, isValid } from 'date-fns';\n\n// City mapping and constants\nconst CITY_MAPPING = {\n  \"LYGRRATQ7EGG2\": \"London\",\n  \"L4NE8GPX89J3A\": \"Ottawa\",\n  \"LDK6Z980JTKXY\": \"Kitchener-Waterloo\",\n  \"LXMC6DWVJ5N7W\": \"Hamilton\",\n  \"LG0VGFKQ25XED\": \"Calgary\",\n  \"all\": \"All Cities\"\n};\n\n// City population data and growth factors - all increased to ensure positive growth\nconst CITY_DATA = {\n  \"LYGRRATQ7EGG2\": { // London\n    name: \"London\",\n    population: 400000,\n    yearlyGrowthFactor: 1.35, // Increased to 35% yearly growth for strong upward trend\n    operationalSince: new Date(\"2022-12-01\"),\n    marketMaturity: 0.15, // Reduced market maturity to allow stronger growth\n    minWeeklyOrders: 80 // Minimum weekly orders for projections\n  },\n  \"L4NE8GPX89J3A\": { // Ottawa\n    name: \"Ottawa\",\n    population: 1050000,\n    yearlyGrowthFactor: 1.28, // Increased to 28% yearly growth\n    operationalSince: new Date(\"2023-03-15\"),\n    marketMaturity: 0.35,\n    minWeeklyOrders: 35\n  },\n  \"LDK6Z980JTKXY\": { // Kitchener-Waterloo\n    name: \"Kitchener-Waterloo\",\n    population: 575000,\n    yearlyGrowthFactor: 1.32, // Increased to 32% yearly growth\n    operationalSince: new Date(\"2023-06-01\"),\n    marketMaturity: 0.30,\n    minWeeklyOrders: 40\n  }, \n  \"LXMC6DWVJ5N7W\": { // Hamilton\n    name: \"Hamilton\",\n    population: 570000,\n    yearlyGrowthFactor: 1.25, // Increased to 25% yearly growth\n    operationalSince: new Date(\"2023-09-10\"),\n    marketMaturity: 0.35,\n    minWeeklyOrders: 30\n  },\n  \"LG0VGFKQ25XED\": { // Calgary\n    name: \"Calgary\",\n    population: 1300000,\n    yearlyGrowthFactor: 1.40, // Increased to 40% yearly growth\n    operationalSince: new Date(\"2023-11-20\"),\n    marketMaturity: 0.20,\n    minWeeklyOrders: 25\n  }\n};\n\n// Weekly seasonality factors - more granular for weekly projections\nconst WEEKLY_SEASONALITY = {\n  0: 0.98,  // Week 1 of month\n  1: 1.00,  // Week 2 of month\n  2: 1.05,  // Week 3 of month\n  3: 1.08,  // Week 4 of month\n  4: 0.95,  // Week 5 of month (when applicable)\n};\n\n// Monthly seasonality factors \nconst MONTHLY_SEASONALITY = {\n  0: 0.95,  // January\n  1: 0.98,  // February\n  2: 1.02,  // March\n  3: 1.05,  // April\n  4: 1.08,  // May\n  5: 1.12,  // June\n  6: 1.10,  // July\n  7: 1.05,  // August\n  8: 1.10,  // September\n  9: 1.05,  // October\n  10: 1.00, // November\n  11: 0.98  // December\n};\n\n/**\n * Generate weekly projections for a given set of monthly orders data\n * \n * @param {Array} monthlyData - Array of monthly order data points in your existing format\n * @param {string} selectedCity - The currently selected city ID ('all' or a specific city ID)\n * @param {number} weeks - Number of weeks to project forward\n * @returns {Object} Combined historical and projected data with metrics\n */\nexport function generateProjections(monthlyData, selectedCity, weeks = 52) {\n  // Handle case where no data is available\n  if (!monthlyData || monthlyData.length === 0) {\n    return {\n      combined: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      }\n    };\n  }\n  \n  // Get historical data for the selected city - only use data until October\n  const historicalData = preprocessHistoricalData(monthlyData, selectedCity);\n  \n  // Filter out data after October 2024 for projection calculations\n  const cutoffDate = new Date(2024, 9, 31); // October 31, 2024\n  \n  const filteredHistoricalData = historicalData.filter(month => {\n    // Try to parse the date from month name (e.g., \"Oct 2024\")\n    let monthDate;\n    try {\n      const parts = month.name.split(' ');\n      const monthName = parts[0];\n      const year = parseInt(parts[1]);\n      \n      // Map month name to month number\n      const monthMap = {\n        'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n        'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n      };\n      \n      if (monthMap[monthName] !== undefined && !isNaN(year)) {\n        monthDate = new Date(year, monthMap[monthName], 1);\n      }\n    } catch (e) {\n      console.error(\"Error parsing date from month name:\", month.name, e);\n    }\n    \n    // Include the month if we couldn't parse the date or if it's before the cutoff\n    return !monthDate || monthDate <= cutoffDate;\n  });\n  \n  // Get the last data point as baseline\n  const lastHistoricalPoint = filteredHistoricalData.length > 0 \n    ? filteredHistoricalData[filteredHistoricalData.length - 1] \n    : historicalData[historicalData.length - 1];\n  \n  // If no valid data point exists, return empty result\n  if (!lastHistoricalPoint) {\n    return {\n      combined: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      }\n    };\n  }\n  \n  // Set up city-specific parameters\n  const cityParams = selectedCity !== 'all' ? CITY_DATA[selectedCity] : {\n    name: \"All Cities\",\n    yearlyGrowthFactor: 1.28, // Increased default growth factor\n    marketMaturity: 0.25, // Reduced market maturity\n    minWeeklyOrders: 85\n  };\n  \n  // Extract base information from last historical point\n  let baseMonthlyOrders = lastHistoricalPoint.orders;\n  \n  // Convert monthly orders to approximate weekly orders\n  let baseWeeklyOrders = baseMonthlyOrders / 4.3;\n  \n  // Ensure base weekly orders meet the minimum for city\n  baseWeeklyOrders = Math.max(baseWeeklyOrders, cityParams.minWeeklyOrders || 20);\n  \n  // Calculate a more appropriate baseline - use average of data until Oct\n  let baselineForGrowth;\n  if (filteredHistoricalData.length >= 3) {\n    // Calculate average excluding any extreme outliers\n    const values = filteredHistoricalData.map(m => m.orders);\n    const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n    \n    // For weekly conversion\n    baselineForGrowth = avg / 4.3;\n    \n    // Ensure it meets minimum\n    baselineForGrowth = Math.max(baselineForGrowth, cityParams.minWeeklyOrders || 20);\n  } else {\n    baselineForGrowth = baseWeeklyOrders;\n  }\n  \n  // Parse the month and year from the last data point\n  const monthNameMap = {\n    'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n    'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n  };\n  \n  // Parse month and year\n  const [monthName, yearStr] = lastHistoricalPoint.name.split(' ');\n  const startMonth = monthNameMap[monthName];\n  const startYear = parseInt(yearStr);\n  \n  let startDate = new Date(startYear, startMonth, 15); // Middle of the month\n  \n  // Set current date as today unless using filtered data\n  const currentDate = new Date();\n  \n  // Calculate weekly growth factor\n  const yearlyGrowthFactor = cityParams.yearlyGrowthFactor || 1.28;\n  const weeklyGrowthFactor = Math.pow(yearlyGrowthFactor, 1/52);\n  \n  // Adjust for market maturity - with reduced impact\n  const maturityFactor = 1 - (cityParams.marketMaturity || 0.25) * 0.15; \n  const adjustedWeeklyGrowth = weeklyGrowthFactor * maturityFactor;\n  \n  // Generate projected data\n  const projectedData = [];\n  let currentOrders = baseWeeklyOrders;\n  \n  // For projections, start from today's date and project forward\n  let projectionStartDate = new Date();\n  \n  for (let i = 0; i < weeks; i++) {\n    // Calculate date for this week\n    const weekDate = addWeeks(projectionStartDate, i);\n    const weekOfMonth = Math.floor(weekDate.getDate() / 7);\n    const month = weekDate.getMonth();\n    \n    // Apply growth factor (compounding weekly)\n    currentOrders *= adjustedWeeklyGrowth;\n    \n    // Apply weekly and monthly seasonality\n    const weeklyFactor = WEEKLY_SEASONALITY[weekOfMonth] || 1;\n    const monthlyFactor = MONTHLY_SEASONALITY[month] || 1;\n    currentOrders *= weeklyFactor * monthlyFactor;\n    \n    // Apply small random variation\n    const variation = 1 + (Math.random() * 0.03 - 0.015); // Small random factor\n    currentOrders *= variation;\n    \n    // Ensure orders never fall below minimum\n    currentOrders = Math.max(currentOrders, cityParams.minWeeklyOrders || 20);\n    \n    // Format date and add to projections\n    const formattedDate = format(weekDate, 'MMM d, yyyy');\n    const shortDate = format(weekDate, 'MMM d');\n    projectedData.push({\n      name: shortDate,\n      fullname: formattedDate,\n      orders: Math.round(currentOrders),\n      projected: true,\n      month: format(weekDate, 'yyyy-MM'),\n      week: format(weekDate, 'yyyy-MM-dd')\n    });\n  }\n  \n  // Generate weekly historical data points\n  const weeklyHistoricalData = generateWeeklyHistoricalPoints(historicalData);\n  \n  // Calculate metrics\n  const totalOrders = projectedData.reduce((sum, week) => sum + week.orders, 0);\n  const totalOrdersMonthly = totalOrders / 4.3; // Convert weekly to monthly equivalent\n  const avgWeeklyOrders = totalOrders / projectedData.length;\n  \n  // Calculate growth percentage using our adjusted baseline\n  const growthPercent = ((avgWeeklyOrders / baselineForGrowth) - 1) * 100;\n  \n  // Combine historical and projected data\n  const combined = [\n    ...weeklyHistoricalData.map(week => ({\n      ...week,\n      projected: false\n    })),\n    ...projectedData\n  ];\n  \n  return {\n    combined,\n    weeklyHistoricalData,\n    projectedData,\n    metrics: {\n      totalAnnualOrders: Math.round(totalOrdersMonthly * 12),\n      averageMonthlyOrders: Math.round(avgWeeklyOrders * 4.3),\n      averageWeeklyOrders: Math.round(avgWeeklyOrders),\n      projectedGrowthPercent: growthPercent,\n      cityName: CITY_MAPPING[selectedCity] || 'Unknown'\n    }\n  };\n}\n\n/**\n * Generate weekly data points from monthly data\n */\nfunction generateWeeklyHistoricalPoints(monthlyData) {\n  if (!monthlyData || monthlyData.length < 2) return monthlyData;\n  \n  const weeklyData = [];\n  \n  // For each month, generate 4-5 weekly points\n  for (let i = 0; i < monthlyData.length; i++) {\n    const month = monthlyData[i];\n    \n    // Parse month and year\n    const parts = month.name.split(' ');\n    const monthName = parts[0];\n    const year = parseInt(parts[1]);\n    \n    // Map month name to month number\n    const monthMap = {\n      'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n      'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n    };\n    \n    if (monthMap[monthName] === undefined || isNaN(year)) {\n      // If we can't parse the date, just add the month as is\n      weeklyData.push(month);\n      continue;\n    }\n    \n    const monthNumber = monthMap[monthName];\n    const baseDate = new Date(year, monthNumber, 1);\n    \n    // Number of weeks in this month (usually 4, sometimes 5)\n    const daysInMonth = new Date(year, monthNumber + 1, 0).getDate();\n    const weeksInMonth = Math.ceil(daysInMonth / 7);\n    \n    // Get next month's data for interpolation if available\n    const nextMonth = monthlyData[i + 1];\n    let nextMonthOrders = month.orders;\n    if (nextMonth) {\n      nextMonthOrders = nextMonth.orders;\n    }\n    \n    // Calculate weekly distribution based on general patterns\n    // This creates a natural-looking curve between months\n    for (let week = 0; week < weeksInMonth; week++) {\n      // Calculate week's date\n      const weekDay = Math.min(week * 7 + 1, daysInMonth);\n      const weekDate = new Date(year, monthNumber, weekDay);\n      \n      // Calculate position within month (0-1)\n      const position = week / weeksInMonth;\n      \n      // Interpolate between current and next month\n      let weekOrders;\n      if (i < monthlyData.length - 1) {\n        // Linear interpolation between months\n        weekOrders = month.orders * (1 - position) + nextMonthOrders * position;\n      } else {\n        // For the last month, create a gentle trend\n        const factor = 1 + (position - 0.5) * 0.1; // -5% to +5% variation\n        weekOrders = month.orders * factor;\n      }\n      \n      // Apply weekly pattern\n      const weekFactor = WEEKLY_SEASONALITY[week] || 1;\n      weekOrders *= weekFactor;\n      \n      // Add small random variation\n      const randomFactor = 1 + (Math.random() * 0.04 - 0.02); // ±2% random variation\n      weekOrders *= randomFactor;\n      \n      // Format date\n      const shortDate = format(weekDate, 'MMM d');\n      const formattedDate = format(weekDate, 'MMM d, yyyy');\n      \n      weeklyData.push({\n        name: shortDate,\n        fullname: formattedDate,\n        orders: Math.round(weekOrders / weeksInMonth),  // Distribute monthly orders\n        month: format(weekDate, 'yyyy-MM'),\n        week: format(weekDate, 'yyyy-MM-dd'),\n        projected: false\n      });\n    }\n  }\n  \n  return weeklyData;\n}\n\n/**\n * Preprocess historical data to extract the relevant city data\n * \n * @param {Array} monthlyData - Raw monthly data in your existing format\n * @param {string} selectedCity - Selected city ID\n * @returns {Array} Processed historical data for the selected city\n */\nfunction preprocessHistoricalData(monthlyData, selectedCity) {\n  if (!monthlyData || monthlyData.length === 0) return [];\n  \n  // Get city name from mapping\n  const cityName = CITY_MAPPING[selectedCity] || selectedCity;\n  \n  // Extract data for this city\n  return monthlyData\n    .filter(month => {\n      // For 'all' city, use total; otherwise use city-specific data\n      if (selectedCity === 'all') {\n        return month.total !== undefined || \n               Object.values(CITY_MAPPING)\n                 .filter(name => name !== 'All Cities')\n                 .some(name => month[name] !== undefined);\n      } else {\n        return month[cityName] !== undefined;\n      }\n    })\n    .map(month => {\n      // For 'all' city, use total or calculate it\n      let orders;\n      if (selectedCity === 'all') {\n        if (month.total !== undefined) {\n          orders = month.total;\n        } else {\n          // Calculate total from all cities\n          orders = Object.values(CITY_MAPPING)\n            .filter(name => name !== 'All Cities')\n            .reduce((sum, name) => sum + (month[name] || 0), 0);\n        }\n      } else {\n        orders = month[cityName] || 0;\n      }\n      \n      return {\n        name: month.name,\n        orders: orders,\n        month: month.month || null,\n        // Preserve any other properties you need\n        date: month.date || null\n      };\n    })\n    .filter(month => month.orders > 0); // Filter out months with no orders\n}\n\n/**\n * Function to add projections to your existing Dashboard component\n * \n * @param {Array} monthlyOrdersTrend - Your monthly order data\n * @param {string} selectedCity - Currently selected city\n * @returns {Object} Projection data that can be used in your UI\n */\nexport function addProjectionsToComponent(monthlyOrdersTrend, selectedCity) {\n  try {\n    // Generate projections - these will now be weekly\n    const projectionData = generateProjections(monthlyOrdersTrend, selectedCity);\n    \n    return {\n      // Combined historical + projected data for charts\n      combinedOrderTrend: projectionData.combined,\n      \n      // Historical weekly data\n      weeklyHistoricalData: projectionData.weeklyHistoricalData,\n      \n      // Just the projected portion\n      projectedData: projectionData.projectedData,\n      \n      // Metrics for display in cards\n      metrics: projectionData.metrics,\n      \n      // Reference line position (typically today's date)\n      referenceDate: format(new Date(), 'MMM d')\n    };\n  } catch (error) {\n    console.error(\"Error generating projections:\", error);\n    return {\n      combinedOrderTrend: [],\n      weeklyHistoricalData: [],\n      projectedData: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      },\n      referenceDate: format(new Date(), 'MMM d')\n    };\n  }\n} ","import React, { useState, useEffect, useMemo } from 'react';\nimport { \n  Box, Container, Grid, Paper, Typography, \n  AppBar, Toolbar, MenuItem,\n  FormControl, InputLabel, Select,\n  CircularProgress, TextField,\n  Table, TableHead, TableRow, TableCell, TableBody, TableContainer\n} from '@mui/material';\nimport {\n  BarChart, LineChart, PieChart, ComposedChart,\n  Bar, Line, Pie, Area, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, Cell, ResponsiveContainer, ReferenceLine\n} from 'recharts';\nimport { subMonths, format, addMonths } from 'date-fns';\nimport GoogleMapReact from 'google-map-react';\n// Import Lucide React icons for modern UI\nimport Icon from '@mui/material/Icon';\n// Import animation components\nimport { Fade, Grow } from '@mui/material';\nimport { formatDistance, isWithinInterval, startOfDay, endOfDay, isAfter, isBefore } from 'date-fns';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport QuarterlyGrowthByCity from './QuarterlyGrowthByCity';\n\n// Import data utilities\nimport {\n  processAppointmentsData,\n  getCityStatistics,\n  getLaundromatStatistics,\n  getCustomerTypeDistribution,\n  getMonthlyOrdersTrend,\n  getAvgOrderValueTrend,\n  getCustomerRetentionMetrics,\n  getDriverPerformanceMetrics,\n  getSeasonalTrends,\n  getWeightDistribution,\n  LONDON_CITY_ID,\n  getLaundromatLocations,\n  getOrderLocations,\n  CITY_MAPPING,\n  CITY_CENTERS,\n  CITY_LAUNDROMATS,\n  normalizeCityId,\n  LAUNDROMAT_COLORS\n} from '../utils/dataProcessor';\nimport { addProjectionsToComponent } from '../utils/ProjectionImplementation';\n\n// Import custom components\nimport MetricCard from './MetricCard';\nimport Marker from './Marker';\n\n// Chart colors - updated with modern palette\nconst COLORS = ['#1E88E5', '#26A69A', '#FFA726', '#EF5350', '#AB47BC', '#66BB6A', '#EC407A'];\n\nconst Dashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [appointments, setAppointments] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(LONDON_CITY_ID);\n  const [startDate, setStartDate] = useState(subMonths(new Date(), 12));\n  const [endDate, setEndDate] = useState(new Date());\n  const [mapMarkers, setMapMarkers] = useState([]);\n  const [laundromatLocations, setLaundromatLocations] = useState([]);\n\n  // Filter options\n  const [customerTypeFilter, setCustomerTypeFilter] = useState('all');\n  const [laundromatFilter, setLaundromatFilter] = useState('all');\n\n  // Update the map center when city changes\n  const [mapCenter, setMapCenter] = useState(null);\n  const [mapZoom, setMapZoom] = useState(11);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapsApi, setMapsApi] = useState(null);\n\n  // Map laundromat IDs to names based on address comparison\n  const laundromatIdToNameMap = useMemo(() => {\n    const idMap = {};\n    \n    // First create a mapping of locations from our predefined data\n    const knownLocations = {};\n    Object.keys(CITY_LAUNDROMATS).forEach(cityId => {\n      CITY_LAUNDROMATS[cityId].forEach(laundromat => {\n        knownLocations[laundromat.address] = laundromat.name;\n      });\n    });\n    \n    // Analyze appointment data to match cleaners to locations\n    const laundromatAddresses = {};\n    appointments.forEach(appointment => {\n      if (appointment.cleaning && appointment.cleaning.cleaner && appointment.pickup && appointment.pickup.to) {\n        const cleanerId = appointment.cleaning.cleaner;\n        const address = appointment.pickup.to;\n        \n        if (!laundromatAddresses[cleanerId]) {\n          laundromatAddresses[cleanerId] = {};\n        }\n        \n        // Count frequency of addresses for this cleaner\n        laundromatAddresses[cleanerId][address] = (laundromatAddresses[cleanerId][address] || 0) + 1;\n      }\n    });\n    \n    // For each laundromat ID, find most common address and match to our known locations\n    Object.keys(laundromatAddresses).forEach(cleanerId => {\n      const addresses = laundromatAddresses[cleanerId];\n      let mostCommonAddress = null;\n      let maxCount = 0;\n      \n      // Find most common address\n      Object.keys(addresses).forEach(address => {\n        if (addresses[address] > maxCount) {\n          mostCommonAddress = address;\n          maxCount = addresses[address];\n        }\n      });\n      \n      // Direct mapping if exact match\n      if (mostCommonAddress && knownLocations[mostCommonAddress]) {\n        idMap[cleanerId] = knownLocations[mostCommonAddress];\n        return;\n      }\n      \n      // Fuzzy matching for addresses\n      let bestMatch = null;\n      let bestScore = 0;\n      \n      // For each known location, calculate similarity with most common address\n      Object.keys(knownLocations).forEach(knownAddress => {\n        // Simple similarity score based on common words in address\n        const knownWords = knownAddress.toLowerCase().split(/[,\\s]+/);\n        const actualWords = mostCommonAddress ? mostCommonAddress.toLowerCase().split(/[,\\s]+/) : [];\n        \n        let matches = 0;\n        actualWords.forEach(word => {\n          if (word.length > 2 && knownWords.includes(word)) {\n            matches++;\n          }\n        });\n        \n        const score = matches / Math.max(knownWords.length, actualWords.length);\n        if (score > bestScore) {\n          bestScore = score;\n          bestMatch = knownLocations[knownAddress];\n        }\n      });\n      \n      // If good match found, use it\n      if (bestMatch && bestScore > 0.3) {\n        idMap[cleanerId] = bestMatch;\n      } else {\n        // Fallback based on common frequencies between cities and cleaners\n        const cityFrequency = {};\n        appointments.forEach(appointment => {\n          if (appointment.cleaning && appointment.cleaning.cleaner === cleanerId && appointment.cityId) {\n            cityFrequency[appointment.cityId] = (cityFrequency[appointment.cityId] || 0) + 1;\n          }\n        });\n        \n        // Find most common city for this cleaner\n        let mostCommonCity = null;\n        let maxCityCount = 0;\n        Object.keys(cityFrequency).forEach(cityId => {\n          if (cityFrequency[cityId] > maxCityCount) {\n            maxCityCount = cityFrequency[cityId];\n            mostCommonCity = cityId;\n          }\n        });\n        \n        // Assign a name based on city and ID\n        if (mostCommonCity && CITY_LAUNDROMATS[mostCommonCity] && CITY_LAUNDROMATS[mostCommonCity].length > 0) {\n          const cityName = CITY_MAPPING[mostCommonCity];\n          const cleanerIndex = Object.keys(laundromatAddresses).indexOf(cleanerId) % CITY_LAUNDROMATS[mostCommonCity].length;\n          idMap[cleanerId] = CITY_LAUNDROMATS[mostCommonCity][cleanerIndex].name;\n        } else {\n          // Last resort - truncate ID for display\n          idMap[cleanerId] = `Laundromat ${cleanerId.substring(0, 8)}`;\n        }\n      }\n    });\n    \n    // Manual override for most common IDs based on the list shown\n    idMap[\"q8dvkNhc9ZbCswGUbllUdoqOr6J3\"] = \"Tommy Suds\";\n    idMap[\"Z1qpZ7LByNWjT4QmjxZdCgEQogH3\"] = \"London Sudz\";\n    idMap[\"yXwnUIE3EPX1sSfpot3rw5MbbVs1\"] = \"Royal City Cleaners\";\n    idMap[\"hchYpbQECAQk2e2eyruUTxU8YP42\"] = \"Browns\";\n    \n    return idMap;\n  }, [appointments]);\n\n  // Process JSON data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Attempting to fetch data...');\n        const response = await fetch('/appointments.json');\n        console.log('Response status:', response.status);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Data loaded successfully, total records:', data.length);\n        \n        // Log a sample record without trying to process dates yet\n        if (data.length > 0) {\n          const sample = data[0];\n          console.log('Sample record:', sample);\n          console.log('Date fields found:', {\n            serviceDate: sample.pickup?.serviceDate,\n            service_date: sample.service_date,\n            createdAt: sample.createdAt,\n            updatedAt: sample.updatedAt\n          });\n        }\n        \n        // Safely determine date range\n        try {\n          const validDates = data\n            .map(d => {\n              try {\n                // Check all possible date fields\n                const dateStr = \n                  d.pickup?.serviceDate || \n                  d.service_date ||\n                  d.createdAt ||\n                  d.updatedAt;\n                \n                if (!dateStr) return null;\n                const date = new Date(dateStr);\n                return isNaN(date.getTime()) ? null : date;\n              } catch (e) {\n                return null;\n              }\n            })\n            .filter(date => date !== null);\n          \n          if (validDates.length > 0) {\n            const earliest = new Date(Math.min(...validDates.map(d => d.getTime())));\n            const latest = new Date(Math.max(...validDates.map(d => d.getTime())));\n            console.log('Date range:', {\n              earliest: earliest.toISOString(),\n              latest: latest.toISOString()\n            });\n            \n            // Set date range based on the actual data\n            if (earliest < startDate) {\n              setStartDate(earliest);\n            }\n            if (latest < endDate) {\n              setEndDate(latest);\n            }\n          } else {\n            console.log('No valid dates found in the data');\n          }\n        } catch (dateError) {\n          console.error('Error calculating date range:', dateError);\n        }\n        \n        setAppointments(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        console.log('Trying fallback data...');\n        // Create some sample fallback data for testing\n        const fallbackData = Array.from({length: 50}, (_, i) => ({\n          id: `sample-${i}`,\n          city_id: 'LYGRRATQ7EGG2',\n          customer_type: i % 2 === 0 ? 'Residential' : 'Commercial',\n          laundromat_id: 'LYGRRATQ7EGG' + Math.floor(i / 10),\n          laundromat_name: `Laundromat ${Math.floor(i / 10)}`,\n          revenue: 20 + Math.random() * 80,\n          address: `${100 + i} Richmond St, London, Ontario`,\n          pickup: {\n            serviceDate: new Date(2023, 9, i % 30 + 1).toISOString()\n          }\n        }));\n        console.log('Using fallback data:', fallbackData.length, 'records');\n        setAppointments(fallbackData);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Update map center when city changes\n  useEffect(() => {\n    console.log(\"City changed to:\", selectedCity, \"Setting map center:\", CITY_CENTERS[selectedCity]);\n    if (selectedCity === 'all') {\n      // Default to London for 'all cities' view but at a lower zoom\n      setMapCenter(CITY_CENTERS.LYGRRATQ7EGG2);\n      setMapZoom(8);\n    } else {\n      setMapCenter(CITY_CENTERS[selectedCity]);\n      setMapZoom(11);\n    }\n  }, [selectedCity]);\n\n  // Reset the map center if user changes city\n  useEffect(() => {\n    if (mapInstance && mapCenter) {\n      console.log(\"Panning map to:\", mapCenter, \"with zoom:\", mapZoom);\n      mapInstance.panTo(mapCenter);\n      mapInstance.setZoom(mapZoom);\n    }\n  }, [mapCenter, mapZoom, mapInstance]);\n\n  // Enhanced map data loading with better debugging\n  useEffect(() => {\n    const loadMapData = async () => {\n      if (!appointments.length) return;\n\n      // Enhanced debug logging for orders\n      console.log('MAP DEBUG - Total orders:', appointments.length);\n      const cityOrderCounts = appointments.reduce((acc, app) => {\n        const cityId = normalizeCityId(app);\n        acc[cityId] = (acc[cityId] || 0) + 1;\n        return acc;\n      }, {});\n      console.log('MAP DEBUG - Orders by city:', cityOrderCounts);\n      console.log('MAP DEBUG - Currently selected city:', selectedCity);\n      \n      // Debug: Check a sample appointment to verify cityId field\n      if (appointments.length > 0) {\n        const sample = appointments[0];\n        console.log('MAP DEBUG - Sample appointment:', {\n          id: sample.id || sample.appointmentId,\n          cityId: sample.cityId,\n          city_id: sample.city_id,\n          city: sample.city,\n          normalizedCityId: normalizeCityId(sample)\n        });\n      }\n\n      // Filter by cityId with extra logging\n      const filteredAppointments = selectedCity === 'all'\n        ? appointments\n        : appointments.filter(app => {\n            const normalizedCityId = normalizeCityId(app);\n            const matches = normalizedCityId === selectedCity;\n            // Log a sample of matches/non-matches\n            if (appointments.indexOf(app) < 5) {\n              console.log(`MAP DEBUG - App ${app.id || app.appointmentId}: cityId=${app.cityId}, normalizedCityId=${normalizedCityId}, matches=${matches}`);\n            }\n            return matches;\n          });\n      \n      console.log(`MAP DEBUG - After filtering, ${filteredAppointments.length} appointments match the selected city`);\n\n      // Get laundromat locations - filter by city if not 'all'\n      const laundromats = await getLaundromatLocations(filteredAppointments);\n      console.log('MAP DEBUG - Laundromat locations:', laundromats);\n      setLaundromatLocations(laundromats);\n\n      // Get order locations with laundromat association - filter by city if not 'all'\n      const orders = await getOrderLocations(filteredAppointments);\n      console.log('MAP DEBUG - Order locations:', orders);\n      setMapMarkers(orders);\n    };\n\n    loadMapData();\n  }, [appointments, selectedCity]);\n\n  // Generate a list of months for the selector\n  const monthOptions = useMemo(() => {\n    const options = [];\n    const currentDate = new Date();\n    // Exclude current month (March 2024 as per user request)\n    const endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n    \n    // Go back 24 months\n    for (let i = 0; i < 24; i++) {\n      const date = new Date(endDate.getFullYear(), endDate.getMonth() - i, 1);\n      options.push({\n        value: { month: date.getMonth(), year: date.getFullYear() },\n        label: date.toLocaleString('default', { month: 'long', year: 'numeric' })\n      });\n    }\n    return options;\n  }, []);\n\n  // Filtered appointments based on selections\n  const filteredAppointments = useMemo(() => {\n    console.log(\"Filtering appointments with:\", {\n      totalAppointments: appointments.length,\n      selectedCity,\n      startDate: startDate.toISOString(),\n      endDate: endDate.toISOString(),\n      customerTypeFilter,\n      sampleAppointment: appointments[0]\n    });\n    \n    const filtered = appointments.filter(appointment => {\n      // Debug a sample appointment to see its structure\n      if (appointment.id === appointments[0]?.id) {\n        console.log(\"Sample appointment structure:\", appointment);\n      }\n      \n      // Filter by city (using cityId instead of city_id)\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) {\n        return false;\n      }\n      \n      // Filter by customer type\n      if (customerTypeFilter !== 'all' && appointment.customerType !== customerTypeFilter) {\n        return false;\n      }\n      \n      // Filter by laundromat\n      if (laundromatFilter !== 'all' && \n          (!appointment.cleaning || appointment.cleaning.cleaner !== laundromatFilter)) {\n        return false;\n      }\n      \n      // Try all possible date fields\n      let inDateRange = false;\n      let dateChecked = false;\n\n      // Check pickup.serviceDate\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        dateChecked = true;\n        try {\n          const pickupDate = new Date(appointment.pickup.serviceDate);\n          \n          // Log some sample dates to debug\n          if (appointment.id === appointments[0]?.id || appointment.appointmentId === appointments[0]?.appointmentId) {\n            console.log(\"Parsed pickup date:\", pickupDate);\n            console.log(\"Start date:\", startDate);\n            console.log(\"End date:\", endDate);\n            console.log(\"Is in range:\", !(pickupDate < startDate || pickupDate > endDate));\n          }\n          \n          if (!(pickupDate < startDate || pickupDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing date:\", appointment.pickup.serviceDate, error);\n        }\n      }\n      \n      // Check service_date if we haven't found a valid date yet\n      if (!inDateRange && appointment.service_date) {\n        dateChecked = true;\n        try {\n          const serviceDate = new Date(appointment.service_date);\n          if (!(serviceDate < startDate || serviceDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing service_date:\", appointment.service_date, error);\n        }\n      }\n      \n      // Check createdAt as fallback\n      if (!inDateRange && appointment.createdAt) {\n        dateChecked = true;\n        try {\n          const createdDate = new Date(appointment.createdAt);\n          if (!(createdDate < startDate || createdDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing createdAt:\", appointment.createdAt, error);\n        }\n      }\n      \n      // If we checked dates but none were in range, filter out this appointment\n      if (dateChecked && !inDateRange) {\n        return false;\n      }\n      \n      return true;\n    });\n    \n    console.log(\"Filtered appointments:\", filtered.length);\n    return filtered;\n  }, [appointments, selectedCity, customerTypeFilter, laundromatFilter, startDate, endDate]);\n\n  // Compute metrics based on filtered data\n  const cityStats = useMemo(() => getCityStatistics(filteredAppointments), [filteredAppointments]);\n  const laundromatStats = useMemo(() => {\n    // Get basic laundromat statistics\n    const stats = getLaundromatStatistics(filteredAppointments);\n    \n    // Calculate a simpler retention metric - returning customers as percentage of total customers\n    return stats.map(laundromat => {\n      // Simple retention rate - percentage of customers that return\n      const simpleRetentionRate = laundromat.customers > 0 \n        ? (laundromat.returningCustomers / laundromat.customers)\n        : 0;\n        \n      return {\n        ...laundromat,\n        retentionRate: simpleRetentionRate\n      };\n    });\n  }, [filteredAppointments]);\n  \n  const customerTypeDistribution = useMemo(() => getCustomerTypeDistribution(filteredAppointments), [filteredAppointments]);\n  const monthlyOrdersTrend = useMemo(() => {\n    // If 'all' is selected, show data for all cities, otherwise filter by selected city\n    const filteredAppointments = selectedCity === 'all' \n      ? appointments \n      : appointments.filter(a => a.cityId === selectedCity);\n      \n    const trends = getMonthlyOrdersTrend(filteredAppointments, 12);\n    \n    // Filter out March data (or current month)\n    const currentDate = new Date();\n    return trends.filter(month => {\n      const monthDate = new Date(month.date);\n      return !(monthDate.getMonth() === currentDate.getMonth() && \n               monthDate.getFullYear() === currentDate.getFullYear());\n    });\n  }, [appointments, selectedCity]);\n  \n  const avgOrderValueTrend = useMemo(() => {\n    // If 'all' is selected, show data for all cities, otherwise filter by selected city\n    const filteredAppointments = selectedCity === 'all' \n      ? appointments \n      : appointments.filter(a => a.cityId === selectedCity);\n      \n    const trends = getAvgOrderValueTrend(filteredAppointments, 12);\n    \n    // Filter out March data (or current month)\n    const currentDate = new Date();\n    return trends.filter(month => {\n      const monthDate = new Date(month.date);\n      return !(monthDate.getMonth() === currentDate.getMonth() && \n               monthDate.getFullYear() === currentDate.getFullYear());\n    });\n  }, [appointments, selectedCity]);\n  \n  const customerRetention = useMemo(() => getCustomerRetentionMetrics(filteredAppointments), [filteredAppointments]);\n  const driverPerformance = useMemo(() => getDriverPerformanceMetrics(filteredAppointments), [filteredAppointments]);\n  const seasonalTrends = useMemo(() => getSeasonalTrends(filteredAppointments), [filteredAppointments]);\n  const weightDistribution = useMemo(() => getWeightDistribution(filteredAppointments), [filteredAppointments]);\n\n  // London-specific orders data for Google Maps\n  const londonOrders = useMemo(() => {\n    return appointments.filter(app => app.cityId === LONDON_CITY_ID).map(app => {\n      // Extract address information for Google Maps\n      let address = '';\n      if (app.pickup && app.pickup.to) {\n        address = app.pickup.to;\n      }\n      return {\n        id: app.appointmentId,\n        address,\n        customerType: app.customerType || 'Unknown',\n        revenue: parseFloat(app.invoiceTotal || 0)\n      };\n    });\n  }, [appointments]);\n\n  // Get aggregate metrics\n  const aggregateMetrics = useMemo(() => {\n    return {\n      totalOrders: filteredAppointments.length,\n      totalRevenue: filteredAppointments.reduce((sum, appointment) => {\n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        return sum + (isNaN(revenue) ? 0 : revenue);\n      }, 0),\n      totalCustomers: new Set(filteredAppointments.map(a => a.customerId).filter(Boolean)).size,\n      totalLaundromats: new Set(filteredAppointments\n        .filter(a => a.cleaning && a.cleaning.cleaner)\n        .map(a => a.cleaning.cleaner)).size,\n      avgOrderValue: filteredAppointments.length > 0 ? \n        (filteredAppointments.reduce((sum, appointment) => {\n          const revenue = parseFloat(appointment.invoiceTotal || 0);\n          return sum + (isNaN(revenue) ? 0 : revenue);\n        }, 0) / filteredAppointments.length) : 0,\n      avgWeight: filteredAppointments\n        .filter(a => a.cleaning && a.cleaning.orderDetails && a.cleaning.orderDetails.washFoldWeight)\n        .reduce((sum, a, idx, arr) => {\n          const weight = parseFloat(a.cleaning.orderDetails.washFoldWeight);\n          return idx === arr.length - 1 ? \n            (sum + weight) / arr.length : \n            sum + weight;\n        }, 0)\n    };\n  }, [filteredAppointments]);\n\n  // Calculate monthly retention rate trend\n  const retentionRateTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyAppointments = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        const monthKey = format(date, 'yyyy-MM');\n        const monthName = format(date, 'MMM yyyy');\n        \n        if (!monthlyAppointments[monthKey]) {\n          monthlyAppointments[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: date,\n            appointments: [],\n            customers: new Set(),\n            returningCustomers: new Set()\n          };\n        }\n        \n        monthlyAppointments[monthKey].appointments.push(appointment);\n        \n        // Add customer to this month's unique customers\n        if (appointment.customerId) {\n          monthlyAppointments[monthKey].customers.add(appointment.customerId);\n          \n          // Check if this customer has appeared in previous months\n          const isReturning = Object.keys(monthlyAppointments)\n            .filter(m => m !== monthKey && new Date(monthlyAppointments[m].date) < date)\n            .some(m => monthlyAppointments[m].customers.has(appointment.customerId));\n          \n          if (isReturning) {\n            monthlyAppointments[monthKey].returningCustomers.add(appointment.customerId);\n          }\n        }\n      }\n    });\n    \n    // Calculate retention rate for each month\n    return Object.values(monthlyAppointments)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        customers: month.customers.size,\n        returningCustomers: month.returningCustomers.size,\n        retentionRate: month.customers.size > 0 ? \n          month.returningCustomers.size / month.customers.size : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few customers to avoid misleading rates\n      .filter(month => month.customers >= 3);\n  }, [appointments, selectedCity]);\n\n  // Calculate weekly order frequency\n  const orderFrequencyTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by week\n    const weeklyAppointments = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        // Get week number - FIX: Use 'yyyy-ww' instead of the problematic format\n        const weekKey = format(date, 'yyyy-ww');\n        const weekName = format(date, 'MMM d, yyyy');\n        \n        if (!weeklyAppointments[weekKey]) {\n          weeklyAppointments[weekKey] = {\n            key: weekKey,\n            name: `Week of ${weekName}`,\n            shortName: format(date, 'MMM d'),\n            date: date,\n            customerCount: new Set(),\n            orderCount: 0\n          };\n        }\n        \n        weeklyAppointments[weekKey].orderCount++;\n        \n        // Count unique customers\n        if (appointment.customerId) {\n          weeklyAppointments[weekKey].customerCount.add(appointment.customerId);\n        }\n      }\n    });\n    \n    // Calculate orders per customer for each week\n    return Object.values(weeklyAppointments)\n      .map(week => ({\n        name: week.shortName,\n        fullName: week.name,\n        date: week.date,\n        week: week.key,\n        customers: week.customerCount.size,\n        orders: week.orderCount,\n        ordersPerCustomer: week.customerCount.size > 0 ? \n          week.orderCount / week.customerCount.size : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out weeks with very few customers to avoid misleading rates\n      .filter(week => week.customers >= 2);\n  }, [appointments, selectedCity]);\n\n  // Calculate order processing time trend\n  const processingTimeTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyProcessingTimes = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      // Calculate processing time if we have both pickup and delivery dates\n      let pickupDate = null, deliveryDate = null;\n      \n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        pickupDate = new Date(appointment.pickup.serviceDate);\n      }\n      \n      if (appointment.delivery && appointment.delivery.serviceDate) {\n        deliveryDate = new Date(appointment.delivery.serviceDate);\n      }\n      \n      // If we have valid dates and delivery is after pickup\n      if (pickupDate && deliveryDate && \n          !isNaN(pickupDate.getTime()) && \n          !isNaN(deliveryDate.getTime()) && \n          deliveryDate > pickupDate) {\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        const monthName = format(pickupDate, 'MMM yyyy');\n        \n        if (!monthlyProcessingTimes[monthKey]) {\n          monthlyProcessingTimes[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: pickupDate,\n            totalHours: 0,\n            count: 0\n          };\n        }\n        \n        // Calculate hours between pickup and delivery\n        const hours = (deliveryDate - pickupDate) / (1000 * 60 * 60);\n        monthlyProcessingTimes[monthKey].totalHours += hours;\n        monthlyProcessingTimes[monthKey].count++;\n      }\n    });\n    \n    // Calculate average processing time for each month\n    return Object.values(monthlyProcessingTimes)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        avgProcessingHours: month.count > 0 ? \n          month.totalHours / month.count : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few data points\n      .filter(month => month.avgProcessingHours > 0);\n  }, [appointments, selectedCity]);\n\n  // Calculate commercial vs residential split trend\n  const customerTypeTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyTypeSplit = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        const monthKey = format(date, 'yyyy-MM');\n        const monthName = format(date, 'MMM yyyy');\n        \n        if (!monthlyTypeSplit[monthKey]) {\n          monthlyTypeSplit[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: date,\n            residential: 0,\n            commercial: 0,\n            unknown: 0,\n            total: 0\n          };\n        }\n        \n        monthlyTypeSplit[monthKey].total++;\n        \n        if (appointment.customerType === 'Residential') {\n          monthlyTypeSplit[monthKey].residential++;\n        } else if (appointment.customerType === 'Commercial') {\n          monthlyTypeSplit[monthKey].commercial++;\n        } else {\n          monthlyTypeSplit[monthKey].unknown++;\n        }\n      }\n    });\n    \n    // Calculate percentages\n    return Object.values(monthlyTypeSplit)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        residential: month.residential,\n        residentialPercent: month.total > 0 ? (month.residential / month.total) * 100 : 0,\n        commercial: month.commercial,\n        commercialPercent: month.total > 0 ? (month.commercial / month.total) * 100 : 0,\n        unknown: month.unknown,\n        total: month.total\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few orders\n      .filter(month => month.total >= 5);\n  }, [appointments, selectedCity]);\n\n  // State to track which chart to display\n  const [selectedChartType, setSelectedChartType] = useState('retention');\n\n  // All unique customer types for filter\n  const customerTypes = useMemo(() => {\n    const types = new Set();\n    appointments.forEach(appointment => {\n      if (appointment.customerType) {\n        types.add(appointment.customerType);\n      }\n    });\n    return Array.from(types);\n  }, [appointments]);\n\n  // All unique laundromats for filter\n  const laundromats = useMemo(() => {\n    const cleaners = new Map();\n    appointments.forEach(appointment => {\n      if (appointment.cleaning && appointment.cleaning.cleaner) {\n        const cleanerId = appointment.cleaning.cleaner;\n        const name = laundromatIdToNameMap[cleanerId] || `Laundromat ${cleanerId.substring(0, 8)}`;\n        cleaners.set(cleanerId, {\n          id: cleanerId,\n          name: name\n        });\n      }\n    });\n    return Array.from(cleaners.values());\n  }, [appointments, laundromatIdToNameMap]);\n\n  // For date range selection\n  const handleStartDateChange = (event) => {\n    const [year, month] = event.target.value.split('-');\n    setStartDate(new Date(year, month - 1, 1));\n  };\n\n  const handleEndDateChange = (event) => {\n    const [year, month] = event.target.value.split('-');\n    // Last day of the month\n    setEndDate(new Date(year, month, 0));\n  };\n\n  // Get map center coordinates based on selected city\n  const getMapCenter = useMemo(() => {\n    const centers = {\n      'LYGRRATQ7EGG2': { lat: 42.9849, lng: -81.2453 }, // London\n      'L4NE8GPX89J3A': { lat: 45.4215, lng: -75.6972 }, // Ottawa\n      'LDK6Z980JTKXY': { lat: 43.4643, lng: -80.5204 }, // Kitchener-Waterloo\n      'LXMC6DWVJ5N7W': { lat: 43.2557, lng: -79.8711 }, // Hamilton\n      'LG0VGFKQ25XED': { lat: 51.0447, lng: -114.0719 }  // Calgary\n    };\n    \n    // Return center for selected city or fallback to a default\n    return selectedCity !== 'all' ? centers[selectedCity] : centers['LYGRRATQ7EGG2'];\n  }, [selectedCity]);\n\n  // Get total order count currently displayed on map\n  const displayedMapOrdersCount = useMemo(() => {\n    return mapMarkers.length;\n  }, [mapMarkers]);\n\n  // Get active laundromats count currently displayed on map\n  const displayedLaundromatsCount = useMemo(() => {\n    return laundromatLocations.length;\n  }, [laundromatLocations]);\n\n  const [sortColumn, setSortColumn] = useState('orders');\n  const [sortDirection, setSortDirection] = useState('desc');\n\n  // Handle sorting for laundromat table\n  const handleSort = (column) => {\n    if (sortColumn === column) {\n      // Toggle sort direction if same column is clicked\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Set new sort column and default to descending\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  };\n  \n  // Sort icon component\n  const SortIcon = ({ column }) => {\n    if (sortColumn !== column) return <span style={{ opacity: 0.3 }}>↕</span>;\n    return <span>{sortDirection === 'asc' ? '↑' : '↓'}</span>;\n  };\n\n  // Render laundromat table with sorting\n  const renderLaundromatTable = () => {\n    // Use all laundromats but highlight the ones from the selected city\n    let allLaundromats = laundromatStats;\n    \n    // Filter out low-value entries (no revenue or very few orders)\n    allLaundromats = allLaundromats.filter(l => \n      l.revenue > 0 || l.orders >= 1\n    );\n    \n    // Sort the data\n    const sortedLaundromats = [...allLaundromats].sort((a, b) => {\n      let valueA, valueB;\n      \n      // Handle special sorting cases\n      switch (sortColumn) {\n        case 'name':\n          valueA = laundromatIdToNameMap[a.id] || a.id;\n          valueB = laundromatIdToNameMap[b.id] || b.id;\n          break;\n        case 'city':\n          valueA = a.city || '';\n          valueB = b.city || '';\n          break;\n        case 'avgOrderValue':\n          valueA = a.orders > 0 ? a.revenue / a.orders : 0;\n          valueB = b.orders > 0 ? b.revenue / b.orders : 0;\n          break;\n        case 'retentionScore':\n          valueA = a.returningCustomers && a.customers ? a.returningCustomers / a.customers : 0;\n          valueB = b.returningCustomers && b.customers ? b.returningCustomers / b.customers : 0;\n          break;\n        default:\n          valueA = a[sortColumn];\n          valueB = b[sortColumn];\n      }\n      \n      // Compare values based on sort direction\n      if (typeof valueA === 'string' && typeof valueB === 'string') {\n        return sortDirection === 'asc' \n          ? valueA.localeCompare(valueB) \n          : valueB.localeCompare(valueA);\n      } else {\n        return sortDirection === 'asc' ? valueA - valueB : valueB - valueA;\n      }\n    });\n    \n    // Show top 15 laundromats by orders to keep the table manageable\n    const topLaundromats = sortedLaundromats\n      .sort((a, b) => b.orders - a.orders)\n      .slice(0, 15);\n    \n    return topLaundromats.map((laundromat) => {\n      // Check if this laundromat belongs to the selected city\n      const matchesSelectedCity = selectedCity !== 'all' && \n        (laundromat.city === CITY_MAPPING[selectedCity] || laundromat.cityId === selectedCity);\n      \n      // Calculate retention rate properly\n      const customers = laundromat.customers || laundromat.customerCount || 0;\n      const returningCustomers = laundromat.returningCustomers || laundromat.returningCustomerCount || 0;\n      const retentionRate = customers > 0 ? returningCustomers / customers : 0;\n      \n      return (\n        <tr \n          key={laundromat.id} \n          style={{ \n            borderBottom: '1px solid #E5E7EB',\n          }}\n        >\n          <td style={{ padding: '12px 16px' }}>\n            {matchesSelectedCity && (\n              <Icon sx={{ \n                color: '#EAB308', \n                verticalAlign: 'middle',\n                marginRight: '6px',\n                fontSize: '1.2rem'\n              }}>\n                star\n              </Icon>\n            )}\n            {laundromatIdToNameMap[laundromat.id] || laundromat.id}\n          </td>\n          <td style={{ padding: '12px 16px' }}>\n            {laundromat.city || CITY_MAPPING[laundromat.cityId] || 'Unknown'}\n          </td>\n          <td style={{ padding: '12px 16px' }}>{laundromat.orders.toLocaleString()}</td>\n          <td style={{ padding: '12px 16px' }}>${laundromat.revenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</td>\n          <td style={{ padding: '12px 16px' }}>\n            ${laundromat.orders > 0 ? \n              (laundromat.revenue / laundromat.orders).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}) : \n              '0.00'}\n          </td>\n          <td style={{ padding: '12px 16px' }}>{customers.toLocaleString()}</td>\n          <td style={{ padding: '12px 16px' }}>{returningCustomers.toLocaleString()}</td>\n          <td style={{ padding: '12px 16px' }}>\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <span style={{ \n                width: '12px', \n                height: '12px', \n                borderRadius: '50%', \n                marginRight: '8px',\n                backgroundColor: retentionRate >= 0.6 ? '#10B981' :\n                              retentionRate >= 0.45 ? '#059669' :\n                              retentionRate >= 0.35 ? '#F59E0B' :\n                              retentionRate >= 0.25 ? '#D97706' :\n                              retentionRate >= 0.15 ? '#DC2626' : '#B91C1C'\n              }}></span>\n              {(retentionRate * 100).toFixed(1)}%\n            </div>\n          </td>\n          <td style={{ padding: '12px 16px' }}>\n            {laundromat.avgTurnaroundDays ? laundromat.avgTurnaroundDays.toFixed(1) : '—'} days\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  // City information data\n  const cityInfo = useMemo(() => {\n    const info = {\n      'LYGRRATQ7EGG2': {\n        name: 'London',\n        population: 400000,\n        laundromatCount: 3,\n        operationalSince: '2023-01-01',\n        marketShare: (aggregateMetrics.totalOrders / 400000) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'L4NE8GPX89J3A': {\n        name: 'Ottawa',\n        population: 1017449,\n        laundromatCount: 5,\n        operationalSince: '2023-03-15',\n        marketShare: (aggregateMetrics.totalOrders / 1017449) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LDK6Z980JTKXY': {\n        name: 'Kitchener-Waterloo',\n        population: 575847,\n        laundromatCount: 4,\n        operationalSince: '2023-06-01',\n        marketShare: (aggregateMetrics.totalOrders / 575847) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LXMC6DWVJ5N7W': {\n        name: 'Hamilton',\n        population: 569353,\n        laundromatCount: 3,\n        operationalSince: '2023-09-10',\n        marketShare: (aggregateMetrics.totalOrders / 569353) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LG0VGFKQ25XED': {\n        name: 'Calgary',\n        population: 1306784,\n        laundromatCount: 4,\n        operationalSince: '2023-11-20',\n        marketShare: (aggregateMetrics.totalOrders / 1306784) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      }\n    };\n    return selectedCity === 'all' ? null : info[selectedCity];\n  }, [selectedCity, aggregateMetrics]);\n\n  // City projection constants - extracted from CityProjectionCalculator\n  const PROJECTION_RATE = 5.57; // Standard rate excluding London\n  const MONTHLY_DISTRIBUTION = {\n    1: 0.0604, 2: 0.1546, 3: 0.1570, 4: 0.1691, 5: 0.2126, 6: 0.2464\n  };\n\n  // Calculate projections for the selected city with error handling\n  const projectionData = useMemo(() => {\n    try {\n      if (!monthlyOrdersTrend || monthlyOrdersTrend.length === 0) {\n        return {\n          combinedOrderTrend: [],\n          metrics: {\n            totalAnnualOrders: 0,\n            averageMonthlyOrders: 0,\n            projectedGrowthPercent: 0\n          }\n        };\n      }\n      \n      // Generate projections using the advanced system\n      return addProjectionsToComponent(monthlyOrdersTrend, selectedCity);\n    } catch (error) {\n      console.error(\"Error generating projections:\", error);\n      // Return a safe default in case of errors\n      return {\n        combinedOrderTrend: monthlyOrdersTrend,\n        metrics: {\n          totalAnnualOrders: 0,\n          averageMonthlyOrders: 0,\n          projectedGrowthPercent: 0\n        },\n        error: true\n      };\n    }\n  }, [monthlyOrdersTrend, selectedCity]);\n\n  // Combine actual data with projections for the chart\n  const combinedOrderTrend = useMemo(() => {\n    if (!monthlyOrdersTrend || !projectionData || selectedCity === 'all') {\n      return monthlyOrdersTrend;\n    }\n\n    // Create a map of existing data points by month\n    const existingDataMap = {};\n    monthlyOrdersTrend.forEach(dataPoint => {\n      existingDataMap[dataPoint.month] = dataPoint;\n    });\n\n    // Merge actual data with projections - make sure we access the array correctly\n    return [\n      ...monthlyOrdersTrend,\n      ...(projectionData.projectedData || []).filter(projection => !existingDataMap[projection.month])\n    ].sort((a, b) => {\n      // Sort by date\n      if (a.month && b.month) {\n        return a.month.localeCompare(b.month);\n      }\n      return 0;\n    });\n  }, [monthlyOrdersTrend, projectionData, selectedCity]);\n\n  // Add a state for total orders across all cities\n  const [totalOrdersAllCities, setTotalOrdersAllCities] = useState(0);\n  \n  // When appointments are loaded, calculate total orders across all cities\n  useEffect(() => {\n    if (appointments && appointments.length > 0) {\n      setTotalOrdersAllCities(appointments.length);\n    }\n  }, [appointments]);\n\n  // Add state for total revenue across all cities\n  const [totalRevenueAllCities, setTotalRevenueAllCities] = useState(0);\n\n  // Update the useEffect that calculates totalOrdersAllCities to also calculate total revenue\n  useEffect(() => {\n    if (appointments && appointments.length > 0) {\n      setTotalOrdersAllCities(appointments.length);\n      \n      // Calculate total revenue across all cities\n      const totalRevenue = appointments.reduce((sum, appointment) => {\n        const revenue = parseFloat(appointment.invoiceTotal || 0);\n        return sum + (isNaN(revenue) ? 0 : revenue);\n      }, 0);\n      \n      setTotalRevenueAllCities(totalRevenue);\n    }\n  }, [appointments]);\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Add a section for displaying order projections with error handling\n  const renderProjectionSection = () => {\n    return (\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h5\" gutterBottom sx={{ mb: 3, fontWeight: 'bold', color: '#111827' }}>\n          Quarterly Growth for {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n        </Typography>\n        <QuarterlyGrowthByCity selectedCity={selectedCity} cityMapping={CITY_MAPPING} />\n      </Box>\n    );\n  };\n\n  // Render map section with Coming Soon message\n  const renderMapSection = () => {\n    return (\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h5\" sx={{ fontWeight: 'bold', color: '#111827' }}>\n            Order Locations - {CITY_MAPPING[selectedCity] || 'All Cities'}\n          </Typography>\n        </Box>\n        <Paper sx={{ \n          borderRadius: 2, \n          overflow: 'hidden', \n          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n          height: '450px',\n          position: 'relative'\n        }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ \n              key: 'AIzaSyAtGuXvA4E3HW0xM2yzRU7tphMTtxqKQD4',\n              libraries: ['places']\n            }}\n            center={mapCenter || getMapCenter}\n            zoom={mapZoom}\n            onChange={({ center, zoom, bounds }) => {\n              // Update map state when user interacts with the map\n              setMapCenter(center);\n              setMapZoom(zoom);\n            }}\n            options={{\n              fullscreenControl: true,\n              zoomControl: true,\n              mapTypeControl: true,\n              streetViewControl: false,\n              gestureHandling: 'greedy',\n              minZoom: 5,\n              maxZoom: 18,\n              styles: [\n                {\n                  featureType: 'all',\n                  elementType: 'geometry',\n                  stylers: [{ lightness: 20 }]\n                },\n                {\n                  featureType: 'water',\n                  elementType: 'geometry',\n                  stylers: [{ color: '#e0f2fe' }]\n                },\n                {\n                  featureType: 'road',\n                  elementType: 'geometry',\n                  stylers: [{ color: '#f1f5f9' }]\n                }\n              ]\n            }}\n          />\n          \n          {/* Coming Soon overlay */}\n          <Box sx={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(255, 255, 255, 0.85)',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: 10\n          }}>\n            <Box sx={{\n              backgroundColor: '#3B82F6',\n              color: 'white',\n              padding: '12px 24px',\n              borderRadius: '8px',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n              marginBottom: '16px'\n            }}>\n              <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\n                Coming Soon!\n              </Typography>\n            </Box>\n            <Typography variant=\"body1\" sx={{ maxWidth: '450px', textAlign: 'center', color: '#1F2937' }}>\n              Our team is working on integrating detailed map data for all service areas.\n              Check back soon for a visual representation of our order locations.\n            </Typography>\n          </Box>\n        </Paper>\n      </Box>\n    );\n  };\n\n  // Modify the statistics card section to show percentages\n  const renderStatisticsCard = (title, value, secondaryValue = null, icon = null) => {\n    // Calculate percentage of total if this is the total orders card\n    const showPercentage = title === 'Total Orders' && totalOrdersAllCities > 0 && selectedCity !== 'all';\n    const percentage = showPercentage ? (value / totalOrdersAllCities * 100).toFixed(1) : null;\n\n    const showRevenuePercentage = title === 'Total Revenue' && totalRevenueAllCities > 0 && selectedCity !== 'all';\n    const revenuePercentage = showRevenuePercentage ? (value / totalRevenueAllCities * 100).toFixed(1) : null;\n\n    return (\n      <Paper \n        elevation={1}\n        sx={{\n          p: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100%',\n          borderRadius: 2,\n          backgroundColor: '#FFFFFF',\n          transition: 'transform 0.3s, box-shadow 0.3s',\n          '&:hover': {\n            transform: 'translateY(-5px)',\n            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'\n          }\n        }}\n      >\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>\n          <Typography\n            variant=\"subtitle1\"\n            component=\"div\"\n            sx={{ \n              color: '#6B7280',\n              fontWeight: 500,\n              fontSize: '0.875rem'\n            }}\n          >\n            {title}\n          </Typography>\n          {icon && (\n            <Box\n              sx={{\n                bgcolor: '#F3F4F6',\n                borderRadius: '50%',\n                width: 40,\n                height: 40,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                color: '#3B82F6'\n              }}\n            >\n              {icon}\n            </Box>\n          )}\n        </Box>\n        \n        <Box sx={{ mt: 1, display: 'flex', alignItems: 'baseline' }}>\n          <Typography\n            variant=\"h4\"\n            component=\"div\"\n            sx={{\n              fontWeight: 'bold',\n              color: '#111827',\n              lineHeight: 1.2\n            }}\n          >\n            {typeof value === 'number' && title === 'Total Revenue'\n              ? `$${value.toLocaleString(undefined, {\n                  minimumFractionDigits: value % 1 === 0 ? 0 : 2,\n                  maximumFractionDigits: 2\n                })}`\n              : (typeof value === 'number' ? value.toLocaleString() : value)\n            }\n          </Typography>\n          \n          {showPercentage && (\n            <Typography\n              variant=\"body2\"\n              component=\"div\"\n              sx={{\n                ml: 1,\n                color: '#10B981',\n                fontWeight: 'medium',\n                fontSize: '0.875rem',\n                bgcolor: '#ECFDF5',\n                px: 1,\n                py: 0.5,\n                borderRadius: 1,\n                whiteSpace: 'nowrap'\n              }}\n            >\n              {percentage}% of total\n            </Typography>\n          )}\n          \n          {showRevenuePercentage && (\n            <Typography\n              variant=\"body2\"\n              component=\"div\"\n              sx={{\n                ml: 1,\n                color: '#10B981',\n                fontWeight: 'medium',\n                fontSize: '0.875rem',\n                bgcolor: '#ECFDF5',\n                px: 1,\n                py: 0.5,\n                borderRadius: 1,\n                whiteSpace: 'nowrap'\n              }}\n            >\n              {revenuePercentage}% of total\n            </Typography>\n          )}\n        </Box>\n        \n        {secondaryValue && (\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: '#6B7280',\n              mt: 1\n            }}\n          >\n            {secondaryValue}\n          </Typography>\n        )}\n      </Paper>\n    );\n  };\n\n  return (\n    <Box sx={{ \n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      bgcolor: '#F3F4F6', \n      minHeight: '100vh'\n    }}>\n      <Box component=\"main\" sx={{ flexGrow: 1, px: 3, py: 4 }}>\n        <Container maxWidth=\"xl\">\n          {/* Header */}\n          <AppBar \n            position=\"sticky\" \n            sx={{ \n              backgroundColor: '#1E40AF', \n              top: 0, \n              zIndex: 1100,\n              transition: 'transform 0.3s ease',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'\n            }}\n          >\n            <Toolbar>\n              <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1, fontWeight: 'bold' }}>\n                Laundry Service Analytics Dashboard\n              </Typography>\n              \n              {/* Filter Controls with clear labels */}\n              <Box sx={{ display: 'flex', gap: 1.5, flexWrap: 'wrap', alignItems: 'center' }}>\n                {/* City Selector with Label */}\n                <Box sx={{ display: 'flex', flexDirection: 'column', minWidth: 130 }}>\n                  <Typography variant=\"caption\" sx={{ color: 'white', fontWeight: 'medium', mb: 0.3 }}>\n                    City\n                  </Typography>\n                  <FormControl variant=\"filled\" size=\"small\" sx={{ backgroundColor: 'white', borderRadius: '4px' }}>\n                    <Select\n                      value={selectedCity}\n                      onChange={(e) => setSelectedCity(e.target.value)}\n                      displayEmpty\n                      sx={{ \n                        color: '#1E3A8A',\n                        '.MuiSelect-select': { py: 1, pr: 6 },\n                        '&:focus': { backgroundColor: 'white' },\n                        fontSize: '0.85rem'\n                      }}\n                      IconComponent={() => (\n                        <Icon sx={{ position: 'absolute', right: 4, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A', fontSize: '1.25rem' }}>\n                          expand_more\n                        </Icon>\n                      )}\n                    >\n                      <MenuItem value=\"all\">All Cities</MenuItem>\n                      <MenuItem value=\"LYGRRATQ7EGG2\">London</MenuItem>\n                      <MenuItem value=\"L4NE8GPX89J3A\">Ottawa</MenuItem>\n                      <MenuItem value=\"LDK6Z980JTKXY\">Kitchener-Waterloo</MenuItem>\n                      <MenuItem value=\"LXMC6DWVJ5N7W\">Hamilton</MenuItem>\n                      <MenuItem value=\"LG0VGFKQ25XED\">Calgary</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Box>\n                \n                {/* Date Range Selector - From With Label */}\n                <Box sx={{ display: 'flex', flexDirection: 'column', minWidth: 100 }}>\n                  <Typography variant=\"caption\" sx={{ color: 'white', fontWeight: 'medium', mb: 0.3 }}>\n                    From\n                  </Typography>\n                  <FormControl variant=\"filled\" size=\"small\" sx={{ backgroundColor: 'white', borderRadius: '4px' }}>\n                    <Select\n                      value={`${startDate.getFullYear()}-${startDate.getMonth()+1}`}\n                      onChange={handleStartDateChange}\n                      displayEmpty\n                      sx={{ \n                        color: '#1E3A8A',\n                        '.MuiSelect-select': { py: 1, pr: 6 },\n                        '&:focus': { backgroundColor: 'white' },\n                        fontSize: '0.85rem'\n                      }}\n                      IconComponent={() => (\n                        <Icon sx={{ position: 'absolute', right: 4, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A', fontSize: '1.25rem' }}>\n                          expand_more\n                        </Icon>\n                      )}\n                    >\n                      {[...Array(24)].map((_, i) => {\n                        const date = subMonths(new Date(), i);\n                        const value = `${date.getFullYear()}-${date.getMonth()+1}`;\n                        const label = format(date, 'MMM yyyy');\n                        return (\n                          <MenuItem key={`from-${value}`} value={value}>{label}</MenuItem>\n                        );\n                      })}\n                    </Select>\n                  </FormControl>\n                </Box>\n                \n                {/* Date Range Selector - To With Label */}\n                <Box sx={{ display: 'flex', flexDirection: 'column', minWidth: 100 }}>\n                  <Typography variant=\"caption\" sx={{ color: 'white', fontWeight: 'medium', mb: 0.3 }}>\n                    To\n                  </Typography>\n                  <FormControl variant=\"filled\" size=\"small\" sx={{ backgroundColor: 'white', borderRadius: '4px' }}>\n                    <Select\n                      value={`${endDate.getFullYear()}-${endDate.getMonth()+1}`}\n                      onChange={handleEndDateChange}\n                      displayEmpty\n                      sx={{ \n                        color: '#1E3A8A',\n                        '.MuiSelect-select': { py: 1, pr: 6 },\n                        '&:focus': { backgroundColor: 'white' },\n                        fontSize: '0.85rem'\n                      }}\n                      IconComponent={() => (\n                        <Icon sx={{ position: 'absolute', right: 4, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A', fontSize: '1.25rem' }}>\n                          expand_more\n                        </Icon>\n                      )}\n                    >\n                      {[...Array(24)].map((_, i) => {\n                        const date = subMonths(new Date(), i);\n                        const value = `${date.getFullYear()}-${date.getMonth()+1}`;\n                        const label = format(date, 'MMM yyyy');\n                        return (\n                          <MenuItem key={`to-${value}`} value={value}>{label}</MenuItem>\n                        );\n                      })}\n                    </Select>\n                  </FormControl>\n                </Box>\n                \n                {/* Customer Type Filter With Label */}\n                <Box sx={{ display: 'flex', flexDirection: 'column', minWidth: 130 }}>\n                  <Typography variant=\"caption\" sx={{ color: 'white', fontWeight: 'medium', mb: 0.3 }}>\n                    Customer Type\n                  </Typography>\n                  <FormControl variant=\"filled\" size=\"small\" sx={{ backgroundColor: 'white', borderRadius: '4px' }}>\n                    <Select\n                      value={customerTypeFilter}\n                      onChange={(e) => setCustomerTypeFilter(e.target.value)}\n                      displayEmpty\n                      sx={{ \n                        color: '#1E3A8A',\n                        '.MuiSelect-select': { py: 1, pr: 6 },\n                        '&:focus': { backgroundColor: 'white' },\n                        fontSize: '0.85rem'\n                      }}\n                      IconComponent={() => (\n                        <Icon sx={{ position: 'absolute', right: 4, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A', fontSize: '1.25rem' }}>\n                          expand_more\n                        </Icon>\n                      )}\n                    >\n                      <MenuItem value=\"all\">All Customer Types</MenuItem>\n                      {customerTypes.map(type => (\n                        <MenuItem key={type} value={type}>{type}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Box>\n              </Box>\n            </Toolbar>\n          </AppBar>\n\n          {/* City Overview Section (Independent of date range) */}\n          {cityInfo && (\n            <Box sx={{ mb: 6 }}>\n              <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, justifyContent: 'space-between', alignItems: { xs: 'start', md: 'center' }, mb: 4 }}>\n                <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: '#111827', mb: { xs: 2, md: 0 } }}>\n                  {cityInfo.name} Overview\n                </Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <Icon sx={{ color: '#6B7280', mr: 1 }}>calendar_today</Icon>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    <span style={{ fontWeight: 500 }}>Operational Since:</span> {new Date(cityInfo.operationalSince).toLocaleString('en-US', { month: 'long', year: 'numeric' })}\n                  </Typography>\n                </Box>\n              </Box>\n              \n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#EBF5FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#1E88E5' }}>groups</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Population</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.population.toLocaleString()}</Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#E6FFFA', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#26A69A' }}>location_on</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Active Laundromats</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.laundromatCount}</Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'text.secondary', mt: 0.5, display: 'block' }}>\n                          {laundromats\n                            .filter(l => {\n                              // Filter by city based on most common city for this cleaner\n                              const cityFrequency = {};\n                              appointments.forEach(appointment => {\n                                if (appointment.cleaning && appointment.cleaning.cleaner === l.id && appointment.cityId) {\n                                  cityFrequency[appointment.cityId] = (cityFrequency[appointment.cityId] || 0) + 1;\n                                }\n                              });\n                              \n                              let mostCommonCity = null;\n                              let maxCityCount = 0;\n                              Object.keys(cityFrequency).forEach(cityId => {\n                                if (cityFrequency[cityId] > maxCityCount) {\n                                  maxCityCount = cityFrequency[cityId];\n                                  mostCommonCity = cityId;\n                                }\n                              });\n                              \n                              return mostCommonCity === selectedCity;\n                            })\n                            .map(l => l.name)\n                            .join(', ')}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#F3E8FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#AB47BC' }}>trending_up</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Market Penetration</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.marketShare.toFixed(2)}%</Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'text.secondary', mt: 0.5, display: 'block' }}>\n                          Based on total population\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#FFF7ED', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#F59E0B' }}>shopping_bag</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Average Orders Per Customer</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.avgOrderFrequency.toFixed(1)}</Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n\n          {/* Order Projections Section - Only show for specific cities */}\n          {selectedCity !== 'all' && renderProjectionSection()}\n\n          {/* Date Range Information Banner - Made more prominent */}\n          <Paper sx={{ \n            p: 3, \n            mb: 4, \n            backgroundColor: '#EFF6FF', \n            borderRadius: 2, \n            display: 'flex', \n            flexDirection: { xs: 'column', md: 'row' }, \n            alignItems: { xs: 'start', md: 'center' }, \n            justifyContent: 'space-between',\n            borderLeft: '5px solid #3B82F6' // Added accent border\n          }}>\n            <Typography variant=\"h5\" sx={{ fontWeight: 'bold', color: '#1E40AF', mb: { xs: 2, md: 0 } }}>\n              Showing Statistics for: {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n            </Typography>\n            <Box sx={{ display: 'flex', alignItems: 'center', backgroundColor: 'white', px: 2, py: 1, borderRadius: 1, boxShadow: '0 1px 2px rgba(0,0,0,0.1)' }}>\n              <Icon sx={{ color: '#3B82F6', mr: 1 }}>date_range</Icon>\n              <Typography variant=\"body1\" sx={{ mr: 1, color: '#1E40AF', fontWeight: 'medium' }}>\n                From: {format(startDate, 'MMM yyyy')}\n              </Typography>\n              <Typography variant=\"body1\" sx={{ color: '#1E40AF', fontWeight: 'medium' }}>\n                To: {format(endDate, 'MMM yyyy')}\n              </Typography>\n            </Box>\n          </Paper>\n\n          {/* Summary Cards - Now clearly marked as being for the selected date range */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            Performance Metrics\n          </Typography>\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#EBF5FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#2563EB' }}>shopping_bag</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Orders</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{aggregateMetrics.totalOrders.toLocaleString()}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#ECFDF5', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#10B981' }}>attach_money</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Revenue</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>${aggregateMetrics.totalRevenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#FEF3C7', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#F59E0B' }}>trending_up</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Avg. Order Value</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>${aggregateMetrics.avgOrderValue.toFixed(2)}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#F3E8FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#8B5CF6' }}>inventory_2</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Avg. Order Weight</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{aggregateMetrics.avgWeight.toFixed(2)} kg</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Chart Section - Within the Date Range */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]} Order Trends\n          </Typography>\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} md={8}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>\n                  Weekly Orders - {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart \n                    data={\n                      selectedCity === 'all' \n                        ? monthlyOrdersTrend \n                        : (projectionData?.weeklyHistoricalData || monthlyOrdersTrend)\n                    }\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis \n                      dataKey=\"name\" \n                      tick={{ fill: '#6B7280' }}\n                      interval=\"preserveStartEnd\"\n                      minTickGap={15}\n                      tickMargin={8}\n                    />\n                    <YAxis tick={{ fill: '#6B7280' }} />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: '#FFFFFF', \n                        borderRadius: '0.375rem', \n                        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', \n                        border: 'none' \n                      }}\n                      formatter={(value, name, props) => {\n                        return [`${value} orders`, name];\n                      }}\n                      labelFormatter={(label, items) => {\n                        const dataPoint = items?.[0]?.payload;\n                        return dataPoint?.fullname || label;\n                      }}\n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                    \n                    {selectedCity === 'all' \n                      ? Object.values(CITY_MAPPING)\n                        .filter(city => city !== 'All Cities')\n                        .map((city, index) => (\n                          <Line \n                            key={city}\n                            type=\"monotone\" \n                            dataKey={city} \n                            stroke={COLORS[index % COLORS.length]}\n                            strokeWidth={2}\n                            dot={{ r: 3, strokeWidth: 1, fill: COLORS[index % COLORS.length] }}\n                            activeDot={{ r: 6 }}\n                            isAnimationActive={true}\n                            animationDuration={1000}\n                            connectNulls={true}\n                          />\n                        ))\n                      : (\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"orders\" \n                          name={CITY_MAPPING[selectedCity]}\n                          stroke=\"#2563EB\"\n                          strokeWidth={2}\n                          dot={{ r: 3, strokeWidth: 1, fill: '#2563EB' }}\n                          activeDot={{ r: 6 }}\n                          isAnimationActive={true}\n                          animationDuration={1000}\n                          connectNulls={true}\n                        />\n                      )\n                    }\n                  </LineChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>Customer Types</Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={customerTypeDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {customerTypeDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${value} orders`, 'Count']} \n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Additional Metric Charts - with improved styling */}\n          <Grid container spacing={3} sx={{ mb: 5 }}>\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 2, height: '100%' }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                  <Typography variant=\"h6\">Customer Retention Over Time</Typography>\n                </Box>\n                \n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={retentionRateTrend}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis dataKey=\"name\" tick={{ fill: '#6B7280' }} />\n                    <YAxis \n                      tickFormatter={(value) => `${(value * 100).toFixed(0)}%`}\n                      domain={[0, dataMax => Math.min(1, dataMax * 1.1)]}\n                      tick={{ fill: '#6B7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${(value * 100).toFixed(1)}%`, 'Retention Rate']} \n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"retentionRate\" \n                      stroke=\"#3B82F6\" \n                      strokeWidth={2}\n                      dot={{ r: 4, strokeWidth: 1, fill: \"#3B82F6\" }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>\n                  Order Weight Distribution\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={weightDistribution}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis dataKey=\"range\" tick={{ fill: '#6B7280' }} />\n                    <YAxis tick={{ fill: '#6B7280' }} />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${value} orders`, 'Count']} \n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                    <Bar dataKey=\"count\" fill=\"#26A69A\" name=\"Number of Orders\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Laundromat Performance Table - With Improved Styling */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            Laundromat Performance\n          </Typography>\n          <Box sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              {selectedCity !== 'all' \n                ? `Showing all laundromats with ${CITY_MAPPING[selectedCity]} laundromats highlighted`\n                : `Showing all laundromats across cities`}\n            </Typography>\n            {selectedCity !== 'all' && (\n              <Box \n                sx={{ \n                  display: 'inline-block', \n                  marginLeft: '10px', \n                  padding: '2px 8px',\n                  backgroundColor: '#FEF08A',\n                  color: '#854D0E',\n                  borderRadius: '4px',\n                  fontSize: '0.875rem',\n                  fontWeight: 'medium'\n                }}\n              >\n                {CITY_MAPPING[selectedCity]} Highlighted\n              </Box>\n            )}\n          </Box>\n          <Paper sx={{ p: 0, mb: 4, overflowX: 'auto', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n            <Box sx={{ p: 3, borderBottom: '1px solid #E5E7EB' }}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={3}>\n                  <FormControl fullWidth variant=\"outlined\" size=\"small\">\n                    <InputLabel>Filter by Laundromat</InputLabel>\n                    <Select\n                      value={laundromatFilter}\n                      onChange={(e) => setLaundromatFilter(e.target.value)}\n                      label=\"Filter by Laundromat\"\n                    >\n                      <MenuItem value=\"all\">All Laundromats</MenuItem>\n                      {laundromats.map(laundromat => (\n                        <MenuItem key={laundromat.id} value={laundromat.id}>{laundromat.name}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </Box>\n            <Box>\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr style={{ backgroundColor: '#F9FAFB' }}>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('name')}\n                    >\n                      Laundromat Name <SortIcon column=\"name\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('city')}\n                    >\n                      City <SortIcon column=\"city\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('orders')}\n                    >\n                      Total Orders <SortIcon column=\"orders\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('revenue')}\n                    >\n                      Revenue <SortIcon column=\"revenue\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('avgOrderValue')}\n                    >\n                      Avg. Order Value <SortIcon column=\"avgOrderValue\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('customers')}\n                    >\n                      Customers <SortIcon column=\"customers\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('returningCustomers')}\n                    >\n                      Returning <SortIcon column=\"returningCustomers\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('retentionScore')}\n                    >\n                      Retention <SortIcon column=\"retentionScore\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('avgTurnaroundDays')}\n                    >\n                      Turnaround <SortIcon column=\"avgTurnaroundDays\" />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {renderLaundromatTable()}\n                </tbody>\n              </table>\n            </Box>\n          </Paper>\n\n          {/* City Performance Table - showing metrics across all cities */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            City Performance\n          </Typography>\n          <Paper sx={{ p: 0, mb: 4, overflowX: 'auto', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n            <Box>\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr style={{ backgroundColor: '#F9FAFB' }}>\n                    <th style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      City\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      In Operation\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Total Orders\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Revenue\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Avg. Order Value\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Customers\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Returning\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Retention\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(CITY_MAPPING)\n                    .filter(cityId => cityId !== 'all')\n                    .map(cityId => {\n                      // Get city data from filtered appointments\n                      const cityData = appointments\n                        .filter(a => a.cityId === cityId || normalizeCityId(a) === cityId);\n                      \n                      const totalOrders = cityData.length;\n                      const totalRevenue = cityData.reduce((sum, a) => {\n                        const revenue = parseFloat(a.invoiceTotal || 0);\n                        return sum + (isNaN(revenue) ? 0 : revenue);\n                      }, 0);\n                      const avgOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;\n                      \n                      // Calculate unique customers\n                      const uniqueCustomers = new Set();\n                      const customerAppointments = {};\n                      \n                      cityData.forEach(a => {\n                        if (a.customerId) {\n                          uniqueCustomers.add(a.customerId);\n                          \n                          if (!customerAppointments[a.customerId]) {\n                            customerAppointments[a.customerId] = 0;\n                          }\n                          customerAppointments[a.customerId]++;\n                        }\n                      });\n                      \n                      // Calculate returning customers\n                      const totalCustomers = uniqueCustomers.size;\n                      const returningCustomers = Object.values(customerAppointments)\n                        .filter(count => count > 1).length;\n                      \n                      // Calculate retention rate\n                      const retentionRate = totalCustomers > 0 ? \n                        returningCustomers / totalCustomers : 0;\n                      \n                      // Is this the currently selected city?\n                      const isSelected = cityId === selectedCity;\n\n                      // Calculate years in operation\n                      let operationSince;\n                      let yearsInOperation;\n                      const currentDate = new Date();\n                      \n                      switch(cityId) {\n                        case 'LYGRRATQ7EGG2': // London\n                          operationSince = new Date('2022-01-01');\n                          break;\n                        case 'L4NE8GPX89J3A': // Ottawa\n                          operationSince = new Date('2023-03-15');\n                          break;\n                        case 'LDK6Z980JTKXY': // Kitchener-Waterloo\n                          operationSince = new Date('2023-06-01');\n                          break;\n                        case 'LXMC6DWVJ5N7W': // Hamilton\n                          operationSince = new Date('2023-09-10');\n                          break;\n                        case 'LG0VGFKQ25XED': // Calgary\n                          operationSince = new Date('2023-11-20');\n                          break;\n                        default:\n                          operationSince = new Date('2022-01-01');\n                      }\n                      \n                      const diffTime = Math.abs(currentDate - operationSince);\n                      const diffYears = diffTime / (1000 * 60 * 60 * 24 * 365.25);\n                      yearsInOperation = diffYears.toFixed(1);\n                      \n                      return (\n                        <tr key={cityId} style={{ borderBottom: '1px solid #E5E7EB' }}>\n                          <td style={{ padding: '12px 16px', fontWeight: 500 }}>\n                            {isSelected && (\n                              <Icon sx={{ \n                                color: '#EAB308', \n                                verticalAlign: 'middle',\n                                marginRight: '6px',\n                                fontSize: '1.2rem'\n                              }}>\n                                star\n                              </Icon>\n                            )}\n                            {CITY_MAPPING[cityId]}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            {yearsInOperation} years\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            {totalOrders.toLocaleString()}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            ${totalRevenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            ${avgOrderValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            {totalCustomers.toLocaleString()}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            {returningCustomers.toLocaleString()}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                              <span style={{ \n                                width: '12px', \n                                height: '12px', \n                                borderRadius: '50%', \n                                marginRight: '8px',\n                                backgroundColor: retentionRate >= 0.6 ? '#10B981' :\n                                             retentionRate >= 0.45 ? '#059669' :\n                                             retentionRate >= 0.35 ? '#F59E0B' :\n                                             retentionRate >= 0.25 ? '#D97706' :\n                                             retentionRate >= 0.15 ? '#DC2626' : '#B91C1C'\n                              }}></span>\n                              {(retentionRate * 100).toFixed(1)}%\n                            </div>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n            </Box>\n          </Paper>\n          \n          {/* Map Section - replaced with Coming Soon version */}\n          {renderMapSection()}\n        </Container>\n      </Box>\n\n      {/* Footer */}\n      <Box component=\"footer\" sx={{ p: 3, backgroundColor: '#F1F5F9', borderTop: '1px solid #E2E8F0' }}>\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n          Laundry Service Analytics Dashboard &bull; Last updated: {new Date().toLocaleDateString()} \n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Dashboard; ","import React, { useState, useEffect } from 'react';\nimport { Box, CircularProgress, Typography, Button } from '@mui/material';\nimport Dashboard from './components/Dashboard';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabaseUrl = 'https://cnbpmepdmtpgrbllufcb.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNuYnBtZXBkbXRwZ3JibGx1ZmNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc5MjM4MjEsImV4cCI6MjA1MzQ5OTgyMX0.UqDleR4ucntrg9x6FNgJigKZjKiATFYiMiLiZZj3B2w';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Load data from Supabase\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        console.log('Fetching data from Supabase...');\n        \n        // First try Supabase\n        const { data: supabaseData, error: supabaseError } = await supabase\n          .from('appointments')\n          .select('*');\n        \n        if (supabaseError) {\n          console.error('Supabase error:', supabaseError);\n          throw new Error(`Failed to load data from Supabase: ${supabaseError.message}`);\n        }\n        \n        if (supabaseData && supabaseData.length > 0) {\n          console.log(`Successfully loaded ${supabaseData.length} records from Supabase`);\n          setData(supabaseData);\n        } else {\n          // Fallback to local JSON file\n          console.log('No data found in Supabase, falling back to local JSON file');\n          const response = await fetch('/appointments.json');\n          if (!response.ok) {\n            throw new Error(`Failed to load local data: ${response.status} ${response.statusText}`);\n          }\n          const jsonData = await response.json();\n          setData(jsonData);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err.message || 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Handle retry when loading fails\n  const handleRetry = () => {\n    setError(null);\n    setLoading(true);\n    // Re-trigger the effect\n    const loadData = async () => {\n      try {\n        // First try Supabase\n        const { data: supabaseData, error: supabaseError } = await supabase\n          .from('appointments')\n          .select('*');\n        \n        if (supabaseError) {\n          console.error('Supabase error:', supabaseError);\n          throw new Error(`Failed to load data from Supabase: ${supabaseError.message}`);\n        }\n        \n        if (supabaseData && supabaseData.length > 0) {\n          console.log(`Successfully loaded ${supabaseData.length} records from Supabase`);\n          setData(supabaseData);\n        } else {\n          // Fallback to local JSON file\n          console.log('No data found in Supabase, falling back to local JSON file');\n          const response = await fetch('/appointments.json');\n          if (!response.ok) {\n            throw new Error(`Failed to load local data: ${response.status} ${response.statusText}`);\n          }\n          const jsonData = await response.json();\n          setData(jsonData);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err.message || 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  };\n\n  if (loading) {\n    return (\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column',\n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          backgroundColor: '#F3F4F6'\n        }}\n      >\n        <CircularProgress size={60} sx={{ mb: 3 }} />\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          Loading laundry service data...\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column',\n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          backgroundColor: '#F3F4F6',\n          p: 3\n        }}\n      >\n        <Typography variant=\"h5\" color=\"error\" gutterBottom>\n          Error Loading Data\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3, maxWidth: 600, textAlign: 'center' }}>\n          {error}\n        </Typography>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleRetry}>\n          Retry\n        </Button>\n      </Box>\n    );\n  }\n\n  return <Dashboard jsonData={data} />;\n};\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport App from './App';\n\n// Create a custom theme\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1E3A8A',\n    },\n    secondary: {\n      main: '#10B981',\n    },\n    background: {\n      default: '#F3F4F6',\n    },\n  },\n  typography: {\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n    h5: {\n      fontWeight: 600,\n    },\n    h6: {\n      fontWeight: 600,\n    },\n  },\n  components: {\n    MuiPaper: {\n      defaultProps: {\n        elevation: 0,\n      },\n      styleOverrides: {\n        root: {\n          boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.05)',\n        },\n      },\n    },\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          textTransform: 'none',\n          borderRadius: 8,\n        },\n      },\n    },\n    MuiSelect: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8,\n        },\n      },\n    },\n  },\n});\n\n// Create the root element for our React application\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Render the application\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n); "],"sourceRoot":""}