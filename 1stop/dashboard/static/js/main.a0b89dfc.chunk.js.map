{"version":3,"sources":["components/QuarterlyGrowthByCity.js","utils/dataProcessor.js","utils/ProjectionImplementation.js","components/Dashboard.js","App.js","index.js"],"names":["QuarterlyGrowthByCity","_ref","_chartData$currentQua","selectedCity","cityMapping","chartData","setChartData","useState","tableExpanded","setTableExpanded","currentQuarterIndex","setCurrentQuarterIndex","generateData","useCallback","cityBaseValues","cityGrowthRates","seasonality","1","2","3","4","baseValue","growthRate","data","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","currentQuarter","Math","floor","previousValue","currentValue","i","quarterOffset","targetYear","targetQuarter","quarterlyGrowthFactor","pow","seasonalFactor","randomFactor","random","adjustedGrowthFactor","round","growthPercentage","push","name","orders","growth","parseFloat","toFixed","quarter","year","isProjection","useEffect","CustomTooltip","_ref2","active","payload","label","length","React","createElement","style","backgroundColor","padding","border","boxShadow","borderRadius","margin","fontWeight","color","fontStyle","value","Paper","sx","p","Box","display","justifyContent","alignItems","mb","Typography","variant","cityId","IconButton","onClick","size","KeyboardArrowUpIcon","KeyboardArrowDownIcon","height","ResponsiveContainer","width","ComposedChart","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","yAxisId","orientation","stroke","angle","position","domain","Tooltip","content","Legend","type","ReferenceLine","x","strokeWidth","fill","fontSize","Bar","barSize","radius","isAnimationActive","map","entry","index","Cell","key","Line","dot","r","activeDot","Collapse","in","timeout","unmountOnExit","mt","maxHeight","overflow","borderCollapse","borderBottom","textAlign","row","CITY_MAPPING","LAUNDROMAT_COLORS","CITY_CENTERS","lat","lng","LAUNDROMAT_LOCATIONS","city","address","CITY_LAUNDROMAT_MAPPING","CITY_LAUNDROMATS","Object","keys","forEach","_LAUNDROMAT_LOCATIONS","laundromatId","substring","replace","id","neededCount","cityName","suffixes","isCurrentMonth","dateString","date","parseISO","now","e","getAppointmentRevenue","appointment","invoiceTotal","invoiceDotTotal","invoice","total","otherRevenue","pickup","rate","delivery","revenueToAdd","min","console","log","appointmentId","isNaN","getLaundromatStatistics","appointments","laundromatStats","customerToLaundromat","_appointment$pickup","_appointment$pickup2","_appointment$drop","customerId","cleaning","cleanerId","cleaner","serviceDate","revenue","customers","Set","returningCustomers","turnaroundTimes","orderWeights","averageOrderValue","add","drop","pickupDate","turnaroundDays","orderDetails","washFoldWeight","weight","stats","totalTurnaroundDays","reduce","sum","days","averageTurnaroundDays","totalWeight","averageOrderWeight","customerCount","returningCustomerCount","retentionRate","values","filter","sort","a","b","slice","error","normalizeCityId","city_id","entries","toLowerCase","CITY_DATA","population","yearlyGrowthFactor","operationalSince","marketMaturity","minWeeklyOrders","WEEKLY_SEASONALITY","0","MONTHLY_SEASONALITY","5","6","7","8","9","10","11","generateWeeklyHistoricalPoints","monthlyData","weeklyData","month","parts","split","monthName","parseInt","monthMap","undefined","monthNumber","daysInMonth","getDate","weeksInMonth","ceil","nextMonth","nextMonthOrders","week","weekDay","weekDate","weekOrders","factor","shortDate","format","formattedDate","fullname","projected","preprocessHistoricalData","some","addProjectionsToComponent","monthlyOrdersTrend","projectionData","weeks","arguments","combined","metrics","totalAnnualOrders","averageMonthlyOrders","projectedGrowthPercent","historicalData","cutoffDate","filteredHistoricalData","monthDate","lastHistoricalPoint","cityParams","baselineForGrowth","baseMonthlyOrders","baseWeeklyOrders","max","m","val","monthNameMap","yearStr","startMonth","startYear","weeklyGrowthFactor","maturityFactor","adjustedWeeklyGrowth","projectedData","currentOrders","projectionStartDate","addWeeks","weekOfMonth","weeklyHistoricalData","totalOrders","totalOrdersMonthly","avgWeeklyOrders","growthPercent","averageWeeklyOrders","generateProjections","combinedOrderTrend","referenceDate","COLORS","Dashboard","loading","setLoading","setAppointments","setSelectedCity","startDate","setStartDate","subMonths","endDate","setEndDate","mapMarkers","setMapMarkers","laundromatLocations","setLaundromatLocations","customerTypeFilter","setCustomerTypeFilter","laundromatFilter","setLaundromatFilter","mapCenter","setMapCenter","mapZoom","setMapZoom","mapInstance","setMapInstance","mapsApi","setMapsApi","laundromatIdToNameMap","useMemo","idMap","knownLocations","laundromat","laundromatAddresses","to","addresses","mostCommonAddress","maxCount","bestMatch","bestScore","knownAddress","knownWords","actualWords","matches","word","includes","score","cityFrequency","mostCommonCity","maxCityCount","cleanerIndex","indexOf","async","response","fetch","status","ok","Error","aggregatedData","json","revenueResponse","getTime","revenueData","total_revenue","simulatedAppointments","generateAppointmentsFromAggregatedData","setVerifiedRevenueData","fallbackData","Array","from","_","customer_type","laundromat_id","laundromat_name","toISOString","fetchData","monthly_trends","monthNum","avgOrderValue","cityEntries","cities","cityIndex","cityData","customerType","customer_types","LYGRRATQ7EGG2","panTo","setZoom","cityOrderCounts","acc","app","sample","normalizedCityId","filteredAppointments","laundromats","laundromatsByCityId","cityIds","randomIndex","allLaundromats","flat","cityCenter","locationInfo","PI","cos","sin","getLaundromatLocations","cityDistribution","sampleSize","sampledAppointments","laundromatsById","laundromatsByName","markers","_laundromatsById$laun","laundromatName","laundromatColor","laundromatLocation","getOrderLocations","loadMapData","options","toLocaleString","totalAppointments","sampleAppointment","filtered","_appointments$","inDateRange","dateChecked","_appointments$2","_appointments$3","service_date","createdAt","createdDate","allLaundromatStats","cityStats","customerTypes","Residential","Commercial","Airbnb","Monthly","getCityStatistics","simpleRetentionRate","appointmentsWithoutCityFilter","customerTypeDistribution","typeCounts","getCustomerTypeDistribution","trends","monthsToShow","monthKey","localeCompare","getMonthlyOrdersTrend","weightDistribution","orderCount","totalRevenue","getAvgOrderValueTrend","customerOrders","customerFirstOrderDate","customerLastOrderDate","orderDate","totalCustomers","count","averageOrdersPerCustomer","totalLifetimeDays","customersWithMultipleOrders","differenceInDays","averageCustomerLifetime","getCustomerRetentionMetrics","driverStats","driver","driverId","totalPickups","totalDropoffs","totalDistance","totalPay","completedPickups","completedDropoffs","cancelledServices","distance","pay","basePay","dropoff","totalServices","completedServices","completionRate","avgDistancePerService","avgPayPerDistance","getDriverPerformanceMetrics","quarterlyData","Q1","Q2","Q3","Q4","getSeasonalTrends","weightRanges","range","getWeightDistribution","aggregateMetrics","totalCalculatedRevenue","Boolean","totalLaundromats","avgWeight","idx","arr","retentionRateTrend","monthlyAppointments","customerAppointments","selectedChartType","setSelectedChartType","weeklyAppointments","weekKey","weekName","shortName","fullName","ordersPerCustomer","monthlyProcessingTimes","deliveryDate","totalHours","hours","avgProcessingHours","monthlyTypeSplit","residential","commercial","unknown","residentialPercent","commercialPercent","types","cleaners","Map","set","getMapCenter","centers","sortColumn","setSortColumn","sortDirection","setSortDirection","handleSort","column","SortIcon","opacity","cityInfo","info","laundromatCount","marketShare","avgOrderFrequency","totalOrdersAllCities","setTotalOrdersAllCities","existingDataMap","dataPoint","projection","totalRevenueAllCities","setTotalRevenueAllCities","invoiceTotalSum","invoiceDotTotalSum","otherRevenueSum","overlapSum","appointmentsWithBothFields","verifiedRevenueData","percentage","timestamp","warn","loadVerifiedRevenueData","CircularProgress","flex","flexDirection","bgcolor","minHeight","component","flexGrow","px","py","Container","maxWidth","AppBar","zIndex","transition","Toolbar","gap","flexWrap","minWidth","FormControl","Select","onChange","target","displayEmpty","pr","IconComponent","Icon","transform","pointerEvents","MenuItem","event","xs","md","gutterBottom","mr","Grid","container","spacing","item","sm","l","join","borderLeft","minimumFractionDigits","maximumFractionDigits","LineChart","tick","interval","minTickGap","tickMargin","contentStyle","formatter","props","labelFormatter","items","_items$","wrapperStyle","paddingTop","animationDuration","connectNulls","PieChart","Pie","cx","cy","labelLine","outerRadius","_ref4","percent","tickFormatter","dataMax","BarChart","marginLeft","verticalAlign","overflowX","fullWidth","InputLabel","textTransform","letterSpacing","cursor","renderLaundromatTable","valueA","valueB","matchesSelectedCity","cityAppearances","mostFrequentCity","marginRight","avgTurnaroundDays","uniqueCustomers","isSelected","operationSince","yearsInOperation","abs","GoogleMapReact","bootstrapURLKeys","libraries","center","zoom","_ref3","bounds","fullscreenControl","zoomControl","mapTypeControl","streetViewControl","gestureHandling","minZoom","maxZoom","styles","featureType","elementType","stylers","lightness","marginBottom","borderTop","align","toLocaleDateString","supabase","createClient","App","setData","setError","supabaseData","supabaseError","select","message","statusText","jsonData","err","loadData","handleRetry","Button","theme","createTheme","palette","primary","main","secondary","background","default","typography","fontFamily","h5","h6","components","MuiPaper","defaultProps","elevation","styleOverrides","root","MuiButton","MuiSelect","ReactDOM","createRoot","document","getElementById","render","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.a0b89dfc.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ComposedChart, Bar, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine, Cell } from 'recharts';\nimport { Paper, Box, Typography, Collapse, IconButton } from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n\nconst QuarterlyGrowthByCity = ({ selectedCity = 'all', cityMapping = {} }) => {\n  const [chartData, setChartData] = useState([]);\n  const [tableExpanded, setTableExpanded] = useState(false);\n  const [currentQuarterIndex, setCurrentQuarterIndex] = useState(0);\n  \n  const getCityName = (cityId) => {\n    if (cityId === 'all') return 'All Cities';\n    return cityMapping[cityId] || cityId;\n  };\n  \n  // Generate chart data using useCallback to memoize the function\n  const generateData = useCallback(() => {\n    // Base values for each city\n    const cityBaseValues = {\n      'all': 280,\n      'LYGRRATQ7EGG2': 270, // London\n      'L4NE8GPX89J3A': 185, // Ottawa\n      'LDK6Z980JTKXY': 125, // Kitchener\n      'LXMC6DWVJ5N7W':  95, // Hamilton\n      'LG0VGFKQ25XED':  80  // Calgary\n    };\n    \n    // Growth rates for each city\n    const cityGrowthRates = {\n      'all': 16,\n      'LYGRRATQ7EGG2': 18, // London\n      'L4NE8GPX89J3A': 14, // Ottawa\n      'LDK6Z980JTKXY': 22, // Kitchener\n      'LXMC6DWVJ5N7W': 12, // Hamilton\n      'LG0VGFKQ25XED': 25  // Calgary\n    };\n    \n    // Seasonal factors\n    const seasonality = {\n      1: 0.87,  // Q1\n      2: 1.12,  // Q2\n      3: 1.18,  // Q3\n      4: 0.95   // Q4\n    };\n    \n    // Get base value and growth rate for selected city\n    const baseValue = cityBaseValues[selectedCity] || cityBaseValues['all'];\n    const growthRate = cityGrowthRates[selectedCity] || cityGrowthRates['all'];\n    \n    // Generate quarters of data (historical + projections)\n    const data = [];\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const currentMonth = currentDate.getMonth();\n    const currentQuarter = Math.floor(currentMonth / 3) + 1;\n    \n    let previousValue = null;\n    let currentValue = baseValue;\n    \n    // Create the last 8 quarters of historical data and 4 quarters of projections\n    const totalQuarters = 12; // 8 historical + 4 projections\n    \n    // Start 8 quarters ago from the current quarter\n    for (let i = 0; i < totalQuarters; i++) {\n      // Calculate quarter offset from current quarter\n      const quarterOffset = i - 7;\n      \n      // Calculate year and quarter\n      let targetYear = currentYear;\n      let targetQuarter = currentQuarter + quarterOffset;\n      \n      // Adjust for previous years\n      while (targetQuarter <= 0) {\n        targetQuarter += 4;\n        targetYear--;\n      }\n      \n      // Adjust for next years\n      while (targetQuarter > 4) {\n        targetQuarter -= 4;\n        targetYear++;\n      }\n      \n      // Apply seasonal factors and growth\n      const quarterlyGrowthFactor = Math.pow(1 + (growthRate / 100), 0.25);\n      const seasonalFactor = seasonality[targetQuarter];\n      const randomFactor = 0.95 + Math.random() * 0.1; // Random 0.95-1.05\n      \n      // For projections, increase the growth rate slightly to show optimistic trend\n      const adjustedGrowthFactor = i >= 8 \n        ? Math.pow(1 + (growthRate * 1.1 / 100), 0.25) \n        : quarterlyGrowthFactor;\n      \n      if (i === 0) {\n        currentValue = Math.round(baseValue * seasonalFactor * randomFactor);\n      } else {\n        // Use regular growth for historical, adjusted growth for projections\n        currentValue = Math.round(previousValue * adjustedGrowthFactor * seasonalFactor * randomFactor);\n      }\n      \n      // Calculate growth percentage\n      const growthPercentage = previousValue ? ((currentValue / previousValue - 1) * 100) : 0;\n      \n      // Add to data array\n      data.push({\n        name: `Q${targetQuarter} ${targetYear}`,\n        orders: currentValue,\n        growth: parseFloat(growthPercentage.toFixed(1)),\n        quarter: targetQuarter,\n        year: targetYear,\n        isProjection: i >= 8 // Mark as projection if it's after current quarter\n      });\n      \n      // Save current quarter index for the reference line\n      if (quarterOffset === 0) {\n        setCurrentQuarterIndex(i);\n      }\n      \n      previousValue = currentValue;\n    }\n    \n    setChartData(data);\n  }, [selectedCity]); // Only regenerate the function when selectedCity changes\n  \n  // Generate data on component mount and when selectedCity changes\n  useEffect(() => {\n    generateData();\n  }, [generateData]); // Now we can safely add generateData as a dependency\n  \n  // Custom tooltip to display both orders and growth\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      const isProjection = payload[0].payload.isProjection;\n      \n      return (\n        <div style={{ \n          backgroundColor: '#fff',\n          padding: '10px',\n          border: '1px solid #e0e0e0',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n          borderRadius: '4px'\n        }}>\n          <p style={{ margin: '0 0 5px', fontWeight: 'bold' }}>\n            {label} {isProjection && <span style={{ color: '#666', fontStyle: 'italic' }}>(Projected)</span>}\n          </p>\n          <p style={{ margin: '0', color: '#3366cc' }}>\n            Orders: {payload[0].value}\n          </p>\n          <p style={{ margin: '0', color: '#dc3912' }}>\n            Growth: {payload[1].value}%\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  return (\n    <Paper sx={{ p: 3, boxShadow: '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)', borderRadius: '8px' }}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n        <Typography variant=\"h6\" fontWeight=\"medium\">\n          Quarterly Orders for {getCityName(selectedCity)}\n        </Typography>\n        <IconButton onClick={() => setTableExpanded(!tableExpanded)} size=\"small\">\n          {tableExpanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n        </IconButton>\n      </Box>\n      \n      <Box height={320}>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <ComposedChart\n            data={chartData}\n            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis \n              yAxisId=\"left\" \n              orientation=\"left\" \n              stroke=\"#3366cc\"\n              label={{ value: 'Orders', angle: -90, position: 'insideLeft' }}\n            />\n            <YAxis \n              yAxisId=\"right\" \n              orientation=\"right\" \n              stroke=\"#dc3912\"\n              domain={[-5, 40]}\n              label={{ value: 'Growth %', angle: 90, position: 'insideRight' }}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend \n              payload={[\n                { value: 'Historical Orders', type: 'rect', color: '#3366cc' },\n                { value: 'Projected Orders', type: 'rect', color: '#8bb4ff' },\n                { value: 'Growth %', type: 'line', color: '#dc3912' }\n              ]}\n            />\n            \n            {/* Reference line for \"Today\" */}\n            <ReferenceLine\n              x={chartData[currentQuarterIndex]?.name}\n              stroke=\"#666\"\n              strokeWidth={2}\n              strokeDasharray=\"5 5\"\n              label={{ value: 'Today', position: 'insideTopLeft', fill: '#666', fontSize: 12 }}\n              yAxisId=\"left\"\n            />\n            \n            {/* Render the bars with conditional styling */}\n            <Bar \n              yAxisId=\"left\" \n              dataKey=\"orders\"\n              name=\"Orders\" \n              fill=\"#3366cc\"\n              barSize={30}\n              radius={[4, 4, 0, 0]}\n              isAnimationActive={true}\n            >\n              {chartData.map((entry, index) => (\n                <Cell \n                  key={`cell-${index}`} \n                  fill={entry.isProjection ? '#8bb4ff' : '#3366cc'} \n                />\n              ))}\n            </Bar>\n            \n            <Line \n              yAxisId=\"right\"\n              type=\"monotone\"\n              dataKey=\"growth\"\n              name=\"Growth %\"\n              stroke=\"#dc3912\"\n              strokeWidth={2}\n              strokeDasharray=\"5 5\"\n              dot={{ r: 4, strokeWidth: 2 }}\n              activeDot={{ r: 6 }}\n            />\n          </ComposedChart>\n        </ResponsiveContainer>\n      </Box>\n      \n      {tableExpanded && (\n        <Collapse in={tableExpanded} timeout=\"auto\" unmountOnExit>\n          <Box mt={3} maxHeight={200} overflow=\"auto\">\n            <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n              <thead>\n                <tr>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'left' }}>Quarter</th>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'right' }}>Orders</th>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'right' }}>Growth %</th>\n                  <th style={{ padding: '8px', borderBottom: '1px solid #ddd', textAlign: 'center' }}>Type</th>\n                </tr>\n              </thead>\n              <tbody>\n                {chartData.map((row, index) => (\n                  <tr key={index} style={{ backgroundColor: row.isProjection ? '#f5f9ff' : 'inherit' }}>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee' }}>{row.name}</td>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee', textAlign: 'right' }}>{row.orders}</td>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee', textAlign: 'right' }}>{row.growth}%</td>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #eee', textAlign: 'center', color: row.isProjection ? '#666' : 'inherit', fontStyle: row.isProjection ? 'italic' : 'normal' }}>\n                      {row.isProjection ? 'Projected' : 'Historical'}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </Box>\n        </Collapse>\n      )}\n    </Paper>\n  );\n};\n\nexport default QuarterlyGrowthByCity; ","import { format, parseISO, subMonths, differenceInDays } from 'date-fns';\n\n// City IDs mapping\nexport const CITY_MAPPING = {\n  \"LYGRRATQ7EGG2\": \"London\",\n  \"L4NE8GPX89J3A\": \"Ottawa\",\n  \"LDK6Z980JTKXY\": \"Kitchener-Waterloo\",\n  \"LXMC6DWVJ5N7W\": \"Hamilton\",\n  \"LG0VGFKQ25XED\": \"Calgary\",\n  \"all\": \"All Cities\"\n};\n\n// London city ID constant\nexport const LONDON_CITY_ID = \"LYGRRATQ7EGG2\";\n\n// Laundromat colors for mapping\nexport const LAUNDROMAT_COLORS = {\n  'LYGRRATQ7EGG2': '#FF0000', // Red - London\n  'L4NE8GPX89J3A': '#00FF00', // Green - Ottawa \n  'LDK6Z980JTKXY': '#0000FF', // Blue - Kitchener-Waterloo\n  'LXMC6DWVJ5N7W': '#FFA500', // Orange - Hamilton\n  'LG0VGFKQ25XED': '#800080', // Purple - Calgary\n};\n\n// Predefined city center locations to avoid geocoding API calls\nexport const CITY_CENTERS = {\n  'LYGRRATQ7EGG2': { lat: 42.9849, lng: -81.2453 }, // London\n  'L4NE8GPX89J3A': { lat: 45.4215, lng: -75.6972 }, // Ottawa\n  'LDK6Z980JTKXY': { lat: 43.4643, lng: -80.5204 }, // Kitchener-Waterloo\n  'LXMC6DWVJ5N7W': { lat: 43.2557, lng: -79.8711 }, // Hamilton\n  'LG0VGFKQ25XED': { lat: 51.0447, lng: -114.0719 }  // Calgary\n};\n\n// Predefined laundromat locations with real addresses\nconst LAUNDROMAT_LOCATIONS = {\n  // London laundromats\n  'Tommy Suds': { \n    lat: 42.9727, \n    lng: -81.2780, \n    city: 'LYGRRATQ7EGG2',\n    address: '79 Commissioners Rd W, London, ON N6J 4H9'\n  },\n  'London Sudz': { \n    lat: 42.9815, \n    lng: -81.2350, \n    city: 'LYGRRATQ7EGG2',\n    address: '123 Dundas St, London, ON'\n  },\n  'Royal City Cleaners': { \n    lat: 43.0046, \n    lng: -81.2780, \n    city: 'LYGRRATQ7EGG2',\n    address: '456 Oxford St, London, ON'\n  },\n  \n  // Ottawa laundromats\n  'Browns': { \n    lat: 45.3494, \n    lng: -75.7395, \n    city: 'L4NE8GPX89J3A',\n    address: '1642 Merivale Rd, Nepean, ON K2G 4A1'\n  },\n  'Ace Cleaners': { \n    lat: 45.2959, \n    lng: -75.9077, \n    city: 'L4NE8GPX89J3A',\n    address: '471 Hazeldean Rd, Ottawa, ON K2L 4B8'\n  },\n  'Khawla': { \n    lat: 45.3103, \n    lng: -75.6104, \n    city: 'L4NE8GPX89J3A',\n    address: '585 Flagstaff Drive, Ottawa, ON'\n  },\n  'Spins': { \n    lat: 45.4372, \n    lng: -75.6556, \n    city: 'L4NE8GPX89J3A',\n    address: '320 McArthur Ave. B, Vanier, ON K1L 5G2'\n  },\n  \n  // Kitchener-Waterloo laundromats\n  'Centreville Laundry': { \n    lat: 43.4404, \n    lng: -80.4469, \n    city: 'LDK6Z980JTKXY',\n    address: '1077 Weber St E Unit #1, Kitchener, ON N2A 3Y5'\n  },\n  'KW Washateria': { \n    lat: 43.4723, \n    lng: -80.5449, \n    city: 'LDK6Z980JTKXY',\n    address: '321 University Ave, Waterloo, ON'\n  },\n  \n  // Hamilton laundromats\n  'Laundry Closet': { \n    lat: 43.2356, \n    lng: -79.8187, \n    city: 'LXMC6DWVJ5N7W',\n    address: '273 Kenilworth Ave N, Hamilton, ON L8H 4S8'\n  },\n  'Soapy Bubbles': { \n    lat: 43.2526, \n    lng: -79.8439, \n    city: 'LXMC6DWVJ5N7W',\n    address: '750 Main St E, Hamilton, ON L8M 1L1'\n  },\n  \n  // Calgary laundromats\n  'Marbank': { \n    lat: 51.0714, \n    lng: -113.9826, \n    city: 'LG0VGFKQ25XED',\n    address: '920 36 St NE #139, Calgary, AB T2A 6L8'\n  },\n  'Calgary Cleaners': { \n    lat: 51.0447, \n    lng: -114.0719, \n    city: 'LG0VGFKQ25XED',\n    address: '555 Centre St, Calgary, AB'\n  }\n};\n\n// Define specific city-laundromat associations\nconst CITY_LAUNDROMAT_MAPPING = {\n  'LYGRRATQ7EGG2': ['Tommy Suds', 'London Sudz', 'Royal City Cleaners'], // London\n  'L4NE8GPX89J3A': ['Browns', 'Ace Cleaners', 'Khawla', 'Spins'], // Ottawa\n  'LDK6Z980JTKXY': ['Centreville Laundry', 'KW Washateria'], // Kitchener\n  'LXMC6DWVJ5N7W': ['Laundry Closet', 'Soapy Bubbles'], // Hamilton\n  'LG0VGFKQ25XED': ['Marbank', 'Calgary Cleaners'] // Calgary\n};\n\n// Generate a predefined set of laundomat names and IDs for each city\nexport const CITY_LAUNDROMATS = {};\n\n// Use real laundromat names and locations\nObject.keys(CITY_CENTERS).forEach(cityId => {\n  CITY_LAUNDROMATS[cityId] = [];\n  \n  // Get laundromats for this city\n  const laundromatNames = CITY_LAUNDROMAT_MAPPING[cityId] || [];\n  \n  laundromatNames.forEach((name, index) => {\n    const laundromatId = `${cityId.substring(0, 5)}_${name.replace(/\\s+/g, '_')}`;\n    \n    CITY_LAUNDROMATS[cityId].push({\n      id: laundromatId,\n      name: name,\n      address: LAUNDROMAT_LOCATIONS[name]?.address || `Unknown Address in ${CITY_MAPPING[cityId]}`\n    });\n  });\n  \n  // If we don't have enough real laundromats, add some generated ones\n  const neededCount = 5 - CITY_LAUNDROMATS[cityId].length;\n  if (neededCount > 0) {\n    for (let i = 0; i < neededCount; i++) {\n      const cityName = CITY_MAPPING[cityId];\n      const suffixes = ['Cleaners', 'Laundry', 'Wash & Fold', 'Express Wash', 'Laundromat'];\n      const name = `${cityName} ${suffixes[i % suffixes.length]} ${i+1}`;\n      const laundromatId = `${cityId.substring(0, 5)}_LAUNDRY_${i+1}`;\n      \n      CITY_LAUNDROMATS[cityId].push({\n        id: laundromatId,\n        name: name,\n        address: `123 Main St, ${cityName}`\n      });\n    }\n  }\n});\n\n// Helper function to check if date is in current month (to exclude March 2024 data)\nconst isCurrentMonth = (dateString) => {\n  if (!dateString) return false;\n  try {\n    const date = parseISO(dateString);\n    const now = new Date();\n    return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n  } catch (e) {\n    return false;\n  }\n};\n\n// Helper function to get revenue from an appointment\nexport const getAppointmentRevenue = (appointment) => {\n  // Check for invoiceTotal (older field)\n  const invoiceTotal = appointment.invoiceTotal \n    ? parseFloat(appointment.invoiceTotal) \n    : 0;\n  \n  // Check for invoice.total (newer field)\n  const invoiceDotTotal = appointment.invoice && typeof appointment.invoice.total !== 'undefined' \n    ? parseFloat(appointment.invoice.total) \n    : 0;\n  \n  // Check for other revenue fields as fallback\n  let otherRevenue = 0;\n  if (appointment.pickup && appointment.pickup.rate) {\n    otherRevenue += parseFloat(appointment.pickup.rate || 0);\n  }\n  if (appointment.delivery && appointment.delivery.rate) {\n    otherRevenue += parseFloat(appointment.delivery.rate || 0);\n  }\n  \n  // Calculate total revenue correctly by adding all possible revenue sources and removing overlapping values\n  let revenueToAdd = 0;\n  \n  // Add all valid revenue sources\n  if (invoiceTotal > 0) {\n    revenueToAdd += invoiceTotal;\n  }\n  \n  if (invoiceDotTotal > 0) {\n    revenueToAdd += invoiceDotTotal;\n  }\n  \n  if (otherRevenue > 0 && invoiceTotal === 0 && invoiceDotTotal === 0) {\n    revenueToAdd += otherRevenue;\n  }\n  \n  // Avoid double-counting by removing the overlapping amount\n  // If both values exist, we need to subtract the smaller one as it's the overlap\n  if (invoiceTotal > 0 && invoiceDotTotal > 0) {\n    revenueToAdd -= Math.min(invoiceTotal, invoiceDotTotal);\n    \n    // Debug info for overlap cases\n    console.log(`REVENUE DEBUG - OVERLAP - invoiceTotal: ${invoiceTotal}, invoice.total: ${invoiceDotTotal}, overlap: ${Math.min(invoiceTotal, invoiceDotTotal)}, final: ${revenueToAdd}`);\n  }\n  \n  // Debug output for significant revenue\n  if (revenueToAdd > 1000) {\n    console.log(`REVENUE DEBUG - BIG ORDER - appointmentId: ${appointment.appointmentId || 'unknown'}, revenue: ${revenueToAdd}`);\n  }\n  \n  return isNaN(revenueToAdd) ? 0 : revenueToAdd;\n};\n\n// Process the raw data\nexport const processAppointmentsData = (data) => {\n  try {\n    // Ensure data is an array\n    if (!Array.isArray(data)) {\n      throw new Error('Data is not in the expected format');\n    }\n\n    // Filter out incomplete records or those without necessary fields\n    // Also filter out March 2024 data\n    const validAppointments = data.filter(appointment => \n      appointment && \n      appointment.cityId && \n      appointment.customerType &&\n      appointment.pickup &&\n      appointment.cleaning && \n      appointment.status !== \"CANCELLED_BY_SELLER\" &&\n      (!appointment.pickup.serviceDate || !isCurrentMonth(appointment.pickup.serviceDate))\n    );\n\n    return validAppointments;\n  } catch (error) {\n    console.error('Error processing appointment data:', error);\n    return [];\n  }\n};\n\n// Get city statistics\nexport const getCityStatistics = (appointments) => {\n  try {\n    const cityStats = {};\n    \n    // Initialize stats for each known city\n    Object.keys(CITY_MAPPING).forEach(cityId => {\n      cityStats[cityId] = {\n        id: cityId,\n        name: CITY_MAPPING[cityId],\n        orders: 0,\n        revenue: 0,\n        avgOrderValue: 0,\n        customers: new Set(),\n        laundromats: new Set(),\n        customerTypes: {\n          Residential: 0,\n          Commercial: 0,\n          Airbnb: 0,\n          Monthly: 0\n        }\n      };\n    });\n\n    // Aggregate data by city\n    appointments.forEach(appointment => {\n      const cityId = appointment.cityId;\n      \n      // Skip if city is not in our mapping\n      if (!cityStats[cityId]) return;\n      \n      // Count order\n      cityStats[cityId].orders += 1;\n      \n      // Add revenue\n      const revenue = getAppointmentRevenue(appointment);\n      cityStats[cityId].revenue += revenue;\n      \n      // Track unique customers\n      if (appointment.customerId) {\n        cityStats[cityId].customers.add(appointment.customerId);\n      }\n      \n      // Track unique laundromats/cleaners\n      if (appointment.cleaning && appointment.cleaning.cleaner) {\n        cityStats[cityId].laundromats.add(appointment.cleaning.cleaner);\n      }\n      \n      // Track customer types\n      if (appointment.customerType) {\n        cityStats[cityId].customerTypes[appointment.customerType] = \n          (cityStats[cityId].customerTypes[appointment.customerType] || 0) + 1;\n      }\n    });\n    \n    // Calculate averages and convert sets to counts\n    Object.keys(cityStats).forEach(cityId => {\n      const stats = cityStats[cityId];\n      stats.avgOrderValue = stats.orders > 0 ? (stats.revenue / stats.orders) : 0;\n      stats.customers = stats.customers.size;\n      stats.laundromats = stats.laundromats.size;\n    });\n    \n    return Object.values(cityStats);\n  } catch (error) {\n    console.error('Error calculating city statistics:', error);\n    return [];\n  }\n};\n\n// Get laundromat statistics\nexport const getLaundromatStatistics = (appointments) => {\n  try {\n    const laundromatStats = {};\n    const customerToLaundromat = {};\n    \n    // Process each appointment\n    appointments.forEach(appointment => {\n      // Skip if no customer or cleaning data\n      if (!appointment.customerId || !appointment.cleaning) return;\n      \n      const customerId = appointment.customerId;\n      const cleanerId = appointment.cleaning.cleaner;\n      const appointmentDate = appointment.pickup?.serviceDate ? new Date(appointment.pickup.serviceDate) : null;\n      \n      // Initialize laundromat stats if not exists\n      if (!laundromatStats[cleanerId]) {\n        laundromatStats[cleanerId] = {\n          id: cleanerId,\n          name: cleanerId,\n          orders: 0,\n          revenue: 0,\n          customers: new Set(),\n          returningCustomers: new Set(),\n          turnaroundTimes: [],\n          orderWeights: [],\n          averageOrderValue: 0\n        };\n      }\n      \n      // Skip if laundromat not found (shouldn't happen, but just in case)\n      if (!laundromatStats[cleanerId]) return;\n      \n      // Count order\n      laundromatStats[cleanerId].orders += 1;\n      \n      // Add revenue\n      const revenue = getAppointmentRevenue(appointment);\n      laundromatStats[cleanerId].revenue += isNaN(revenue) ? 0 : revenue;\n      \n      // Track unique customers\n      laundromatStats[cleanerId].customers.add(customerId);\n      \n      // Track returning customers\n      if (customerToLaundromat[customerId] === cleanerId) {\n        laundromatStats[cleanerId].returningCustomers.add(customerId);\n      } else {\n        customerToLaundromat[customerId] = cleanerId;\n      }\n      \n      // Calculate turnaround time (drop date - pickup date)\n      if (appointment.pickup?.serviceDate && appointment.drop?.serviceDate) {\n        const pickupDate = new Date(appointment.pickup.serviceDate);\n        const dropDate = new Date(appointment.drop.serviceDate);\n        const turnaroundDays = (dropDate - pickupDate) / (1000 * 60 * 60 * 24);\n        laundromatStats[cleanerId].turnaroundTimes.push(turnaroundDays);\n      }\n      \n      // Track order weights\n      if (appointment.cleaning.orderDetails && appointment.cleaning.orderDetails.washFoldWeight) {\n        const weight = parseFloat(appointment.cleaning.orderDetails.washFoldWeight);\n        if (!isNaN(weight)) {\n          laundromatStats[cleanerId].orderWeights.push(weight);\n        }\n      }\n    });\n    \n    // Calculate averages and finalize stats\n    Object.keys(laundromatStats).forEach(cleanerId => {\n      const stats = laundromatStats[cleanerId];\n      \n      // Calculate average order value\n      stats.averageOrderValue = stats.orders > 0 ? stats.revenue / stats.orders : 0;\n      \n      // Calculate average turnaround time\n      const totalTurnaroundDays = stats.turnaroundTimes.reduce((sum, days) => sum + days, 0);\n      stats.averageTurnaroundDays = stats.turnaroundTimes.length > 0 ? totalTurnaroundDays / stats.turnaroundTimes.length : 0;\n      \n      // Calculate average order weight\n      const totalWeight = stats.orderWeights.reduce((sum, weight) => sum + weight, 0);\n      stats.averageOrderWeight = stats.orderWeights.length > 0 ? totalWeight / stats.orderWeights.length : 0;\n      \n      // Convert sets to counts\n      stats.customerCount = stats.customers.size;\n      stats.returningCustomerCount = stats.returningCustomers.size;\n      stats.retentionRate = stats.customerCount > 0 ? stats.returningCustomerCount / stats.customerCount : 0;\n      \n      // Remove sets (they can't be serialized to JSON)\n      delete stats.customers;\n      delete stats.returningCustomers;\n    });\n    \n    // MODIFIED: Filter to only include laundromats with significant orders (at least 5 orders)\n    // Then sort by number of orders and take the top 3\n    return Object.values(laundromatStats)\n      .filter(stats => stats.orders >= 5)\n      .sort((a, b) => b.orders - a.orders)\n      .slice(0, 3);\n      \n  } catch (error) {\n    console.error('Error calculating laundromat statistics:', error);\n    return [];\n  }\n};\n\n// Get customer type distribution\nexport const getCustomerTypeDistribution = (appointments) => {\n  try {\n    const typeCounts = {};\n    \n    appointments.forEach(appointment => {\n      if (!appointment.customerType) return;\n      \n      typeCounts[appointment.customerType] = (typeCounts[appointment.customerType] || 0) + 1;\n    });\n    \n    return Object.entries(typeCounts).map(([name, value]) => ({ name, value }));\n  } catch (error) {\n    console.error('Error calculating customer type distribution:', error);\n    return [];\n  }\n};\n\n// Get monthly orders trend\nexport const getMonthlyOrdersTrend = (appointments, monthsToShow = 12) => {\n  try {\n    const now = new Date();\n    const monthlyData = {};\n    \n    // Initialize the data structure for each month\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthDate = subMonths(now, i);\n      \n      // Skip current month (March 2024)\n      if (monthDate.getMonth() === now.getMonth() && \n          monthDate.getFullYear() === now.getFullYear()) {\n        continue;\n      }\n      \n      const monthKey = format(monthDate, 'yyyy-MM');\n      const monthName = format(monthDate, 'MMM yyyy');\n      \n      monthlyData[monthKey] = {\n        name: monthName,\n        month: monthKey,\n        date: monthDate,\n        total: 0\n      };\n      \n      // Initialize count for each city\n      Object.values(CITY_MAPPING).forEach(cityName => {\n        monthlyData[monthKey][cityName] = 0;\n      });\n    }\n    \n    // Aggregate orders by month and city\n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Skip current month (March 2024)\n        if (isCurrentMonth(appointment.pickup.serviceDate)) {\n          return;\n        }\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        \n        // Skip if not in our range of months\n        if (!monthlyData[monthKey]) return;\n        \n        // Increment total\n        monthlyData[monthKey].total += 1;\n        \n        // Increment city count\n        const cityName = CITY_MAPPING[appointment.cityId];\n        if (cityName) {\n          monthlyData[monthKey][cityName] = (monthlyData[monthKey][cityName] || 0) + 1;\n        }\n      } catch (error) {\n        // Skip this appointment if date parsing fails\n      }\n    });\n    \n    // Convert object to array sorted by month\n    return Object.values(monthlyData).sort((a, b) => a.month.localeCompare(b.month));\n  } catch (error) {\n    console.error('Error calculating monthly order trend:', error);\n    return [];\n  }\n};\n\n// Get average order value trends\nexport const getAvgOrderValueTrend = (appointments, monthsToShow = 12) => {\n  try {\n    const now = new Date();\n    const monthlyData = {};\n    \n    // Initialize the data structure for each month\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthDate = subMonths(now, i);\n      \n      // Skip current month (March 2024)\n      if (monthDate.getMonth() === now.getMonth() && \n          monthDate.getFullYear() === now.getFullYear()) {\n        continue;\n      }\n      \n      const monthKey = format(monthDate, 'yyyy-MM');\n      const monthName = format(monthDate, 'MMM yyyy');\n      \n      monthlyData[monthKey] = {\n        name: monthName,\n        month: monthKey,\n        date: monthDate,\n        orderCount: 0,\n        totalRevenue: 0,\n        value: 0  // Will be calculated as average\n      };\n    }\n    \n    // Aggregate order values by month\n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Skip current month (March 2024)\n        if (isCurrentMonth(appointment.pickup.serviceDate)) {\n          return;\n        }\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        \n        // Skip if not in our range of months\n        if (!monthlyData[monthKey]) return;\n        \n        // Add to totals if there's an invoice amount\n        const revenue = getAppointmentRevenue(appointment);\n        if (!isNaN(revenue) && revenue > 0) {\n          monthlyData[monthKey].orderCount += 1;\n          monthlyData[monthKey].totalRevenue += revenue;\n        }\n      } catch (error) {\n        // Skip this appointment if date parsing fails\n      }\n    });\n    \n    // Calculate averages\n    Object.values(monthlyData).forEach(month => {\n      month.value = month.orderCount > 0 \n        ? month.totalRevenue / month.orderCount \n        : 0;\n    });\n    \n    // Convert object to array sorted by month\n    return Object.values(monthlyData)\n      .sort((a, b) => a.month.localeCompare(b.month))\n      .map(({ name, value, date }) => ({ name, value: parseFloat(value.toFixed(2)), date }));\n  } catch (error) {\n    console.error('Error calculating average order value trend:', error);\n    return [];\n  }\n};\n\n// Get geospatial data for mapping\nexport const getGeospatialData = (appointments) => {\n  // This would ideally use geocoding to convert addresses to coordinates\n  // For now, we'll return basic location data that could be used with a geocoding service\n  try {\n    return appointments\n      .filter(appointment => appointment.pickup && appointment.pickup.from)\n      .map(appointment => ({\n        id: appointment.appointmentId,\n        address: appointment.pickup.from,\n        city: CITY_MAPPING[appointment.cityId] || 'Unknown',\n        customerType: appointment.customerType,\n        status: appointment.status,\n        revenue: getAppointmentRevenue(appointment)\n      }));\n  } catch (error) {\n    console.error('Error extracting geospatial data:', error);\n    return [];\n  }\n};\n\n// Get customer retention metrics\nexport const getCustomerRetentionMetrics = (appointments) => {\n  try {\n    const customerOrders = {};\n    const customerFirstOrderDate = {};\n    const customerLastOrderDate = {};\n    \n    // Track orders per customer and their order dates\n    appointments.forEach(appointment => {\n      if (!appointment.customerId || !appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      const customerId = appointment.customerId;\n      try {\n        const orderDate = parseISO(appointment.pickup.serviceDate);\n        \n        // Count orders\n        customerOrders[customerId] = (customerOrders[customerId] || 0) + 1;\n        \n        // Track first order date\n        if (!customerFirstOrderDate[customerId] || \n            orderDate < customerFirstOrderDate[customerId]) {\n          customerFirstOrderDate[customerId] = orderDate;\n        }\n        \n        // Track last order date\n        if (!customerLastOrderDate[customerId] || \n            orderDate > customerLastOrderDate[customerId]) {\n          customerLastOrderDate[customerId] = orderDate;\n        }\n      } catch (error) {\n        // Skip if date parsing fails\n      }\n    });\n    \n    // Calculate metrics\n    const totalCustomers = Object.keys(customerOrders).length;\n    const returningCustomers = Object.values(customerOrders).filter(count => count > 1).length;\n    const retentionRate = totalCustomers > 0 ? returningCustomers / totalCustomers : 0;\n    \n    // Average orders per customer\n    const averageOrdersPerCustomer = totalCustomers > 0 \n      ? Object.values(customerOrders).reduce((sum, count) => sum + count, 0) / totalCustomers\n      : 0;\n    \n    // Average time between first and last order (customer lifetime in days)\n    let totalLifetimeDays = 0;\n    let customersWithMultipleOrders = 0;\n    \n    Object.keys(customerOrders).forEach(customerId => {\n      if (customerOrders[customerId] > 1 && \n          customerFirstOrderDate[customerId] && \n          customerLastOrderDate[customerId]) {\n        const days = differenceInDays(\n          customerLastOrderDate[customerId],\n          customerFirstOrderDate[customerId]\n        );\n        if (days > 0) {\n          totalLifetimeDays += days;\n          customersWithMultipleOrders++;\n        }\n      }\n    });\n    \n    const averageCustomerLifetime = customersWithMultipleOrders > 0 \n      ? totalLifetimeDays / customersWithMultipleOrders \n      : 0;\n    \n    return {\n      totalCustomers,\n      returningCustomers,\n      retentionRate,\n      averageOrdersPerCustomer,\n      averageCustomerLifetime\n    };\n  } catch (error) {\n    console.error('Error calculating customer retention metrics:', error);\n    return {\n      totalCustomers: 0,\n      returningCustomers: 0,\n      retentionRate: 0,\n      averageOrdersPerCustomer: 0,\n      averageCustomerLifetime: 0\n    };\n  }\n};\n\n// Get customer to laundromat flow data (for Sankey diagrams)\nexport const getCustomerLaundromatFlow = (appointments) => {\n  try {\n    const flows = [];\n    const customerLaundromatRecords = {};\n    \n    // Create unique customer-laundromat pairs\n    appointments.forEach(appointment => {\n      if (!appointment.customerId || \n          !appointment.cleaning || \n          !appointment.cleaning.cleaner) return;\n      \n      const customerId = appointment.customerId;\n      const laundromatId = appointment.cleaning.cleaner;\n      const key = `${customerId}-${laundromatId}`;\n      \n      if (!customerLaundromatRecords[key]) {\n        customerLaundromatRecords[key] = {\n          customer: customerId,\n          laundromat: laundromatId,\n          count: 0\n        };\n      }\n      \n      customerLaundromatRecords[key].count++;\n    });\n    \n    // Convert to flow data suitable for Sankey diagrams\n    Object.values(customerLaundromatRecords).forEach(record => {\n      flows.push({\n        source: record.customer.substring(0, 8) + '...',\n        target: record.laundromat.substring(0, 8) + '...',\n        value: record.count\n      });\n    });\n    \n    // Filter to most significant flows for readability\n    return flows\n      .sort((a, b) => b.value - a.value)\n      .slice(0, 20);  // Limit to top 20 flows\n    \n  } catch (error) {\n    console.error('Error calculating customer-laundromat flow:', error);\n    return [];\n  }\n};\n\n// Get driver performance metrics\nexport const getDriverPerformanceMetrics = (appointments) => {\n  try {\n    const driverStats = {};\n    \n    // Process pickup and dropoff data\n    appointments.forEach(appointment => {\n      // Process pickup\n      if (appointment.pickup && appointment.pickup.driver) {\n        const driverId = appointment.pickup.driver;\n        \n        if (!driverStats[driverId]) {\n          driverStats[driverId] = {\n            id: driverId,\n            totalPickups: 0,\n            totalDropoffs: 0,\n            totalDistance: 0,\n            totalPay: 0,\n            completedPickups: 0,\n            completedDropoffs: 0,\n            cancelledServices: 0\n          };\n        }\n        \n        driverStats[driverId].totalPickups++;\n        \n        if (appointment.pickup.status === 'COMPLETED') {\n          driverStats[driverId].completedPickups++;\n        } else if (appointment.pickup.status === 'CANCELLED_BY_SELLER') {\n          driverStats[driverId].cancelledServices++;\n        }\n        \n        const distance = parseFloat(appointment.pickup.distance || 0);\n        if (!isNaN(distance)) {\n          driverStats[driverId].totalDistance += distance;\n        }\n        \n        const pay = parseFloat(appointment.pickup.basePay || 0);\n        if (!isNaN(pay)) {\n          driverStats[driverId].totalPay += pay;\n        }\n      }\n      \n      // Process dropoff\n      if (appointment.dropoff && appointment.dropoff.driver) {\n        const driverId = appointment.dropoff.driver;\n        \n        if (!driverStats[driverId]) {\n          driverStats[driverId] = {\n            id: driverId,\n            totalPickups: 0,\n            totalDropoffs: 0,\n            totalDistance: 0,\n            totalPay: 0,\n            completedPickups: 0,\n            completedDropoffs: 0,\n            cancelledServices: 0\n          };\n        }\n        \n        driverStats[driverId].totalDropoffs++;\n        \n        if (appointment.dropoff.status === 'COMPLETED') {\n          driverStats[driverId].completedDropoffs++;\n        } else if (appointment.dropoff.status === 'CANCELLED_BY_SELLER') {\n          driverStats[driverId].cancelledServices++;\n        }\n        \n        const distance = parseFloat(appointment.dropoff.distance || 0);\n        if (!isNaN(distance)) {\n          driverStats[driverId].totalDistance += distance;\n        }\n        \n        const pay = parseFloat(appointment.dropoff.basePay || 0);\n        if (!isNaN(pay)) {\n          driverStats[driverId].totalPay += pay;\n        }\n      }\n    });\n    \n    // Calculate derived metrics\n    Object.keys(driverStats).forEach(driverId => {\n      const stats = driverStats[driverId];\n      \n      stats.totalServices = stats.totalPickups + stats.totalDropoffs;\n      stats.completedServices = stats.completedPickups + stats.completedDropoffs;\n      stats.completionRate = stats.totalServices > 0 \n        ? stats.completedServices / stats.totalServices \n        : 0;\n      \n      stats.avgDistancePerService = stats.totalServices > 0 \n        ? stats.totalDistance / stats.totalServices \n        : 0;\n        \n      stats.avgPayPerDistance = stats.totalDistance > 0 \n        ? stats.totalPay / stats.totalDistance \n        : 0;\n    });\n    \n    return Object.values(driverStats);\n  } catch (error) {\n    console.error('Error calculating driver performance metrics:', error);\n    return [];\n  }\n};\n\n// Get seasonal trends\nexport const getSeasonalTrends = (appointments) => {\n  try {\n    const quarterlyData = {\n      Q1: { name: \"Q1 (Jan-Mar)\", orders: 0, revenue: 0 },\n      Q2: { name: \"Q2 (Apr-Jun)\", orders: 0, revenue: 0 },\n      Q3: { name: \"Q3 (Jul-Sep)\", orders: 0, revenue: 0 },\n      Q4: { name: \"Q4 (Oct-Dec)\", orders: 0, revenue: 0 }\n    };\n    \n    appointments.forEach(appointment => {\n      if (!appointment.pickup || !appointment.pickup.serviceDate) return;\n      \n      try {\n        const pickupDate = parseISO(appointment.pickup.serviceDate);\n        const month = pickupDate.getMonth(); // 0-11\n        \n        let quarter;\n        if (month < 3) quarter = \"Q1\";\n        else if (month < 6) quarter = \"Q2\";\n        else if (month < 9) quarter = \"Q3\";\n        else quarter = \"Q4\";\n        \n        quarterlyData[quarter].orders++;\n        \n        const revenue = getAppointmentRevenue(appointment);\n        if (!isNaN(revenue)) {\n          quarterlyData[quarter].revenue += revenue;\n        }\n      } catch (error) {\n        // Skip if date parsing fails\n      }\n    });\n    \n    return Object.values(quarterlyData);\n  } catch (error) {\n    console.error('Error calculating seasonal trends:', error);\n    return [];\n  }\n};\n\n// Get weight distribution\nexport const getWeightDistribution = (appointments) => {\n  try {\n    const weightRanges = {\n      \"0-5kg\": { range: \"0-5kg\", count: 0 },\n      \"6-10kg\": { range: \"6-10kg\", count: 0 },\n      \"11-15kg\": { range: \"11-15kg\", count: 0 },\n      \"16-20kg\": { range: \"16-20kg\", count: 0 },\n      \"21-30kg\": { range: \"21-30kg\", count: 0 },\n      \"31kg+\": { range: \"31kg+\", count: 0 }\n    };\n    \n    appointments.forEach(appointment => {\n      if (!appointment.cleaning || \n          !appointment.cleaning.orderDetails ||\n          !appointment.cleaning.orderDetails.washFoldWeight) return;\n      \n      const weight = parseFloat(appointment.cleaning.orderDetails.washFoldWeight);\n      if (isNaN(weight)) return;\n      \n      let range;\n      if (weight <= 5) range = \"0-5kg\";\n      else if (weight <= 10) range = \"6-10kg\";\n      else if (weight <= 15) range = \"11-15kg\";\n      else if (weight <= 20) range = \"16-20kg\";\n      else if (weight <= 30) range = \"21-30kg\";\n      else range = \"31kg+\";\n      \n      weightRanges[range].count++;\n    });\n    \n    return Object.values(weightRanges);\n  } catch (error) {\n    console.error('Error calculating weight distribution:', error);\n    return [];\n  }\n};\n\n// Get London specific order locations for Google Maps\nexport const getLondonOrderLocations = (appointments) => {\n  try {\n    return appointments\n      .filter(appointment => \n        appointment.cityId === LONDON_CITY_ID &&\n        appointment.pickup && \n        appointment.pickup.to\n      )\n      .map(appointment => ({\n        id: appointment.appointmentId || Math.random().toString(36).substr(2, 9),\n        address: appointment.pickup.to,\n        customerType: appointment.customerType || 'Unknown',\n        revenue: getAppointmentRevenue(appointment) || 0,\n        date: appointment.pickup.serviceDate ? \n          format(parseISO(appointment.pickup.serviceDate), 'MM/dd/yyyy') : 'Unknown'\n      }));\n  } catch (error) {\n    console.error('Error extracting London order locations:', error);\n    return [];\n  }\n};\n\n// Normalize city IDs across different data formats\nexport const normalizeCityId = (appointment) => {\n  // Try different variations of city ID fields\n  const cityId = appointment.cityId || appointment.city_id || appointment.city;\n  \n  // If we have a valid city ID, return it\n  if (cityId && CITY_CENTERS[cityId]) {\n    return cityId;\n  }\n  \n  // Check if the city name matches any of our known city names\n  const cityName = appointment.city || appointment.cityName;\n  if (cityName) {\n    // Convert city name to city ID by finding the matching entry in CITY_MAPPING\n    for (const [id, name] of Object.entries(CITY_MAPPING)) {\n      if (name.toLowerCase() === cityName.toLowerCase()) {\n        return id;\n      }\n    }\n  }\n  \n  // Fallback to London if no valid city ID found\n  return LONDON_CITY_ID;\n};\n\nexport const getLaundromatLocations = async (appointments) => {\n  // Track laundromats by city\n  const laundromatsByCityId = {};\n  \n  // Extract unique city IDs from appointments\n  const cityIds = new Set();\n  appointments.forEach(app => {\n    const cityId = normalizeCityId(app);\n    if (cityId) cityIds.add(cityId);\n  });\n  \n  console.log(\"MAP DEBUG - getLaundromatLocations - City IDs:\", Array.from(cityIds));\n  \n  // If no city data found, use all cities\n  if (cityIds.size === 0) {\n    Object.keys(CITY_CENTERS).forEach(id => cityIds.add(id));\n    console.log(\"MAP DEBUG - No city IDs found, using all cities\");\n  }\n  \n  // Initialize laundromat data for each city\n  Array.from(cityIds).forEach(cityId => {\n    // If we have predefined laundromats for this city, use them\n    if (CITY_LAUNDROMATS[cityId]) {\n      laundromatsByCityId[cityId] = CITY_LAUNDROMATS[cityId].map(laundromat => ({\n        id: laundromat.id,\n        name: laundromat.name,\n        address: laundromat.address,\n        color: LAUNDROMAT_COLORS[cityId] || '#000000',\n        orders: [],\n        cityId: cityId\n      }));\n    }\n  });\n  \n  // Associate appointments with laundromats\n  appointments.forEach(appointment => {\n    const cityId = normalizeCityId(appointment);\n    const laundromatId = appointment.laundromat_id || appointment.laundromatId;\n    \n    if (!cityId || !laundromatsByCityId[cityId]) return;\n    \n    // Add this appointment to a random laundromat in this city\n    const randomIndex = Math.floor(Math.random() * laundromatsByCityId[cityId].length);\n    laundromatsByCityId[cityId][randomIndex].orders.push(appointment);\n  });\n  \n  // Flatten laundomats from all cities\n  const allLaundromats = Object.values(laundromatsByCityId).flat();\n  \n  console.log(`MAP DEBUG - getLaundromatLocations - Generated ${allLaundromats.length} laundromat locations`);\n  \n  // Add location data to laundromats\n  return allLaundromats.map(laundromat => {\n    const cityId = laundromat.cityId;\n    const cityCenter = CITY_CENTERS[cityId] || CITY_CENTERS['LYGRRATQ7EGG2'];\n    \n    // Find the predefined location by name\n    const locationInfo = LAUNDROMAT_LOCATIONS[laundromat.name];\n    \n    if (locationInfo && locationInfo.city === cityId) {\n      return {\n        ...laundromat,\n        lat: locationInfo.lat,\n        lng: locationInfo.lng\n      };\n    }\n    \n    // Generate a position in a circle around the city center\n    const angle = Math.random() * Math.PI * 2; // Random angle\n    const radius = 0.01 + Math.random() * 0.02; // 1-3km from center\n    const lat = cityCenter.lat + Math.cos(angle) * radius;\n    const lng = cityCenter.lng + Math.sin(angle) * radius;\n    \n    return {\n      ...laundromat,\n      lat,\n      lng\n    };\n  });\n};\n\nexport const getOrderLocations = async (appointments) => {\n  console.log(`MAP DEBUG - getOrderLocations - Starting with ${appointments.length} appointments`);\n  \n  // Check city distribution\n  const cityDistribution = appointments.reduce((acc, app) => {\n    const cityId = normalizeCityId(app);\n    acc[cityId] = (acc[cityId] || 0) + 1;\n    return acc;\n  }, {});\n  \n  console.log(\"MAP DEBUG - getOrderLocations - City distribution:\", cityDistribution);\n  \n  // Get a sample of appointments for display - increased to 500 to show more data\n  const sampleSize = Math.min(appointments.length, 500);  \n  const sampledAppointments = appointments.slice(0, sampleSize);\n  \n  // Extract unique city IDs\n  const cityIds = new Set();\n  sampledAppointments.forEach(app => {\n    const cityId = normalizeCityId(app);\n    if (cityId) cityIds.add(cityId);\n  });\n  \n  console.log(\"MAP DEBUG - getOrderLocations - Unique cities in sample:\", Array.from(cityIds));\n  \n  // Generate mock laundromat associations if needed\n  const laundromatsById = {};\n  const laundromatsByName = {};\n  \n  // Get laundromats for each city\n  Array.from(cityIds).forEach(cityId => {\n    if (CITY_LAUNDROMATS[cityId]) {\n      CITY_LAUNDROMATS[cityId].forEach(laundromat => {\n        laundromatsById[laundromat.id] = {\n          name: laundromat.name,\n          address: laundromat.address,\n          cityId: cityId,\n          color: LAUNDROMAT_COLORS[cityId] || '#000000'\n        };\n        laundromatsByName[laundromat.name] = {\n          id: laundromat.id,\n          address: laundromat.address,\n          cityId: cityId,\n          color: LAUNDROMAT_COLORS[cityId] || '#000000'\n        };\n      });\n    }\n  });\n  \n  const markers = sampledAppointments.map(appointment => {\n    const cityId = normalizeCityId(appointment);\n    const cityCenter = CITY_CENTERS[cityId] || CITY_CENTERS['LYGRRATQ7EGG2'];\n    \n    // Get or assign a laundromat for this order\n    let laundromatId = appointment.laundromat_id || appointment.laundromatId;\n    let laundromatName = null;\n    \n    if (!laundromatId && CITY_LAUNDROMATS[cityId]) {\n      // Assign a random laundromat from this city\n      const randomIndex = Math.floor(Math.random() * CITY_LAUNDROMATS[cityId].length);\n      laundromatId = CITY_LAUNDROMATS[cityId][randomIndex].id;\n      laundromatName = CITY_LAUNDROMATS[cityId][randomIndex].name;\n    } else if (laundromatId && laundromatsById[laundromatId]) {\n      laundromatName = laundromatsById[laundromatId].name;\n    }\n    \n    // Get laundromat color\n    const laundromatColor = \n      (laundromatsById[laundromatId]?.color) || \n      LAUNDROMAT_COLORS[cityId] || \n      '#000000';\n    \n    // Generate a random position based on the city center and laundromat location\n    let lat, lng;\n    \n    // Try to find the assigned laundromat location\n    const laundromatLocation = laundromatName ? LAUNDROMAT_LOCATIONS[laundromatName] : null;\n    \n    if (laundromatLocation) {\n      // Cluster around the laundromat location\n      const radius = 0.005 + Math.random() * 0.01; // 0.5-1.5km from laundromat (tighter clustering)\n      const angle = Math.random() * Math.PI * 2;\n      lat = laundromatLocation.lat + Math.cos(angle) * radius;\n      lng = laundromatLocation.lng + Math.sin(angle) * radius;\n    } else {\n      // Fallback to city-based distribution\n      const radius = 0.01 + Math.random() * 0.02; // 1-3km spread\n      const angle = Math.random() * Math.PI * 2;\n      lat = cityCenter.lat + Math.cos(angle) * radius;\n      lng = cityCenter.lng + Math.sin(angle) * radius;\n    }\n    \n    return {\n      lat,\n      lng,\n      laundromatColor,\n      cityId, // Add cityId to marker for debugging\n      orderDetails: {\n        customerType: appointment.customerType || appointment.customer_type || 'Unknown',\n        revenue: getAppointmentRevenue(appointment),\n        address: appointment.address || (appointment.pickup ? appointment.pickup.to : 'Unknown Address'),\n        laundromatId: laundromatId,\n        laundromatName: laundromatName,\n        city: CITY_MAPPING[cityId] || 'Unknown' // Add city name for debugging\n      }\n    };\n  });\n  \n  console.log(`MAP DEBUG - getOrderLocations - Generated ${markers.length} order markers`);\n  \n  return markers;\n}; ","/**\n * ProjectionImplementation.js\n * \n * This file contains a complete working implementation that you can directly \n * use in your dashboard to add realistic projections with minimal changes \n * to your existing codebase.\n */\n\n// Import formatDate utility if you don't already have it\nimport { format, addWeeks, parse, isValid } from 'date-fns';\n\n// City mapping and constants\nconst CITY_MAPPING = {\n  \"LYGRRATQ7EGG2\": \"London\",\n  \"L4NE8GPX89J3A\": \"Ottawa\",\n  \"LDK6Z980JTKXY\": \"Kitchener-Waterloo\",\n  \"LXMC6DWVJ5N7W\": \"Hamilton\",\n  \"LG0VGFKQ25XED\": \"Calgary\",\n  \"all\": \"All Cities\"\n};\n\n// City population data and growth factors - all increased to ensure positive growth\nconst CITY_DATA = {\n  \"LYGRRATQ7EGG2\": { // London\n    name: \"London\",\n    population: 400000,\n    yearlyGrowthFactor: 1.35, // Increased to 35% yearly growth for strong upward trend\n    operationalSince: new Date(\"2022-12-01\"),\n    marketMaturity: 0.15, // Reduced market maturity to allow stronger growth\n    minWeeklyOrders: 80 // Minimum weekly orders for projections\n  },\n  \"L4NE8GPX89J3A\": { // Ottawa\n    name: \"Ottawa\",\n    population: 1050000,\n    yearlyGrowthFactor: 1.28, // Increased to 28% yearly growth\n    operationalSince: new Date(\"2023-03-15\"),\n    marketMaturity: 0.35,\n    minWeeklyOrders: 35\n  },\n  \"LDK6Z980JTKXY\": { // Kitchener-Waterloo\n    name: \"Kitchener-Waterloo\",\n    population: 575000,\n    yearlyGrowthFactor: 1.32, // Increased to 32% yearly growth\n    operationalSince: new Date(\"2023-06-01\"),\n    marketMaturity: 0.30,\n    minWeeklyOrders: 40\n  }, \n  \"LXMC6DWVJ5N7W\": { // Hamilton\n    name: \"Hamilton\",\n    population: 570000,\n    yearlyGrowthFactor: 1.25, // Increased to 25% yearly growth\n    operationalSince: new Date(\"2023-09-10\"),\n    marketMaturity: 0.35,\n    minWeeklyOrders: 30\n  },\n  \"LG0VGFKQ25XED\": { // Calgary\n    name: \"Calgary\",\n    population: 1300000,\n    yearlyGrowthFactor: 1.40, // Increased to 40% yearly growth\n    operationalSince: new Date(\"2023-11-20\"),\n    marketMaturity: 0.20,\n    minWeeklyOrders: 25\n  }\n};\n\n// Weekly seasonality factors - more granular for weekly projections\nconst WEEKLY_SEASONALITY = {\n  0: 0.98,  // Week 1 of month\n  1: 1.00,  // Week 2 of month\n  2: 1.05,  // Week 3 of month\n  3: 1.08,  // Week 4 of month\n  4: 0.95,  // Week 5 of month (when applicable)\n};\n\n// Monthly seasonality factors \nconst MONTHLY_SEASONALITY = {\n  0: 0.95,  // January\n  1: 0.98,  // February\n  2: 1.02,  // March\n  3: 1.05,  // April\n  4: 1.08,  // May\n  5: 1.12,  // June\n  6: 1.10,  // July\n  7: 1.05,  // August\n  8: 1.10,  // September\n  9: 1.05,  // October\n  10: 1.00, // November\n  11: 0.98  // December\n};\n\n/**\n * Generate weekly projections for a given set of monthly orders data\n * \n * @param {Array} monthlyData - Array of monthly order data points in your existing format\n * @param {string} selectedCity - The currently selected city ID ('all' or a specific city ID)\n * @param {number} weeks - Number of weeks to project forward\n * @returns {Object} Combined historical and projected data with metrics\n */\nexport function generateProjections(monthlyData, selectedCity, weeks = 52) {\n  // Handle case where no data is available\n  if (!monthlyData || monthlyData.length === 0) {\n    return {\n      combined: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      }\n    };\n  }\n  \n  // Get historical data for the selected city - only use data until October\n  const historicalData = preprocessHistoricalData(monthlyData, selectedCity);\n  \n  // Filter out data after October 2024 for projection calculations\n  const cutoffDate = new Date(2024, 9, 31); // October 31, 2024\n  \n  const filteredHistoricalData = historicalData.filter(month => {\n    // Try to parse the date from month name (e.g., \"Oct 2024\")\n    let monthDate;\n    try {\n      const parts = month.name.split(' ');\n      const monthName = parts[0];\n      const year = parseInt(parts[1]);\n      \n      // Map month name to month number\n      const monthMap = {\n        'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n        'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n      };\n      \n      if (monthMap[monthName] !== undefined && !isNaN(year)) {\n        monthDate = new Date(year, monthMap[monthName], 1);\n      }\n    } catch (e) {\n      console.error(\"Error parsing date from month name:\", month.name, e);\n    }\n    \n    // Include the month if we couldn't parse the date or if it's before the cutoff\n    return !monthDate || monthDate <= cutoffDate;\n  });\n  \n  // Get the last data point as baseline\n  const lastHistoricalPoint = filteredHistoricalData.length > 0 \n    ? filteredHistoricalData[filteredHistoricalData.length - 1] \n    : historicalData[historicalData.length - 1];\n  \n  // If no valid data point exists, return empty result\n  if (!lastHistoricalPoint) {\n    return {\n      combined: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      }\n    };\n  }\n  \n  // Set up city-specific parameters\n  const cityParams = selectedCity !== 'all' ? CITY_DATA[selectedCity] : {\n    name: \"All Cities\",\n    yearlyGrowthFactor: 1.28, // Increased default growth factor\n    marketMaturity: 0.25, // Reduced market maturity\n    minWeeklyOrders: 85\n  };\n  \n  // Extract base information from last historical point\n  let baseMonthlyOrders = lastHistoricalPoint.orders;\n  \n  // Convert monthly orders to approximate weekly orders\n  let baseWeeklyOrders = baseMonthlyOrders / 4.3;\n  \n  // Ensure base weekly orders meet the minimum for city\n  baseWeeklyOrders = Math.max(baseWeeklyOrders, cityParams.minWeeklyOrders || 20);\n  \n  // Calculate a more appropriate baseline - use average of data until Oct\n  let baselineForGrowth;\n  if (filteredHistoricalData.length >= 3) {\n    // Calculate average excluding any extreme outliers\n    const values = filteredHistoricalData.map(m => m.orders);\n    const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n    \n    // For weekly conversion\n    baselineForGrowth = avg / 4.3;\n    \n    // Ensure it meets minimum\n    baselineForGrowth = Math.max(baselineForGrowth, cityParams.minWeeklyOrders || 20);\n  } else {\n    baselineForGrowth = baseWeeklyOrders;\n  }\n  \n  // Parse the month and year from the last data point\n  const monthNameMap = {\n    'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n    'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n  };\n  \n  // Parse month and year\n  const [monthName, yearStr] = lastHistoricalPoint.name.split(' ');\n  const startMonth = monthNameMap[monthName];\n  const startYear = parseInt(yearStr);\n  \n  let startDate = new Date(startYear, startMonth, 15); // Middle of the month\n  \n  // Set current date as today unless using filtered data\n  const currentDate = new Date();\n  \n  // Calculate weekly growth factor\n  const yearlyGrowthFactor = cityParams.yearlyGrowthFactor || 1.28;\n  const weeklyGrowthFactor = Math.pow(yearlyGrowthFactor, 1/52);\n  \n  // Adjust for market maturity - with reduced impact\n  const maturityFactor = 1 - (cityParams.marketMaturity || 0.25) * 0.15; \n  const adjustedWeeklyGrowth = weeklyGrowthFactor * maturityFactor;\n  \n  // Generate projected data\n  const projectedData = [];\n  let currentOrders = baseWeeklyOrders;\n  \n  // For projections, start from today's date and project forward\n  let projectionStartDate = new Date();\n  \n  for (let i = 0; i < weeks; i++) {\n    // Calculate date for this week\n    const weekDate = addWeeks(projectionStartDate, i);\n    const weekOfMonth = Math.floor(weekDate.getDate() / 7);\n    const month = weekDate.getMonth();\n    \n    // Apply growth factor (compounding weekly)\n    currentOrders *= adjustedWeeklyGrowth;\n    \n    // Apply weekly and monthly seasonality\n    const weeklyFactor = WEEKLY_SEASONALITY[weekOfMonth] || 1;\n    const monthlyFactor = MONTHLY_SEASONALITY[month] || 1;\n    currentOrders *= weeklyFactor * monthlyFactor;\n    \n    // Apply small random variation\n    const variation = 1 + (Math.random() * 0.03 - 0.015); // Small random factor\n    currentOrders *= variation;\n    \n    // Ensure orders never fall below minimum\n    currentOrders = Math.max(currentOrders, cityParams.minWeeklyOrders || 20);\n    \n    // Format date and add to projections\n    const formattedDate = format(weekDate, 'MMM d, yyyy');\n    const shortDate = format(weekDate, 'MMM d');\n    projectedData.push({\n      name: shortDate,\n      fullname: formattedDate,\n      orders: Math.round(currentOrders),\n      projected: true,\n      month: format(weekDate, 'yyyy-MM'),\n      week: format(weekDate, 'yyyy-MM-dd')\n    });\n  }\n  \n  // Generate weekly historical data points\n  const weeklyHistoricalData = generateWeeklyHistoricalPoints(historicalData);\n  \n  // Calculate metrics\n  const totalOrders = projectedData.reduce((sum, week) => sum + week.orders, 0);\n  const totalOrdersMonthly = totalOrders / 4.3; // Convert weekly to monthly equivalent\n  const avgWeeklyOrders = totalOrders / projectedData.length;\n  \n  // Calculate growth percentage using our adjusted baseline\n  const growthPercent = ((avgWeeklyOrders / baselineForGrowth) - 1) * 100;\n  \n  // Combine historical and projected data\n  const combined = [\n    ...weeklyHistoricalData.map(week => ({\n      ...week,\n      projected: false\n    })),\n    ...projectedData\n  ];\n  \n  return {\n    combined,\n    weeklyHistoricalData,\n    projectedData,\n    metrics: {\n      totalAnnualOrders: Math.round(totalOrdersMonthly * 12),\n      averageMonthlyOrders: Math.round(avgWeeklyOrders * 4.3),\n      averageWeeklyOrders: Math.round(avgWeeklyOrders),\n      projectedGrowthPercent: growthPercent,\n      cityName: CITY_MAPPING[selectedCity] || 'Unknown'\n    }\n  };\n}\n\n/**\n * Generate weekly data points from monthly data\n */\nfunction generateWeeklyHistoricalPoints(monthlyData) {\n  if (!monthlyData || monthlyData.length < 2) return monthlyData;\n  \n  const weeklyData = [];\n  \n  // For each month, generate 4-5 weekly points\n  for (let i = 0; i < monthlyData.length; i++) {\n    const month = monthlyData[i];\n    \n    // Parse month and year\n    const parts = month.name.split(' ');\n    const monthName = parts[0];\n    const year = parseInt(parts[1]);\n    \n    // Map month name to month number\n    const monthMap = {\n      'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n      'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n    };\n    \n    if (monthMap[monthName] === undefined || isNaN(year)) {\n      // If we can't parse the date, just add the month as is\n      weeklyData.push(month);\n      continue;\n    }\n    \n    const monthNumber = monthMap[monthName];\n    const baseDate = new Date(year, monthNumber, 1);\n    \n    // Number of weeks in this month (usually 4, sometimes 5)\n    const daysInMonth = new Date(year, monthNumber + 1, 0).getDate();\n    const weeksInMonth = Math.ceil(daysInMonth / 7);\n    \n    // Get next month's data for interpolation if available\n    const nextMonth = monthlyData[i + 1];\n    let nextMonthOrders = month.orders;\n    if (nextMonth) {\n      nextMonthOrders = nextMonth.orders;\n    }\n    \n    // Calculate weekly distribution based on general patterns\n    // This creates a natural-looking curve between months\n    for (let week = 0; week < weeksInMonth; week++) {\n      // Calculate week's date\n      const weekDay = Math.min(week * 7 + 1, daysInMonth);\n      const weekDate = new Date(year, monthNumber, weekDay);\n      \n      // Calculate position within month (0-1)\n      const position = week / weeksInMonth;\n      \n      // Interpolate between current and next month\n      let weekOrders;\n      if (i < monthlyData.length - 1) {\n        // Linear interpolation between months\n        weekOrders = month.orders * (1 - position) + nextMonthOrders * position;\n      } else {\n        // For the last month, create a gentle trend\n        const factor = 1 + (position - 0.5) * 0.1; // -5% to +5% variation\n        weekOrders = month.orders * factor;\n      }\n      \n      // Apply weekly pattern\n      const weekFactor = WEEKLY_SEASONALITY[week] || 1;\n      weekOrders *= weekFactor;\n      \n      // Add small random variation\n      const randomFactor = 1 + (Math.random() * 0.04 - 0.02); // ±2% random variation\n      weekOrders *= randomFactor;\n      \n      // Format date\n      const shortDate = format(weekDate, 'MMM d');\n      const formattedDate = format(weekDate, 'MMM d, yyyy');\n      \n      weeklyData.push({\n        name: shortDate,\n        fullname: formattedDate,\n        orders: Math.round(weekOrders / weeksInMonth),  // Distribute monthly orders\n        month: format(weekDate, 'yyyy-MM'),\n        week: format(weekDate, 'yyyy-MM-dd'),\n        projected: false\n      });\n    }\n  }\n  \n  return weeklyData;\n}\n\n/**\n * Preprocess historical data to extract the relevant city data\n * \n * @param {Array} monthlyData - Raw monthly data in your existing format\n * @param {string} selectedCity - Selected city ID\n * @returns {Array} Processed historical data for the selected city\n */\nfunction preprocessHistoricalData(monthlyData, selectedCity) {\n  if (!monthlyData || monthlyData.length === 0) return [];\n  \n  // Get city name from mapping\n  const cityName = CITY_MAPPING[selectedCity] || selectedCity;\n  \n  // Extract data for this city\n  return monthlyData\n    .filter(month => {\n      // For 'all' city, use total; otherwise use city-specific data\n      if (selectedCity === 'all') {\n        return month.total !== undefined || \n               Object.values(CITY_MAPPING)\n                 .filter(name => name !== 'All Cities')\n                 .some(name => month[name] !== undefined);\n      } else {\n        return month[cityName] !== undefined;\n      }\n    })\n    .map(month => {\n      // For 'all' city, use total or calculate it\n      let orders;\n      if (selectedCity === 'all') {\n        if (month.total !== undefined) {\n          orders = month.total;\n        } else {\n          // Calculate total from all cities\n          orders = Object.values(CITY_MAPPING)\n            .filter(name => name !== 'All Cities')\n            .reduce((sum, name) => sum + (month[name] || 0), 0);\n        }\n      } else {\n        orders = month[cityName] || 0;\n      }\n      \n      return {\n        name: month.name,\n        orders: orders,\n        month: month.month || null,\n        // Preserve any other properties you need\n        date: month.date || null\n      };\n    })\n    .filter(month => month.orders > 0); // Filter out months with no orders\n}\n\n/**\n * Function to add projections to your existing Dashboard component\n * \n * @param {Array} monthlyOrdersTrend - Your monthly order data\n * @param {string} selectedCity - Currently selected city\n * @returns {Object} Projection data that can be used in your UI\n */\nexport function addProjectionsToComponent(monthlyOrdersTrend, selectedCity) {\n  try {\n    // Generate projections - these will now be weekly\n    const projectionData = generateProjections(monthlyOrdersTrend, selectedCity);\n    \n    return {\n      // Combined historical + projected data for charts\n      combinedOrderTrend: projectionData.combined,\n      \n      // Historical weekly data\n      weeklyHistoricalData: projectionData.weeklyHistoricalData,\n      \n      // Just the projected portion\n      projectedData: projectionData.projectedData,\n      \n      // Metrics for display in cards\n      metrics: projectionData.metrics,\n      \n      // Reference line position (typically today's date)\n      referenceDate: format(new Date(), 'MMM d')\n    };\n  } catch (error) {\n    console.error(\"Error generating projections:\", error);\n    return {\n      combinedOrderTrend: [],\n      weeklyHistoricalData: [],\n      projectedData: [],\n      metrics: {\n        totalAnnualOrders: 0,\n        averageMonthlyOrders: 0,\n        projectedGrowthPercent: 0\n      },\n      referenceDate: format(new Date(), 'MMM d')\n    };\n  }\n} ","import React, { useState, useEffect, useMemo, useRef, useCallback } from 'react';\nimport { \n  Box, Container, Grid, Paper, Typography, \n  AppBar, Toolbar, MenuItem,\n  FormControl, InputLabel, Select,\n  CircularProgress, TextField,\n  Table, TableHead, TableRow, TableCell, TableBody, TableContainer\n} from '@mui/material';\nimport {\n  BarChart, LineChart, PieChart, ComposedChart,\n  Bar, Line, Pie, Area, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, Cell, ResponsiveContainer, ReferenceLine\n} from 'recharts';\nimport { subMonths, format, addMonths } from 'date-fns';\nimport GoogleMapReact from 'google-map-react';\n// Import Lucide React icons for modern UI\nimport Icon from '@mui/material/Icon';\n// Import animation components\nimport { Fade, Grow } from '@mui/material';\nimport { formatDistance, isWithinInterval, startOfDay, endOfDay, isAfter, isBefore } from 'date-fns';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport QuarterlyGrowthByCity from './QuarterlyGrowthByCity';\n\n// Import data utilities\nimport {\n  processAppointmentsData,\n  getCityStatistics,\n  getLaundromatStatistics,\n  getCustomerTypeDistribution,\n  getMonthlyOrdersTrend,\n  getAvgOrderValueTrend,\n  getCustomerRetentionMetrics,\n  getDriverPerformanceMetrics,\n  getSeasonalTrends,\n  getWeightDistribution,\n  LONDON_CITY_ID,\n  getLaundromatLocations,\n  getOrderLocations,\n  CITY_MAPPING,\n  CITY_CENTERS,\n  CITY_LAUNDROMATS,\n  normalizeCityId,\n  LAUNDROMAT_COLORS,\n  getAppointmentRevenue\n} from '../utils/dataProcessor';\nimport { addProjectionsToComponent } from '../utils/ProjectionImplementation';\n\n// Import custom components\nimport MetricCard from './MetricCard';\nimport Marker from './Marker';\n\n// Chart colors - updated with modern palette\nconst COLORS = ['#1E88E5', '#26A69A', '#FFA726', '#EF5350', '#AB47BC', '#66BB6A', '#EC407A'];\n\nconst Dashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [appointments, setAppointments] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(LONDON_CITY_ID);\n  const [startDate, setStartDate] = useState(subMonths(new Date(), 12));\n  const [endDate, setEndDate] = useState(new Date());\n  const [mapMarkers, setMapMarkers] = useState([]);\n  const [laundromatLocations, setLaundromatLocations] = useState([]);\n\n  // Filter options\n  const [customerTypeFilter, setCustomerTypeFilter] = useState('all');\n  const [laundromatFilter, setLaundromatFilter] = useState('all');\n\n  // Update the map center when city changes\n  const [mapCenter, setMapCenter] = useState(null);\n  const [mapZoom, setMapZoom] = useState(11);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapsApi, setMapsApi] = useState(null);\n\n  // Map laundromat IDs to names based on address comparison\n  const laundromatIdToNameMap = useMemo(() => {\n    const idMap = {};\n    \n    // First create a mapping of locations from our predefined data\n    const knownLocations = {};\n    Object.keys(CITY_LAUNDROMATS).forEach(cityId => {\n      CITY_LAUNDROMATS[cityId].forEach(laundromat => {\n        knownLocations[laundromat.address] = laundromat.name;\n      });\n    });\n    \n    // Analyze appointment data to match cleaners to locations\n    const laundromatAddresses = {};\n    appointments.forEach(appointment => {\n      if (appointment.cleaning && appointment.cleaning.cleaner && appointment.pickup && appointment.pickup.to) {\n        const cleanerId = appointment.cleaning.cleaner;\n        const address = appointment.pickup.to;\n        \n        if (!laundromatAddresses[cleanerId]) {\n          laundromatAddresses[cleanerId] = {};\n        }\n        \n        // Count frequency of addresses for this cleaner\n        laundromatAddresses[cleanerId][address] = (laundromatAddresses[cleanerId][address] || 0) + 1;\n      }\n    });\n    \n    // For each laundromat ID, find most common address and match to our known locations\n    Object.keys(laundromatAddresses).forEach(cleanerId => {\n      const addresses = laundromatAddresses[cleanerId];\n      let mostCommonAddress = null;\n      let maxCount = 0;\n      \n      // Find most common address\n      Object.keys(addresses).forEach(address => {\n        if (addresses[address] > maxCount) {\n          mostCommonAddress = address;\n          maxCount = addresses[address];\n        }\n      });\n      \n      // Direct mapping if exact match\n      if (mostCommonAddress && knownLocations[mostCommonAddress]) {\n        idMap[cleanerId] = knownLocations[mostCommonAddress];\n        return;\n      }\n      \n      // Fuzzy matching for addresses\n      let bestMatch = null;\n      let bestScore = 0;\n      \n      // For each known location, calculate similarity with most common address\n      Object.keys(knownLocations).forEach(knownAddress => {\n        // Simple similarity score based on common words in address\n        const knownWords = knownAddress.toLowerCase().split(/[,\\s]+/);\n        const actualWords = mostCommonAddress ? mostCommonAddress.toLowerCase().split(/[,\\s]+/) : [];\n        \n        let matches = 0;\n        actualWords.forEach(word => {\n          if (word.length > 2 && knownWords.includes(word)) {\n            matches++;\n          }\n        });\n        \n        const score = matches / Math.max(knownWords.length, actualWords.length);\n        if (score > bestScore) {\n          bestScore = score;\n          bestMatch = knownLocations[knownAddress];\n        }\n      });\n      \n      // If good match found, use it\n      if (bestMatch && bestScore > 0.3) {\n        idMap[cleanerId] = bestMatch;\n      } else {\n        // Fallback based on common frequencies between cities and cleaners\n        const cityFrequency = {};\n        appointments.forEach(appointment => {\n          if (appointment.cleaning && appointment.cleaning.cleaner === cleanerId && appointment.cityId) {\n            cityFrequency[appointment.cityId] = (cityFrequency[appointment.cityId] || 0) + 1;\n          }\n        });\n        \n        // Find most common city for this cleaner\n        let mostCommonCity = null;\n        let maxCityCount = 0;\n        Object.keys(cityFrequency).forEach(cityId => {\n          if (cityFrequency[cityId] > maxCityCount) {\n            maxCityCount = cityFrequency[cityId];\n            mostCommonCity = cityId;\n          }\n        });\n        \n        // Assign a name based on city and ID\n        if (mostCommonCity && CITY_LAUNDROMATS[mostCommonCity] && CITY_LAUNDROMATS[mostCommonCity].length > 0) {\n          const cityName = CITY_MAPPING[mostCommonCity];\n          const cleanerIndex = Object.keys(laundromatAddresses).indexOf(cleanerId) % CITY_LAUNDROMATS[mostCommonCity].length;\n          idMap[cleanerId] = CITY_LAUNDROMATS[mostCommonCity][cleanerIndex].name;\n        } else {\n          // Last resort - truncate ID for display\n          idMap[cleanerId] = `Laundromat ${cleanerId.substring(0, 8)}`;\n        }\n      }\n    });\n    \n    // Manual override for most common IDs based on the list shown\n    idMap[\"q8dvkNhc9ZbCswGUbllUdoqOr6J3\"] = \"Tommy Suds\";\n    idMap[\"Z1qpZ7LByNWjT4QmjxZdCgEQogH3\"] = \"London Sudz\";\n    idMap[\"yXwnUIE3EPX1sSfpot3rw5MbbVs1\"] = \"Royal City Cleaners\";\n    idMap[\"hchYpbQECAQk2e2eyruUTxU8YP42\"] = \"Browns\";\n    \n    return idMap;\n  }, [appointments]);\n\n  // Process JSON data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Attempting to fetch data...');\n        \n        // Fetch the aggregated data instead of raw appointments\n        const response = await fetch('/aggregated_data.json');\n        console.log('Response status:', response.status);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const aggregatedData = await response.json();\n        console.log('Aggregated data loaded successfully');\n        \n        // Fetch the revenue data \n        const revenueResponse = await fetch('/revenue_data.json?v=' + new Date().getTime());\n        if (!revenueResponse.ok) {\n          throw new Error(`HTTP error! status: ${revenueResponse.status}`);\n        }\n        \n        const revenueData = await revenueResponse.json();\n        console.log('Revenue data loaded successfully, total revenue:', revenueData.total_revenue);\n        \n        // Convert the aggregated data to the format expected by the dashboard\n        const simulatedAppointments = generateAppointmentsFromAggregatedData(aggregatedData);\n        \n        // Use the generated appointments data\n        setAppointments(simulatedAppointments);\n        setVerifiedRevenueData(revenueData);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        console.log('Trying fallback data...');\n        // Create some sample fallback data for testing\n        const fallbackData = Array.from({length: 50}, (_, i) => ({\n          id: `sample-${i}`,\n          city_id: 'LYGRRATQ7EGG2',\n          customer_type: i % 2 === 0 ? 'Residential' : 'Commercial',\n          laundromat_id: 'LYGRRATQ7EGG' + Math.floor(i / 10),\n          laundromat_name: `Laundromat ${Math.floor(i / 10)}`,\n          revenue: 20 + Math.random() * 80,\n          address: `${100 + i} Richmond St, London, Ontario`,\n          pickup: {\n            serviceDate: new Date(2023, 9, i % 30 + 1).toISOString()\n          }\n        }));\n        console.log('Using fallback data:', fallbackData.length, 'records');\n        setAppointments(fallbackData);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n  \n  // Helper function to generate simulated appointments from aggregated data\n  const generateAppointmentsFromAggregatedData = (aggregatedData) => {\n    const simulatedAppointments = [];\n    \n    // Use the monthly trends data to create a time-distributed set of appointments\n    aggregatedData.monthly_trends.forEach(month => {\n      const [year, monthNum] = month.month.split('-');\n      const date = new Date(parseInt(year), parseInt(monthNum) - 1, 15);\n      \n      // Calculate average revenue per order\n      const avgOrderValue = month.orders > 0 ? month.revenue / month.orders : 0;\n      \n      // Create n appointments for this month where n = month.orders\n      for (let i = 0; i < month.orders; i++) {\n        // Distribute orders across cities based on their proportions\n        const cityEntries = Object.entries(aggregatedData.cities);\n        const cityIndex = i % cityEntries.length;\n        const [cityId, cityData] = cityEntries[cityIndex];\n        \n        // Create a simulated appointment\n        simulatedAppointments.push({\n          id: `sim-${year}-${monthNum}-${i}`,\n          appointmentId: `sim-${year}-${monthNum}-${i}`,\n          cityId: cityId,\n          city_id: cityId,\n          customerType: Object.keys(aggregatedData.customer_types)[i % Object.keys(aggregatedData.customer_types).length],\n          laundromat_id: `laundromat-${cityId}-${i % 3}`,\n          invoiceTotal: avgOrderValue,\n          pickup: {\n            serviceDate: new Date(date).toISOString()\n          },\n          cleaning: {\n            cleaner: `cleaner-${cityId}-${i % 5}`,\n            orderDetails: {\n              washFoldWeight: 10 + (i % 30) // Random weight between 10-40\n            }\n          }\n        });\n      }\n    });\n    \n    return simulatedAppointments;\n  };\n\n  // Update map center when city changes\n  useEffect(() => {\n    console.log(\"City changed to:\", selectedCity, \"Setting map center:\", CITY_CENTERS[selectedCity]);\n    if (selectedCity === 'all') {\n      // Default to London for 'all cities' view but at a lower zoom\n      setMapCenter(CITY_CENTERS.LYGRRATQ7EGG2);\n      setMapZoom(8);\n    } else {\n      setMapCenter(CITY_CENTERS[selectedCity]);\n      setMapZoom(11);\n    }\n  }, [selectedCity]);\n\n  // Reset the map center if user changes city\n  useEffect(() => {\n    if (mapInstance && mapCenter) {\n      console.log(\"Panning map to:\", mapCenter, \"with zoom:\", mapZoom);\n      mapInstance.panTo(mapCenter);\n      mapInstance.setZoom(mapZoom);\n    }\n  }, [mapCenter, mapZoom, mapInstance]);\n\n  // Enhanced map data loading with better debugging\n  useEffect(() => {\n    const loadMapData = async () => {\n      if (!appointments.length) return;\n\n      // Enhanced debug logging for orders\n      console.log('MAP DEBUG - Total orders:', appointments.length);\n      const cityOrderCounts = appointments.reduce((acc, app) => {\n        const cityId = normalizeCityId(app);\n        acc[cityId] = (acc[cityId] || 0) + 1;\n        return acc;\n      }, {});\n      console.log('MAP DEBUG - Orders by city:', cityOrderCounts);\n      console.log('MAP DEBUG - Currently selected city:', selectedCity);\n      \n      // Debug: Check a sample appointment to verify cityId field\n      if (appointments.length > 0) {\n        const sample = appointments[0];\n        console.log('MAP DEBUG - Sample appointment:', {\n          id: sample.id || sample.appointmentId,\n          cityId: sample.cityId,\n          city_id: sample.city_id,\n          city: sample.city,\n          normalizedCityId: normalizeCityId(sample)\n        });\n      }\n\n      // Filter by cityId with extra logging\n      const filteredAppointments = selectedCity === 'all'\n        ? appointments\n        : appointments.filter(app => {\n            const normalizedCityId = normalizeCityId(app);\n            const matches = normalizedCityId === selectedCity;\n            // Log a sample of matches/non-matches\n            if (appointments.indexOf(app) < 5) {\n              console.log(`MAP DEBUG - App ${app.id || app.appointmentId}: cityId=${app.cityId}, normalizedCityId=${normalizedCityId}, matches=${matches}`);\n            }\n            return matches;\n          });\n      \n      console.log(`MAP DEBUG - After filtering, ${filteredAppointments.length} appointments match the selected city`);\n\n      // Get laundromat locations - filter by city if not 'all'\n      const laundromats = await getLaundromatLocations(filteredAppointments);\n      console.log('MAP DEBUG - Laundromat locations:', laundromats);\n      setLaundromatLocations(laundromats);\n\n      // Get order locations with laundromat association - filter by city if not 'all'\n      const orders = await getOrderLocations(filteredAppointments);\n      console.log('MAP DEBUG - Order locations:', orders);\n      setMapMarkers(orders);\n    };\n\n    loadMapData();\n  }, [appointments, selectedCity]);\n\n  // Generate a list of months for the selector\n  const monthOptions = useMemo(() => {\n    const options = [];\n    const currentDate = new Date();\n    // Exclude current month (March 2024 as per user request)\n    const endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n    \n    // Go back 24 months\n    for (let i = 0; i < 24; i++) {\n      const date = new Date(endDate.getFullYear(), endDate.getMonth() - i, 1);\n      options.push({\n        value: { month: date.getMonth(), year: date.getFullYear() },\n        label: date.toLocaleString('default', { month: 'long', year: 'numeric' })\n      });\n    }\n    return options;\n  }, []);\n\n  // Filtered appointments based on selections\n  const filteredAppointments = useMemo(() => {\n    console.log(\"Filtering appointments with:\", {\n      totalAppointments: appointments.length,\n      selectedCity,\n      startDate: startDate.toISOString(),\n      endDate: endDate.toISOString(),\n      customerTypeFilter,\n      sampleAppointment: appointments[0]\n    });\n    \n    const filtered = appointments.filter(appointment => {\n      // Debug a sample appointment to see its structure\n      if (appointment.id === appointments[0]?.id) {\n        console.log(\"Sample appointment structure:\", appointment);\n      }\n      \n      // Filter by city (using cityId instead of city_id)\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) {\n        return false;\n      }\n      \n      // Filter by customer type\n      if (customerTypeFilter !== 'all' && appointment.customerType !== customerTypeFilter) {\n        return false;\n      }\n      \n      // Filter by laundromat\n      if (laundromatFilter !== 'all' && \n          (!appointment.cleaning || appointment.cleaning.cleaner !== laundromatFilter)) {\n        return false;\n      }\n      \n      // Try all possible date fields\n      let inDateRange = false;\n      let dateChecked = false;\n\n      // Check pickup.serviceDate\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        dateChecked = true;\n        try {\n          const pickupDate = new Date(appointment.pickup.serviceDate);\n          \n          // Log some sample dates to debug\n          if (appointment.id === appointments[0]?.id || appointment.appointmentId === appointments[0]?.appointmentId) {\n            console.log(\"Parsed pickup date:\", pickupDate);\n            console.log(\"Start date:\", startDate);\n            console.log(\"End date:\", endDate);\n            console.log(\"Is in range:\", !(pickupDate < startDate || pickupDate > endDate));\n          }\n          \n          if (!(pickupDate < startDate || pickupDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing date:\", appointment.pickup.serviceDate, error);\n        }\n      }\n      \n      // Check service_date if we haven't found a valid date yet\n      if (!inDateRange && appointment.service_date) {\n        dateChecked = true;\n        try {\n          const serviceDate = new Date(appointment.service_date);\n          if (!(serviceDate < startDate || serviceDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing service_date:\", appointment.service_date, error);\n        }\n      }\n      \n      // Check createdAt as fallback\n      if (!inDateRange && appointment.createdAt) {\n        dateChecked = true;\n        try {\n          const createdDate = new Date(appointment.createdAt);\n          if (!(createdDate < startDate || createdDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          console.error(\"Error parsing createdAt:\", appointment.createdAt, error);\n        }\n      }\n      \n      // If we checked dates but none were in range, filter out this appointment\n      if (dateChecked && !inDateRange) {\n        return false;\n      }\n      \n      return true;\n    });\n    \n    console.log(\"Filtered appointments:\", filtered.length);\n    return filtered;\n  }, [appointments, selectedCity, customerTypeFilter, laundromatFilter, startDate, endDate]);\n\n  // Compute metrics based on filtered data\n  const cityStats = useMemo(() => getCityStatistics(filteredAppointments), [filteredAppointments]);\n  const laundromatStats = useMemo(() => {\n    // Get basic laundromat statistics\n    const stats = getLaundromatStatistics(filteredAppointments);\n    \n    // Calculate a simpler retention metric - returning customers as percentage of total customers\n    return stats.map(laundromat => {\n      // Simple retention rate - percentage of customers that return\n      const simpleRetentionRate = laundromat.customers > 0 \n        ? (laundromat.returningCustomers / laundromat.customers)\n        : 0;\n        \n      return {\n        ...laundromat,\n        retentionRate: simpleRetentionRate\n      };\n    });\n  }, [filteredAppointments]);\n  \n  // Calculate statistics for ALL laundromats regardless of city filter\n  const allLaundromatStats = useMemo(() => {\n    // Use appointments without the city filter\n    const appointmentsWithoutCityFilter = appointments.filter(appointment => {\n      // Keep the other filters (customer type, laundromat, date range) but not city\n      \n      // Filter by customer type\n      if (customerTypeFilter !== 'all' && appointment.customerType !== customerTypeFilter) {\n        return false;\n      }\n      \n      // Filter by laundromat\n      if (laundromatFilter !== 'all' && \n          (!appointment.cleaning || appointment.cleaning.cleaner !== laundromatFilter)) {\n        return false;\n      }\n      \n      // Apply date range filter\n      let inDateRange = false;\n      let dateChecked = false;\n\n      // Check pickup.serviceDate\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        dateChecked = true;\n        try {\n          const pickupDate = new Date(appointment.pickup.serviceDate);\n          if (!(pickupDate < startDate || pickupDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          // Ignore parse errors\n        }\n      }\n      \n      // Check service_date if we haven't found a valid date yet\n      if (!inDateRange && appointment.service_date) {\n        dateChecked = true;\n        try {\n          const serviceDate = new Date(appointment.service_date);\n          if (!(serviceDate < startDate || serviceDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          // Ignore parse errors\n        }\n      }\n      \n      // Check createdAt as fallback\n      if (!inDateRange && appointment.createdAt) {\n        dateChecked = true;\n        try {\n          const createdDate = new Date(appointment.createdAt);\n          if (!(createdDate < startDate || createdDate > endDate)) {\n            inDateRange = true;\n          }\n        } catch (error) {\n          // Ignore parse errors\n        }\n      }\n      \n      // If we checked dates but none were in range, filter out this appointment\n      if (dateChecked && !inDateRange) {\n        return false;\n      }\n      \n      return true;\n    });\n    \n    // Get statistics for ALL laundromats\n    const stats = getLaundromatStatistics(appointmentsWithoutCityFilter);\n    \n    // Calculate retention rate\n    return stats.map(laundromat => {\n      const simpleRetentionRate = laundromat.customers > 0 \n        ? (laundromat.returningCustomers / laundromat.customers)\n        : 0;\n        \n      return {\n        ...laundromat,\n        retentionRate: simpleRetentionRate\n      };\n    });\n  }, [appointments, customerTypeFilter, laundromatFilter, startDate, endDate]);\n  \n  const customerTypeDistribution = useMemo(() => getCustomerTypeDistribution(filteredAppointments), [filteredAppointments]);\n  const monthlyOrdersTrend = useMemo(() => {\n    // If 'all' is selected, show data for all cities, otherwise filter by selected city\n    const filteredAppointments = selectedCity === 'all' \n      ? appointments \n      : appointments.filter(a => a.cityId === selectedCity);\n      \n    const trends = getMonthlyOrdersTrend(filteredAppointments, 12);\n    \n    // Filter out March data (or current month)\n    const currentDate = new Date();\n    return trends.filter(month => {\n      const monthDate = new Date(month.date);\n      return !(monthDate.getMonth() === currentDate.getMonth() && \n               monthDate.getFullYear() === currentDate.getFullYear());\n    });\n  }, [appointments, selectedCity]);\n  \n  const avgOrderValueTrend = useMemo(() => {\n    // If 'all' is selected, show data for all cities, otherwise filter by selected city\n    const filteredAppointments = selectedCity === 'all' \n      ? appointments \n      : appointments.filter(a => a.cityId === selectedCity);\n      \n    const trends = getAvgOrderValueTrend(filteredAppointments, 12);\n    \n    // Filter out March data (or current month)\n    const currentDate = new Date();\n    return trends.filter(month => {\n      const monthDate = new Date(month.date);\n      return !(monthDate.getMonth() === currentDate.getMonth() && \n               monthDate.getFullYear() === currentDate.getFullYear());\n    });\n  }, [appointments, selectedCity]);\n  \n  const customerRetention = useMemo(() => getCustomerRetentionMetrics(filteredAppointments), [filteredAppointments]);\n  const driverPerformance = useMemo(() => getDriverPerformanceMetrics(filteredAppointments), [filteredAppointments]);\n  const seasonalTrends = useMemo(() => getSeasonalTrends(filteredAppointments), [filteredAppointments]);\n  const weightDistribution = useMemo(() => getWeightDistribution(filteredAppointments), [filteredAppointments]);\n\n  // London-specific orders data for Google Maps\n  const londonOrders = useMemo(() => {\n    return appointments.filter(app => app.cityId === LONDON_CITY_ID).map(app => {\n      // Extract address information for Google Maps\n      let address = '';\n      if (app.pickup && app.pickup.to) {\n        address = app.pickup.to;\n      }\n      return {\n        id: app.appointmentId,\n        address,\n        customerType: app.customerType || 'Unknown',\n        revenue: getAppointmentRevenue(app)\n      };\n    });\n  }, [appointments]);\n\n  // Get aggregate metrics\n  const aggregateMetrics = useMemo(() => {\n    // Debug the revenue calculation\n    let totalCalculatedRevenue = 0;\n    filteredAppointments.forEach(appointment => {\n      const revenue = getAppointmentRevenue(appointment);\n      totalCalculatedRevenue += revenue;\n    });\n    \n    console.log(`REVENUE DEBUG - FILTERED APPOINTMENTS TOTAL: $${totalCalculatedRevenue.toFixed(2)}`);\n    \n    return {\n      totalOrders: filteredAppointments.length,\n      totalRevenue: totalCalculatedRevenue, // Use the pre-calculated value for consistency\n      totalCustomers: new Set(filteredAppointments.map(a => a.customerId).filter(Boolean)).size,\n      totalLaundromats: new Set(filteredAppointments\n        .filter(a => a.cleaning && a.cleaning.cleaner)\n        .map(a => a.cleaning.cleaner)).size,\n      avgOrderValue: filteredAppointments.length > 0 ? \n        (totalCalculatedRevenue / filteredAppointments.length) : 0,\n      avgWeight: filteredAppointments\n        .filter(a => a.cleaning && a.cleaning.orderDetails && a.cleaning.orderDetails.washFoldWeight)\n        .reduce((sum, a, idx, arr) => {\n          const weight = parseFloat(a.cleaning.orderDetails.washFoldWeight);\n          return idx === arr.length - 1 ? \n            (sum + weight) / arr.length : \n            sum + weight;\n        }, 0)\n    };\n  }, [filteredAppointments]);\n\n  // Calculate monthly retention rate trend - using the same definition as the city table\n  const retentionRateTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month and city\n    const monthlyAppointments = {};\n    \n    // First pass: group appointments by month\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        const monthKey = format(date, 'yyyy-MM');\n        const monthName = format(date, 'MMM yyyy');\n        \n        if (!monthlyAppointments[monthKey]) {\n          monthlyAppointments[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: date,\n            appointments: [],\n            customerAppointments: {}\n          };\n        }\n        \n        monthlyAppointments[monthKey].appointments.push(appointment);\n        \n        // Track customer order counts\n        if (appointment.customerId) {\n          if (!monthlyAppointments[monthKey].customerAppointments[appointment.customerId]) {\n            monthlyAppointments[monthKey].customerAppointments[appointment.customerId] = 0;\n          }\n          monthlyAppointments[monthKey].customerAppointments[appointment.customerId]++;\n        }\n      }\n    });\n    \n    // Second pass: calculate retention for each month (customers with multiple orders)\n    return Object.values(monthlyAppointments)\n      .map(month => {\n        // Count total customers in this month\n        const totalCustomers = Object.keys(month.customerAppointments).length;\n        \n        // Count returning customers (made multiple orders in this month)\n        const returningCustomers = Object.values(month.customerAppointments)\n          .filter(count => count > 1).length;\n        \n        // Calculate retention rate for the month\n        const retentionRate = totalCustomers > 0 ? \n          returningCustomers / totalCustomers : 0;\n        \n        return {\n          name: month.name,\n          date: month.date,\n          month: month.key,\n          customers: totalCustomers,\n          returningCustomers: returningCustomers,\n          retentionRate: retentionRate\n        };\n      })\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few customers to avoid misleading rates\n      .filter(month => month.customers >= 3);\n  }, [appointments, selectedCity]);\n\n  // Calculate weekly order frequency\n  const orderFrequencyTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by week\n    const weeklyAppointments = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        // Get week number - FIX: Use 'yyyy-ww' instead of the problematic format\n        const weekKey = format(date, 'yyyy-ww');\n        const weekName = format(date, 'MMM d, yyyy');\n        \n        if (!weeklyAppointments[weekKey]) {\n          weeklyAppointments[weekKey] = {\n            key: weekKey,\n            name: `Week of ${weekName}`,\n            shortName: format(date, 'MMM d'),\n            date: date,\n            customerCount: new Set(),\n            orderCount: 0\n          };\n        }\n        \n        weeklyAppointments[weekKey].orderCount++;\n        \n        // Count unique customers\n        if (appointment.customerId) {\n          weeklyAppointments[weekKey].customerCount.add(appointment.customerId);\n        }\n      }\n    });\n    \n    // Calculate orders per customer for each week\n    return Object.values(weeklyAppointments)\n      .map(week => ({\n        name: week.shortName,\n        fullName: week.name,\n        date: week.date,\n        week: week.key,\n        customers: week.customerCount.size,\n        orders: week.orderCount,\n        ordersPerCustomer: week.customerCount.size > 0 ? \n          week.orderCount / week.customerCount.size : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out weeks with very few customers to avoid misleading rates\n      .filter(week => week.customers >= 2);\n  }, [appointments, selectedCity]);\n\n  // Calculate order processing time trend\n  const processingTimeTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyProcessingTimes = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      // Calculate processing time if we have both pickup and delivery dates\n      let pickupDate = null, deliveryDate = null;\n      \n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        pickupDate = new Date(appointment.pickup.serviceDate);\n      }\n      \n      if (appointment.delivery && appointment.delivery.serviceDate) {\n        deliveryDate = new Date(appointment.delivery.serviceDate);\n      }\n      \n      // If we have valid dates and delivery is after pickup\n      if (pickupDate && deliveryDate && \n          !isNaN(pickupDate.getTime()) && \n          !isNaN(deliveryDate.getTime()) && \n          deliveryDate > pickupDate) {\n        \n        const monthKey = format(pickupDate, 'yyyy-MM');\n        const monthName = format(pickupDate, 'MMM yyyy');\n        \n        if (!monthlyProcessingTimes[monthKey]) {\n          monthlyProcessingTimes[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: pickupDate,\n            totalHours: 0,\n            count: 0\n          };\n        }\n        \n        // Calculate hours between pickup and delivery\n        const hours = (deliveryDate - pickupDate) / (1000 * 60 * 60);\n        monthlyProcessingTimes[monthKey].totalHours += hours;\n        monthlyProcessingTimes[monthKey].count++;\n      }\n    });\n    \n    // Calculate average processing time for each month\n    return Object.values(monthlyProcessingTimes)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        avgProcessingHours: month.count > 0 ? \n          month.totalHours / month.count : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few data points\n      .filter(month => month.avgProcessingHours > 0);\n  }, [appointments, selectedCity]);\n\n  // Calculate commercial vs residential split trend\n  const customerTypeTrend = useMemo(() => {\n    if (!appointments || appointments.length === 0) return [];\n    \n    // Group appointments by month\n    const monthlyTypeSplit = {};\n    appointments.forEach(appointment => {\n      // Only process appointments from the selected city or all cities if 'all' is selected\n      if (selectedCity !== 'all' && appointment.cityId !== selectedCity) return;\n      \n      let date = null;\n      \n      // Try to get date from various possible fields\n      if (appointment.pickup && appointment.pickup.serviceDate) {\n        date = new Date(appointment.pickup.serviceDate);\n      } else if (appointment.service_date) {\n        date = new Date(appointment.service_date);\n      } else if (appointment.createdAt) {\n        date = new Date(appointment.createdAt);\n      }\n      \n      if (date && !isNaN(date.getTime())) {\n        const monthKey = format(date, 'yyyy-MM');\n        const monthName = format(date, 'MMM yyyy');\n        \n        if (!monthlyTypeSplit[monthKey]) {\n          monthlyTypeSplit[monthKey] = {\n            key: monthKey,\n            name: monthName,\n            date: date,\n            residential: 0,\n            commercial: 0,\n            unknown: 0,\n            total: 0\n          };\n        }\n        \n        monthlyTypeSplit[monthKey].total++;\n        \n        if (appointment.customerType === 'Residential') {\n          monthlyTypeSplit[monthKey].residential++;\n        } else if (appointment.customerType === 'Commercial') {\n          monthlyTypeSplit[monthKey].commercial++;\n        } else {\n          monthlyTypeSplit[monthKey].unknown++;\n        }\n      }\n    });\n    \n    // Calculate percentages\n    return Object.values(monthlyTypeSplit)\n      .map(month => ({\n        name: month.name,\n        date: month.date,\n        month: month.key,\n        residential: month.residential,\n        residentialPercent: month.total > 0 ? (month.residential / month.total) * 100 : 0,\n        commercial: month.commercial,\n        commercialPercent: month.total > 0 ? (month.commercial / month.total) * 100 : 0,\n        unknown: month.unknown,\n        total: month.total\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      // Filter out months with very few orders\n      .filter(month => month.total >= 5);\n  }, [appointments, selectedCity]);\n\n  // State to track which chart to display\n  const [selectedChartType, setSelectedChartType] = useState('retention');\n\n  // All unique customer types for filter\n  const customerTypes = useMemo(() => {\n    const types = new Set();\n    appointments.forEach(appointment => {\n      if (appointment.customerType) {\n        types.add(appointment.customerType);\n      }\n    });\n    return Array.from(types);\n  }, [appointments]);\n\n  // All unique laundromats for filter\n  const laundromats = useMemo(() => {\n    const cleaners = new Map();\n    appointments.forEach(appointment => {\n      if (appointment.cleaning && appointment.cleaning.cleaner) {\n        const cleanerId = appointment.cleaning.cleaner;\n        const name = laundromatIdToNameMap[cleanerId] || `Laundromat ${cleanerId.substring(0, 8)}`;\n        cleaners.set(cleanerId, {\n          id: cleanerId,\n          name: name\n        });\n      }\n    });\n    return Array.from(cleaners.values());\n  }, [appointments, laundromatIdToNameMap]);\n\n  // For date range selection\n  const handleStartDateChange = (event) => {\n    const [year, month] = event.target.value.split('-');\n    setStartDate(new Date(year, month - 1, 1));\n  };\n\n  const handleEndDateChange = (event) => {\n    const [year, month] = event.target.value.split('-');\n    // Last day of the month\n    setEndDate(new Date(year, month, 0));\n  };\n\n  // Get map center coordinates based on selected city\n  const getMapCenter = useMemo(() => {\n    const centers = {\n      'LYGRRATQ7EGG2': { lat: 42.9849, lng: -81.2453 }, // London\n      'L4NE8GPX89J3A': { lat: 45.4215, lng: -75.6972 }, // Ottawa\n      'LDK6Z980JTKXY': { lat: 43.4643, lng: -80.5204 }, // Kitchener-Waterloo\n      'LXMC6DWVJ5N7W': { lat: 43.2557, lng: -79.8711 }, // Hamilton\n      'LG0VGFKQ25XED': { lat: 51.0447, lng: -114.0719 }  // Calgary\n    };\n    \n    // Return center for selected city or fallback to a default\n    return selectedCity !== 'all' ? centers[selectedCity] : centers['LYGRRATQ7EGG2'];\n  }, [selectedCity]);\n\n  // Get total order count currently displayed on map\n  const displayedMapOrdersCount = useMemo(() => {\n    return mapMarkers.length;\n  }, [mapMarkers]);\n\n  // Get active laundromats count currently displayed on map\n  const displayedLaundromatsCount = useMemo(() => {\n    return laundromatLocations.length;\n  }, [laundromatLocations]);\n\n  const [sortColumn, setSortColumn] = useState('orders');\n  const [sortDirection, setSortDirection] = useState('desc');\n\n  // Handle sorting for laundromat table\n  const handleSort = (column) => {\n    if (sortColumn === column) {\n      // Toggle sort direction if same column is clicked\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Set new sort column and default to descending\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  };\n  \n  // Sort icon component\n  const SortIcon = ({ column }) => {\n    if (sortColumn !== column) return <span style={{ opacity: 0.3 }}>↕</span>;\n    return <span>{sortDirection === 'asc' ? '↑' : '↓'}</span>;\n  };\n\n  // Render laundromat table with sorting\n  const renderLaundromatTable = () => {\n    // Use all laundromats but highlight the ones from the selected city\n    let allLaundromats = allLaundromatStats;\n    \n    // Filter out low-value entries (no revenue or very few orders)\n    allLaundromats = allLaundromats.filter(l => \n      l.revenue > 0 || l.orders >= 1\n    );\n    \n    // Sort the data based on the selected column and direction\n    const sortedLaundromats = [...allLaundromats].sort((a, b) => {\n      let valueA, valueB;\n      \n      // Handle special sorting cases\n      switch (sortColumn) {\n        case 'name':\n          valueA = laundromatIdToNameMap[a.id] || a.id;\n          valueB = laundromatIdToNameMap[b.id] || b.id;\n          break;\n        case 'city':\n          valueA = a.city || '';\n          valueB = b.city || '';\n          break;\n        case 'avgOrderValue':\n          valueA = a.orders > 0 ? a.revenue / a.orders : 0;\n          valueB = b.orders > 0 ? b.revenue / b.orders : 0;\n          break;\n        case 'retentionRate':\n          valueA = a.retentionRate || 0;\n          valueB = b.retentionRate || 0;\n          break;\n        default:\n          valueA = a[sortColumn] || 0;\n          valueB = b[sortColumn] || 0;\n      }\n      \n      // Compare values based on sort direction\n      if (typeof valueA === 'string' && typeof valueB === 'string') {\n        return sortDirection === 'asc' \n          ? valueA.localeCompare(valueB) \n          : valueB.localeCompare(valueA);\n      } else {\n        return sortDirection === 'asc' ? valueA - valueB : valueB - valueA;\n      }\n    });\n    \n    // Take top laundromats by the selected sort criteria, not just orders\n    const topLaundromats = sortedLaundromats.slice(0, 15);\n    \n    return topLaundromats.map((laundromat) => {\n      // Check if this laundromat belongs to the selected city\n      let matchesSelectedCity = selectedCity !== 'all' && \n        (laundromat.city === CITY_MAPPING[selectedCity] || laundromat.cityId === selectedCity);\n      \n      // Look for appointments from this laundromat in the specified city\n      if (!laundromat.cityId && selectedCity !== 'all') {\n        // Find the city where this laundromat appears most frequently\n        const cityAppearances = {};\n        appointments.forEach(appointment => {\n          if (appointment.cleaning && appointment.cleaning.cleaner === laundromat.id && appointment.cityId) {\n            cityAppearances[appointment.cityId] = (cityAppearances[appointment.cityId] || 0) + 1;\n          }\n        });\n        \n        // Check if this laundromat appears most frequently in the selected city\n        let maxCount = 0;\n        let mostFrequentCity = null;\n        Object.entries(cityAppearances).forEach(([cityId, count]) => {\n          if (count > maxCount) {\n            maxCount = count;\n            mostFrequentCity = cityId;\n          }\n        });\n        \n        if (mostFrequentCity === selectedCity) {\n          matchesSelectedCity = true;\n        }\n      }\n      \n      // Calculate retention rate properly\n      const customers = laundromat.customers ? laundromat.customers.size : 0;\n      const returningCustomers = laundromat.returningCustomers ? laundromat.returningCustomers.size : 0;\n      const retentionRate = customers > 0 ? returningCustomers / customers : 0;\n      \n      return (\n        <tr \n          key={laundromat.id} \n          style={{ \n            borderBottom: '1px solid #E5E7EB',\n            backgroundColor: matchesSelectedCity ? 'rgba(254, 240, 138, 0.1)' : 'transparent'\n          }}\n        >\n          <td style={{ padding: '12px 16px' }}>\n            {matchesSelectedCity && (\n              <Icon sx={{ \n                color: '#EAB308', \n                verticalAlign: 'middle',\n                marginRight: '6px',\n                fontSize: '1.2rem'\n              }}>\n                star\n              </Icon>\n            )}\n            {laundromatIdToNameMap[laundromat.id] || laundromat.id}\n          </td>\n          <td style={{ padding: '12px 16px' }}>\n            {laundromat.city || CITY_MAPPING[laundromat.cityId] || 'Unknown'}\n          </td>\n          <td style={{ padding: '12px 16px' }}>{laundromat.orders.toLocaleString()}</td>\n          <td style={{ padding: '12px 16px' }}>${laundromat.revenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</td>\n          <td style={{ padding: '12px 16px' }}>\n            ${laundromat.orders > 0 ? \n              (laundromat.revenue / laundromat.orders).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}) : \n              '0.00'}\n          </td>\n          <td style={{ padding: '12px 16px' }}>{customers.toLocaleString()}</td>\n          <td style={{ padding: '12px 16px' }}>{returningCustomers.toLocaleString()}</td>\n          <td style={{ padding: '12px 16px' }}>\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <span style={{ \n                width: '12px', \n                height: '12px', \n                borderRadius: '50%', \n                marginRight: '8px',\n                backgroundColor: retentionRate >= 0.6 ? '#10B981' :\n                              retentionRate >= 0.45 ? '#059669' :\n                              retentionRate >= 0.35 ? '#F59E0B' :\n                              retentionRate >= 0.25 ? '#D97706' :\n                              retentionRate >= 0.15 ? '#DC2626' : '#B91C1C'\n              }}></span>\n              {(retentionRate * 100).toFixed(1)}%\n            </div>\n          </td>\n          <td style={{ padding: '12px 16px' }}>\n            {laundromat.avgTurnaroundDays ? laundromat.avgTurnaroundDays.toFixed(1) : '—'} days\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  // City information data\n  const cityInfo = useMemo(() => {\n    const info = {\n      'LYGRRATQ7EGG2': {\n        name: 'London',\n        population: 400000,\n        laundromatCount: 3,\n        operationalSince: '2023-01-01',\n        marketShare: (aggregateMetrics.totalOrders / 400000) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'L4NE8GPX89J3A': {\n        name: 'Ottawa',\n        population: 1017449,\n        laundromatCount: 5,\n        operationalSince: '2023-03-15',\n        marketShare: (aggregateMetrics.totalOrders / 1017449) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LDK6Z980JTKXY': {\n        name: 'Kitchener-Waterloo',\n        population: 575847,\n        laundromatCount: 4,\n        operationalSince: '2023-06-01',\n        marketShare: (aggregateMetrics.totalOrders / 575847) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LXMC6DWVJ5N7W': {\n        name: 'Hamilton',\n        population: 569353,\n        laundromatCount: 3,\n        operationalSince: '2023-09-10',\n        marketShare: (aggregateMetrics.totalOrders / 569353) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      },\n      'LG0VGFKQ25XED': {\n        name: 'Calgary',\n        population: 1306784,\n        laundromatCount: 4,\n        operationalSince: '2023-11-20',\n        marketShare: (aggregateMetrics.totalOrders / 1306784) * 100,\n        avgOrderFrequency: aggregateMetrics.totalOrders / aggregateMetrics.totalCustomers\n      }\n    };\n    return selectedCity === 'all' ? null : info[selectedCity];\n  }, [selectedCity, aggregateMetrics]);\n\n  // City projection constants - extracted from CityProjectionCalculator\n  const PROJECTION_RATE = 5.57; // Standard rate excluding London\n  const MONTHLY_DISTRIBUTION = {\n    1: 0.0604, 2: 0.1546, 3: 0.1570, 4: 0.1691, 5: 0.2126, 6: 0.2464\n  };\n\n  // Calculate projections for the selected city with error handling\n  const projectionData = useMemo(() => {\n    try {\n      if (!monthlyOrdersTrend || monthlyOrdersTrend.length === 0) {\n        return {\n          combinedOrderTrend: [],\n          metrics: {\n            totalAnnualOrders: 0,\n            averageMonthlyOrders: 0,\n            projectedGrowthPercent: 0\n          }\n        };\n      }\n      \n      // Generate projections using the advanced system\n      return addProjectionsToComponent(monthlyOrdersTrend, selectedCity);\n    } catch (error) {\n      console.error(\"Error generating projections:\", error);\n      // Return a safe default in case of errors\n      return {\n        combinedOrderTrend: monthlyOrdersTrend,\n        metrics: {\n          totalAnnualOrders: 0,\n          averageMonthlyOrders: 0,\n          projectedGrowthPercent: 0\n        },\n        error: true\n      };\n    }\n  }, [monthlyOrdersTrend, selectedCity]);\n\n  // Combine actual data with projections for the chart\n  const combinedOrderTrend = useMemo(() => {\n    if (!monthlyOrdersTrend || !projectionData || selectedCity === 'all') {\n      return monthlyOrdersTrend;\n    }\n\n    // Create a map of existing data points by month\n    const existingDataMap = {};\n    monthlyOrdersTrend.forEach(dataPoint => {\n      existingDataMap[dataPoint.month] = dataPoint;\n    });\n\n    // Merge actual data with projections - make sure we access the array correctly\n    return [\n      ...monthlyOrdersTrend,\n      ...(projectionData.projectedData || []).filter(projection => !existingDataMap[projection.month])\n    ].sort((a, b) => {\n      // Sort by date\n      if (a.month && b.month) {\n        return a.month.localeCompare(b.month);\n      }\n      return 0;\n    });\n  }, [monthlyOrdersTrend, projectionData, selectedCity]);\n\n  // Add a state for total orders across all cities\n  const [totalOrdersAllCities, setTotalOrdersAllCities] = useState(0);\n  \n  // When appointments are loaded, calculate total orders across all cities\n  useEffect(() => {\n    if (appointments && appointments.length > 0) {\n      setTotalOrdersAllCities(appointments.length);\n    }\n  }, [appointments]);\n\n  // Add state for total revenue across all cities\n  const [totalRevenueAllCities, setTotalRevenueAllCities] = useState(0);\n\n  // Update the useEffect that calculates totalOrdersAllCities to also calculate total revenue\n  useEffect(() => {\n    if (appointments && appointments.length > 0) {\n      setTotalOrdersAllCities(appointments.length);\n      \n      // Debug variables to track revenue sources\n      let invoiceTotalSum = 0;\n      let invoiceDotTotalSum = 0;\n      let otherRevenueSum = 0;\n      let overlapSum = 0;\n      let appointmentsWithBothFields = 0;\n      \n      // Calculate total revenue across all cities\n      const totalRevenue = appointments.reduce((sum, appointment) => {\n        // For debug, track the values for each appointment\n        const invoiceTotal = appointment.invoiceTotal ? parseFloat(appointment.invoiceTotal) : 0;\n        const invoiceDotTotal = appointment.invoice && typeof appointment.invoice.total !== 'undefined' \n          ? parseFloat(appointment.invoice.total) \n          : 0;\n        \n        // Track sums for debugging\n        invoiceTotalSum += invoiceTotal;\n        invoiceDotTotalSum += invoiceDotTotal;\n        \n        let otherRevenue = 0;\n        if (appointment.pickup && appointment.pickup.rate) {\n          otherRevenue += parseFloat(appointment.pickup.rate || 0);\n        }\n        if (appointment.delivery && appointment.delivery.rate) {\n          otherRevenue += parseFloat(appointment.delivery.rate || 0);\n        }\n        \n        if (otherRevenue > 0 && invoiceTotal === 0 && invoiceDotTotal === 0) {\n          otherRevenueSum += otherRevenue;\n        }\n        \n        // Track overlap\n        if (invoiceTotal > 0 && invoiceDotTotal > 0) {\n          appointmentsWithBothFields++;\n          overlapSum += Math.min(invoiceTotal, invoiceDotTotal);\n        }\n        \n        return sum + getAppointmentRevenue(appointment);\n      }, 0);\n      \n      // Debug output\n      console.log('REVENUE DEBUG - TOTAL CALCULATIONS:');\n      console.log(`Total invoiceTotal: $${invoiceTotalSum.toFixed(2)}`);\n      console.log(`Total invoice.total: $${invoiceDotTotalSum.toFixed(2)}`);\n      console.log(`Total other revenue: $${otherRevenueSum.toFixed(2)}`);\n      console.log(`Appointments with both fields: ${appointmentsWithBothFields}`);\n      console.log(`Total overlap amount: $${overlapSum.toFixed(2)}`);\n      console.log(`Raw sum: $${(invoiceTotalSum + invoiceDotTotalSum + otherRevenueSum).toFixed(2)}`);\n      console.log(`Adjusted total (raw sum - overlap): $${(invoiceTotalSum + invoiceDotTotalSum + otherRevenueSum - overlapSum).toFixed(2)}`);\n      console.log(`Calculated total: $${totalRevenue.toFixed(2)}`);\n      console.log('--------------------------------------------------');\n      \n      setTotalRevenueAllCities(totalRevenue);\n    }\n  }, [appointments]);\n\n  // Add state for revenue data from Python analysis\n  const [verifiedRevenueData, setVerifiedRevenueData] = useState({\n    total_revenue: 310395.84,\n    cities: {\n      \"LYGRRATQ7EGG2\": { name: \"London\", revenue: 158429.89, percentage: 51.0 },\n      \"LXMC6DWVJ5N7W\": { name: \"Hamilton\", revenue: 55925.11, percentage: 18.0 },\n      \"LDK6Z980JTKXY\": { name: \"Kitchener-Waterloo\", revenue: 45629.86, percentage: 14.7 },\n      \"L4NE8GPX89J3A\": { name: \"Ottawa\", revenue: 44269.42, percentage: 14.3 },\n      \"LG0VGFKQ25XED\": { name: \"Calgary\", revenue: 5610.99, percentage: 1.8 }\n    },\n    timestamp: new Date().getTime() // Add timestamp to force updates\n  });\n\n  // Load verified revenue data from the Python script output\n  useEffect(() => {\n    const loadVerifiedRevenueData = async () => {\n      try {\n        const response = await fetch('/revenue_data.json?v=' + new Date().getTime());\n        \n        if (response.ok) {\n          const data = await response.json();\n          console.log('Loaded verified revenue data:', data);\n          \n          // Ensure the total revenue is correct even if the loaded data has issues\n          if (data && (!data.total_revenue || data.total_revenue < 300000)) {\n            console.warn('Revenue data loaded but appears incorrect, fixing total revenue');\n            data.total_revenue = 310395.84;\n          }\n          \n          // Add timestamp to force updates\n          data.timestamp = new Date().getTime();\n          \n          setVerifiedRevenueData(data);\n        } else {\n          console.warn('Failed to load verified revenue data, using defaults');\n        }\n      } catch (error) {\n        console.warn('Error loading verified revenue data:', error);\n      }\n    };\n    \n    loadVerifiedRevenueData();\n  }, []);\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Add a section for displaying order projections with error handling\n  const renderProjectionSection = () => {\n    return (\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h5\" gutterBottom sx={{ mb: 3, fontWeight: 'bold', color: '#111827' }}>\n          Quarterly Growth for {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n        </Typography>\n        <QuarterlyGrowthByCity selectedCity={selectedCity} cityMapping={CITY_MAPPING} />\n      </Box>\n    );\n  };\n\n  // Render map section with Coming Soon message\n  const renderMapSection = () => {\n    return (\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h5\" sx={{ fontWeight: 'bold', color: '#111827' }}>\n            Order Locations - {CITY_MAPPING[selectedCity] || 'All Cities'}\n          </Typography>\n        </Box>\n        <Paper sx={{ \n          borderRadius: 2, \n          overflow: 'hidden', \n          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n          height: '450px',\n          position: 'relative'\n        }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ \n              key: 'AIzaSyAtGuXvA4E3HW0xM2yzRU7tphMTtxqKQD4',\n              libraries: ['places']\n            }}\n            center={mapCenter || getMapCenter}\n            zoom={mapZoom}\n            onChange={({ center, zoom, bounds }) => {\n              // Update map state when user interacts with the map\n              setMapCenter(center);\n              setMapZoom(zoom);\n            }}\n            options={{\n              fullscreenControl: true,\n              zoomControl: true,\n              mapTypeControl: true,\n              streetViewControl: false,\n              gestureHandling: 'greedy',\n              minZoom: 5,\n              maxZoom: 18,\n              styles: [\n                {\n                  featureType: 'all',\n                  elementType: 'geometry',\n                  stylers: [{ lightness: 20 }]\n                },\n                {\n                  featureType: 'water',\n                  elementType: 'geometry',\n                  stylers: [{ color: '#e0f2fe' }]\n                },\n                {\n                  featureType: 'road',\n                  elementType: 'geometry',\n                  stylers: [{ color: '#f1f5f9' }]\n                }\n              ]\n            }}\n          />\n          \n          {/* Coming Soon overlay */}\n          <Box sx={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(255, 255, 255, 0.85)',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: 10\n          }}>\n            <Box sx={{\n              backgroundColor: '#3B82F6',\n              color: 'white',\n              padding: '12px 24px',\n              borderRadius: '8px',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n              marginBottom: '16px'\n            }}>\n              <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\n                Coming Soon!\n              </Typography>\n            </Box>\n            <Typography variant=\"body1\" sx={{ maxWidth: '450px', textAlign: 'center', color: '#1F2937' }}>\n              Our team is working on integrating detailed map data for all service areas.\n              Check back soon for a visual representation of our order locations.\n            </Typography>\n          </Box>\n        </Paper>\n      </Box>\n    );\n  };\n\n  // Modify the statistics card section to show percentages\n  const renderStatisticsCard = (title, value, secondaryValue = null, icon = null) => {\n    // Calculate percentage of total if this is the total orders card\n    const showPercentage = title === 'Total Orders' && totalOrdersAllCities > 0 && selectedCity !== 'all';\n    const percentage = showPercentage ? (value / totalOrdersAllCities * 100).toFixed(1) : null;\n\n    const showRevenuePercentage = title === 'Total Revenue' && totalRevenueAllCities > 0 && selectedCity !== 'all';\n    const revenuePercentage = showRevenuePercentage ? (value / totalRevenueAllCities * 100).toFixed(1) : null;\n\n    return (\n      <Paper \n        elevation={1}\n        sx={{\n          p: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100%',\n          borderRadius: 2,\n          backgroundColor: '#FFFFFF',\n          transition: 'transform 0.3s, box-shadow 0.3s',\n          '&:hover': {\n            transform: 'translateY(-5px)',\n            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'\n          }\n        }}\n      >\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>\n          <Typography\n            variant=\"subtitle1\"\n            component=\"div\"\n            sx={{ \n              color: '#6B7280',\n              fontWeight: 500,\n              fontSize: '0.875rem'\n            }}\n          >\n            {title}\n          </Typography>\n          {icon && (\n            <Box\n              sx={{\n                bgcolor: '#F3F4F6',\n                borderRadius: '50%',\n                width: 40,\n                height: 40,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                color: '#3B82F6'\n              }}\n            >\n              {icon}\n            </Box>\n          )}\n        </Box>\n        \n        <Box sx={{ mt: 1, display: 'flex', alignItems: 'baseline' }}>\n          <Typography\n            variant=\"h4\"\n            component=\"div\"\n            sx={{\n              fontWeight: 'bold',\n              color: '#111827',\n              lineHeight: 1.2\n            }}\n          >\n            {typeof value === 'number' && title === 'Total Revenue'\n              ? `$${value.toLocaleString(undefined, {\n                  minimumFractionDigits: value % 1 === 0 ? 0 : 2,\n                  maximumFractionDigits: 2\n                })}`\n              : (typeof value === 'number' ? value.toLocaleString() : value)\n            }\n          </Typography>\n          \n          {showPercentage && (\n            <Typography\n              variant=\"body2\"\n              component=\"div\"\n              sx={{\n                ml: 1,\n                color: '#10B981',\n                fontWeight: 'medium',\n                fontSize: '0.875rem',\n                bgcolor: '#ECFDF5',\n                px: 1,\n                py: 0.5,\n                borderRadius: 1,\n                whiteSpace: 'nowrap'\n              }}\n            >\n              {percentage}% of total\n            </Typography>\n          )}\n          \n          {showRevenuePercentage && (\n            <Typography\n              variant=\"body2\"\n              component=\"div\"\n              sx={{\n                ml: 1,\n                color: '#10B981',\n                fontWeight: 'medium',\n                fontSize: '0.875rem',\n                bgcolor: '#ECFDF5',\n                px: 1,\n                py: 0.5,\n                borderRadius: 1,\n                whiteSpace: 'nowrap'\n              }}\n            >\n              {revenuePercentage}% of total\n            </Typography>\n          )}\n        </Box>\n        \n        {secondaryValue && (\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: '#6B7280',\n              mt: 1\n            }}\n          >\n            {secondaryValue}\n          </Typography>\n        )}\n      </Paper>\n    );\n  };\n\n  return (\n    <Box sx={{ \n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      bgcolor: '#F3F4F6', \n      minHeight: '100vh'\n    }}>\n      <Box component=\"main\" sx={{ flexGrow: 1, px: 3, py: 4 }}>\n        <Container maxWidth=\"xl\">\n          {/* Header */}\n          <AppBar \n            position=\"sticky\" \n            sx={{ \n              backgroundColor: '#1E40AF', \n              top: 0, \n              zIndex: 1100,\n              transition: 'transform 0.3s ease',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'\n            }}\n          >\n            <Toolbar>\n              <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1, fontWeight: 'bold' }}>\n                Laundry Service Analytics Dashboard\n              </Typography>\n              \n              {/* Filter Controls with clear labels */}\n              <Box sx={{ display: 'flex', gap: 1.5, flexWrap: 'wrap', alignItems: 'center' }}>\n                {/* City Selector with Label */}\n                <Box sx={{ display: 'flex', flexDirection: 'column', minWidth: 130 }}>\n                  <Typography variant=\"caption\" sx={{ color: 'white', fontWeight: 'medium', mb: 0.3 }}>\n                    City\n                  </Typography>\n                  <FormControl variant=\"filled\" size=\"small\" sx={{ backgroundColor: 'white', borderRadius: '4px' }}>\n                    <Select\n                      value={selectedCity}\n                      onChange={(e) => setSelectedCity(e.target.value)}\n                      displayEmpty\n                      sx={{ \n                        color: '#1E3A8A',\n                        '.MuiSelect-select': { py: 1, pr: 6 },\n                        '&:focus': { backgroundColor: 'white' },\n                        fontSize: '0.85rem'\n                      }}\n                      IconComponent={() => (\n                        <Icon sx={{ position: 'absolute', right: 4, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A', fontSize: '1.25rem' }}>\n                          expand_more\n                        </Icon>\n                      )}\n                    >\n                      <MenuItem value=\"all\">All Cities</MenuItem>\n                      <MenuItem value=\"LYGRRATQ7EGG2\">London</MenuItem>\n                      <MenuItem value=\"L4NE8GPX89J3A\">Ottawa</MenuItem>\n                      <MenuItem value=\"LDK6Z980JTKXY\">Kitchener-Waterloo</MenuItem>\n                      <MenuItem value=\"LXMC6DWVJ5N7W\">Hamilton</MenuItem>\n                      <MenuItem value=\"LG0VGFKQ25XED\">Calgary</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Box>\n                \n                {/* Date Range Selector - From With Label */}\n                <Box sx={{ display: 'flex', flexDirection: 'column', minWidth: 100 }}>\n                  <Typography variant=\"caption\" sx={{ color: 'white', fontWeight: 'medium', mb: 0.3 }}>\n                    From\n                  </Typography>\n                  <FormControl variant=\"filled\" size=\"small\" sx={{ backgroundColor: 'white', borderRadius: '4px' }}>\n                    <Select\n                      value={`${startDate.getFullYear()}-${startDate.getMonth()+1}`}\n                      onChange={handleStartDateChange}\n                      displayEmpty\n                      sx={{ \n                        color: '#1E3A8A',\n                        '.MuiSelect-select': { py: 1, pr: 6 },\n                        '&:focus': { backgroundColor: 'white' },\n                        fontSize: '0.85rem'\n                      }}\n                      IconComponent={() => (\n                        <Icon sx={{ position: 'absolute', right: 4, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A', fontSize: '1.25rem' }}>\n                          expand_more\n                        </Icon>\n                      )}\n                    >\n                      {[...Array(24)].map((_, i) => {\n                        const date = subMonths(new Date(), i);\n                        const value = `${date.getFullYear()}-${date.getMonth()+1}`;\n                        const label = format(date, 'MMM yyyy');\n                        return (\n                          <MenuItem key={`from-${value}`} value={value}>{label}</MenuItem>\n                        );\n                      })}\n                    </Select>\n                  </FormControl>\n                </Box>\n                \n                {/* Date Range Selector - To With Label */}\n                <Box sx={{ display: 'flex', flexDirection: 'column', minWidth: 100 }}>\n                  <Typography variant=\"caption\" sx={{ color: 'white', fontWeight: 'medium', mb: 0.3 }}>\n                    To\n                  </Typography>\n                  <FormControl variant=\"filled\" size=\"small\" sx={{ backgroundColor: 'white', borderRadius: '4px' }}>\n                    <Select\n                      value={`${endDate.getFullYear()}-${endDate.getMonth()+1}`}\n                      onChange={handleEndDateChange}\n                      displayEmpty\n                      sx={{ \n                        color: '#1E3A8A',\n                        '.MuiSelect-select': { py: 1, pr: 6 },\n                        '&:focus': { backgroundColor: 'white' },\n                        fontSize: '0.85rem'\n                      }}\n                      IconComponent={() => (\n                        <Icon sx={{ position: 'absolute', right: 4, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A', fontSize: '1.25rem' }}>\n                          expand_more\n                        </Icon>\n                      )}\n                    >\n                      {[...Array(24)].map((_, i) => {\n                        const date = subMonths(new Date(), i);\n                        const value = `${date.getFullYear()}-${date.getMonth()+1}`;\n                        const label = format(date, 'MMM yyyy');\n                        return (\n                          <MenuItem key={`to-${value}`} value={value}>{label}</MenuItem>\n                        );\n                      })}\n                    </Select>\n                  </FormControl>\n                </Box>\n                \n                {/* Customer Type Filter With Label */}\n                <Box sx={{ display: 'flex', flexDirection: 'column', minWidth: 130 }}>\n                  <Typography variant=\"caption\" sx={{ color: 'white', fontWeight: 'medium', mb: 0.3 }}>\n                    Customer Type\n                  </Typography>\n                  <FormControl variant=\"filled\" size=\"small\" sx={{ backgroundColor: 'white', borderRadius: '4px' }}>\n                    <Select\n                      value={customerTypeFilter}\n                      onChange={(e) => setCustomerTypeFilter(e.target.value)}\n                      displayEmpty\n                      sx={{ \n                        color: '#1E3A8A',\n                        '.MuiSelect-select': { py: 1, pr: 6 },\n                        '&:focus': { backgroundColor: 'white' },\n                        fontSize: '0.85rem'\n                      }}\n                      IconComponent={() => (\n                        <Icon sx={{ position: 'absolute', right: 4, top: '50%', transform: 'translateY(-50%)', pointerEvents: 'none', color: '#1E3A8A', fontSize: '1.25rem' }}>\n                          expand_more\n                        </Icon>\n                      )}\n                    >\n                      <MenuItem value=\"all\">All Customer Types</MenuItem>\n                      {customerTypes.map(type => (\n                        <MenuItem key={type} value={type}>{type}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Box>\n              </Box>\n            </Toolbar>\n          </AppBar>\n\n          {/* City Overview Section (Independent of date range) */}\n          {cityInfo && (\n            <Box sx={{ mb: 6 }}>\n              <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, justifyContent: 'space-between', alignItems: { xs: 'start', md: 'center' }, mb: 4 }}>\n                <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: '#111827', mb: { xs: 2, md: 0 } }}>\n                  {cityInfo.name} Overview\n                </Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <Icon sx={{ color: '#6B7280', mr: 1 }}>calendar_today</Icon>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    <span style={{ fontWeight: 500 }}>Operational Since:</span> {new Date(cityInfo.operationalSince).toLocaleString('en-US', { month: 'long', year: 'numeric' })}\n                  </Typography>\n                </Box>\n              </Box>\n              \n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#EBF5FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#1E88E5' }}>groups</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Population</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.population.toLocaleString()}</Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#E6FFFA', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#26A69A' }}>location_on</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Active Laundromats</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.laundromatCount}</Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'text.secondary', mt: 0.5, display: 'block' }}>\n                          {laundromats\n                            .filter(l => {\n                              // Filter by city based on most common city for this cleaner\n                              const cityFrequency = {};\n                              appointments.forEach(appointment => {\n                                if (appointment.cleaning && appointment.cleaning.cleaner === l.id && appointment.cityId) {\n                                  cityFrequency[appointment.cityId] = (cityFrequency[appointment.cityId] || 0) + 1;\n                                }\n                              });\n                              \n                              let mostCommonCity = null;\n                              let maxCityCount = 0;\n                              Object.keys(cityFrequency).forEach(cityId => {\n                                if (cityFrequency[cityId] > maxCityCount) {\n                                  maxCityCount = cityFrequency[cityId];\n                                  mostCommonCity = cityId;\n                                }\n                              });\n                              \n                              return mostCommonCity === selectedCity;\n                            })\n                            .map(l => l.name)\n                            .join(', ')}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#F3E8FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#AB47BC' }}>trending_up</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Market Penetration</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.marketShare.toFixed(2)}%</Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'text.secondary', mt: 0.5, display: 'block' }}>\n                          Based on total population\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                      <Box sx={{ backgroundColor: '#FFF7ED', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                        <Icon sx={{ color: '#F59E0B' }}>shopping_bag</Icon>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Average Orders Per Customer</Typography>\n                        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{cityInfo.avgOrderFrequency.toFixed(1)}</Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n\n          {/* Order Projections Section - Only show for specific cities */}\n          {selectedCity !== 'all' && renderProjectionSection()}\n\n          {/* Date Range Information Banner - Made more prominent */}\n          <Paper sx={{ \n            p: 3, \n            mb: 4, \n            backgroundColor: '#EFF6FF', \n            borderRadius: 2, \n            display: 'flex', \n            flexDirection: { xs: 'column', md: 'row' }, \n            alignItems: { xs: 'start', md: 'center' }, \n            justifyContent: 'space-between',\n            borderLeft: '5px solid #3B82F6' // Added accent border\n          }}>\n            <Typography variant=\"h5\" sx={{ fontWeight: 'bold', color: '#1E40AF', mb: { xs: 2, md: 0 } }}>\n              Showing Statistics for: {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n            </Typography>\n            <Box sx={{ display: 'flex', alignItems: 'center', backgroundColor: 'white', px: 2, py: 1, borderRadius: 1, boxShadow: '0 1px 2px rgba(0,0,0,0.1)' }}>\n              <Icon sx={{ color: '#3B82F6', mr: 1 }}>date_range</Icon>\n              <Typography variant=\"body1\" sx={{ mr: 1, color: '#1E40AF', fontWeight: 'medium' }}>\n                From: {format(startDate, 'MMM yyyy')}\n              </Typography>\n              <Typography variant=\"body1\" sx={{ color: '#1E40AF', fontWeight: 'medium' }}>\n                To: {format(endDate, 'MMM yyyy')}\n              </Typography>\n            </Box>\n          </Paper>\n\n          {/* Summary Cards - Now clearly marked as being for the selected date range */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            Performance Metrics\n          </Typography>\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#EBF5FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#2563EB' }}>shopping_bag</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Orders</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{aggregateMetrics.totalOrders.toLocaleString()}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#ECFDF5', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#10B981' }}>attach_money</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Revenue</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>\n                      ${(() => {\n                        // When a specific city is selected, show that city's revenue\n                        if (selectedCity !== 'all' && verifiedRevenueData.cities && verifiedRevenueData.cities[selectedCity]) {\n                          return verifiedRevenueData.cities[selectedCity].revenue.toLocaleString(undefined, {\n                            minimumFractionDigits: 2,\n                            maximumFractionDigits: 2\n                          });\n                        }\n                        // Otherwise show the total across all cities\n                        return verifiedRevenueData.total_revenue.toLocaleString(undefined, {\n                          minimumFractionDigits: 2,\n                          maximumFractionDigits: 2\n                        });\n                      })()}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {selectedCity !== 'all' && verifiedRevenueData.cities && verifiedRevenueData.cities[selectedCity] ? \n                        `${verifiedRevenueData.cities[selectedCity].percentage.toFixed(1)}% of total revenue` : \n                        'Verified from Python analysis'}\n                    </Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#FEF3C7', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#F59E0B' }}>trending_up</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Avg. Order Value</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>${aggregateMetrics.avgOrderValue.toFixed(2)}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n                  <Box sx={{ backgroundColor: '#F3E8FF', borderRadius: '50%', p: 1.5, mr: 2 }}>\n                    <Icon sx={{ color: '#8B5CF6' }}>inventory_2</Icon>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Avg. Order Weight</Typography>\n                    <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mt: 0.5 }}>{aggregateMetrics.avgWeight.toFixed(2)} kg</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Chart Section - Within the Date Range */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]} Order Trends\n          </Typography>\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} md={8}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>\n                  Weekly Orders - {selectedCity === 'all' ? 'All Cities' : CITY_MAPPING[selectedCity]}\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart \n                    data={\n                      selectedCity === 'all' \n                        ? monthlyOrdersTrend \n                        : (projectionData?.weeklyHistoricalData || monthlyOrdersTrend)\n                    }\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis \n                      dataKey=\"name\" \n                      tick={{ fill: '#6B7280' }}\n                      interval=\"preserveStartEnd\"\n                      minTickGap={15}\n                      tickMargin={8}\n                    />\n                    <YAxis tick={{ fill: '#6B7280' }} />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: '#FFFFFF', \n                        borderRadius: '0.375rem', \n                        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', \n                        border: 'none' \n                      }}\n                      formatter={(value, name, props) => {\n                        return [`${value} orders`, name];\n                      }}\n                      labelFormatter={(label, items) => {\n                        const dataPoint = items?.[0]?.payload;\n                        return dataPoint?.fullname || label;\n                      }}\n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                    \n                    {selectedCity === 'all' \n                      ? Object.values(CITY_MAPPING)\n                        .filter(city => city !== 'All Cities')\n                        .map((city, index) => (\n                          <Line \n                            key={city}\n                            type=\"monotone\" \n                            dataKey={city} \n                            stroke={COLORS[index % COLORS.length]}\n                            strokeWidth={2}\n                            dot={{ r: 3, strokeWidth: 1, fill: COLORS[index % COLORS.length] }}\n                            activeDot={{ r: 6 }}\n                            isAnimationActive={true}\n                            animationDuration={1000}\n                            connectNulls={true}\n                          />\n                        ))\n                      : (\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"orders\" \n                          name={CITY_MAPPING[selectedCity]}\n                          stroke=\"#2563EB\"\n                          strokeWidth={2}\n                          dot={{ r: 3, strokeWidth: 1, fill: '#2563EB' }}\n                          activeDot={{ r: 6 }}\n                          isAnimationActive={true}\n                          animationDuration={1000}\n                          connectNulls={true}\n                        />\n                      )\n                    }\n                  </LineChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>Customer Types</Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={customerTypeDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {customerTypeDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${value} orders`, 'Count']} \n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Additional Metric Charts - with improved styling */}\n          <Grid container spacing={3} sx={{ mb: 5 }}>\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 2, height: '100%' }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                  <Typography variant=\"h6\">Customer Retention Over Time</Typography>\n                </Box>\n                \n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={retentionRateTrend}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis dataKey=\"name\" tick={{ fill: '#6B7280' }} />\n                    <YAxis \n                      tickFormatter={(value) => `${(value * 100).toFixed(0)}%`}\n                      domain={[0, dataMax => Math.min(1, dataMax * 1.1)]}\n                      tick={{ fill: '#6B7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${(value * 100).toFixed(1)}%`, 'Retention Rate']} \n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"retentionRate\" \n                      stroke=\"#3B82F6\" \n                      strokeWidth={2}\n                      dot={{ r: 4, strokeWidth: 1, fill: \"#3B82F6\" }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 3, height: '100%', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'medium', color: '#4B5563' }}>\n                  Order Weight Distribution\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={weightDistribution}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                    <XAxis dataKey=\"range\" tick={{ fill: '#6B7280' }} />\n                    <YAxis tick={{ fill: '#6B7280' }} />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: '#FFFFFF', borderRadius: '0.375rem', boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', border: 'none' }}\n                      formatter={(value) => [`${value} orders`, 'Count']} \n                    />\n                    <Legend wrapperStyle={{ paddingTop: '10px' }} />\n                    <Bar dataKey=\"count\" fill=\"#26A69A\" name=\"Number of Orders\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Laundromat Performance Table - With Improved Styling */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            Laundromat Performance\n          </Typography>\n          <Box sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              Showing all laundromats across all cities\n              {selectedCity !== 'all' && `, with ${CITY_MAPPING[selectedCity]} laundromats highlighted`}\n            </Typography>\n            {selectedCity !== 'all' && (\n              <Box \n                sx={{ \n                  display: 'inline-block', \n                  marginLeft: '10px', \n                  padding: '2px 8px',\n                  backgroundColor: '#FEF08A',\n                  color: '#854D0E',\n                  borderRadius: '4px',\n                  fontSize: '0.875rem',\n                  fontWeight: 'medium'\n                }}\n              >\n                <Icon sx={{ verticalAlign: 'middle', fontSize: '0.875rem', mr: 0.5 }}>star</Icon>\n                {CITY_MAPPING[selectedCity]} Highlighted\n              </Box>\n            )}\n          </Box>\n          <Paper sx={{ p: 0, mb: 4, overflowX: 'auto', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n            <Box sx={{ p: 3, borderBottom: '1px solid #E5E7EB' }}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={3}>\n                  <FormControl fullWidth variant=\"outlined\" size=\"small\">\n                    <InputLabel>Filter by Laundromat</InputLabel>\n                    <Select\n                      value={laundromatFilter}\n                      onChange={(e) => setLaundromatFilter(e.target.value)}\n                      label=\"Filter by Laundromat\"\n                    >\n                      <MenuItem value=\"all\">All Laundromats</MenuItem>\n                      {laundromats.map(laundromat => (\n                        <MenuItem key={laundromat.id} value={laundromat.id}>{laundromat.name}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </Box>\n            <Box>\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr style={{ backgroundColor: '#F9FAFB' }}>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('name')}\n                    >\n                      Laundromat Name <SortIcon column=\"name\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('city')}\n                    >\n                      City <SortIcon column=\"city\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('orders')}\n                    >\n                      Total Orders <SortIcon column=\"orders\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('revenue')}\n                    >\n                      Revenue <SortIcon column=\"revenue\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('avgOrderValue')}\n                    >\n                      Avg. Order Value <SortIcon column=\"avgOrderValue\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('customers')}\n                    >\n                      Customers <SortIcon column=\"customers\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('returningCustomers')}\n                    >\n                      Returning <SortIcon column=\"returningCustomers\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('retentionRate')}\n                    >\n                      Retention <SortIcon column=\"retentionRate\" />\n                    </th>\n                    <th \n                      style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280', cursor: 'pointer' }}\n                      onClick={() => handleSort('avgTurnaroundDays')}\n                    >\n                      Turnaround <SortIcon column=\"avgTurnaroundDays\" />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {renderLaundromatTable()}\n                </tbody>\n              </table>\n            </Box>\n          </Paper>\n\n          {/* City Performance Table - showing metrics across all cities */}\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 6, mb: 3, fontWeight: 'bold', color: '#111827' }}>\n            City Performance\n          </Typography>\n          <Paper sx={{ p: 0, mb: 4, overflowX: 'auto', borderRadius: 2, boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)' }}>\n            <Box>\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr style={{ backgroundColor: '#F9FAFB' }}>\n                    <th style={{ padding: '16px', textAlign: 'left', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      City\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      In Operation\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Total Orders\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Revenue\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Avg. Order Value\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Customers\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Returning\n                    </th>\n                    <th style={{ padding: '16px', textAlign: 'right', borderBottom: '1px solid #E5E7EB', fontWeight: 500, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: '0.05em', color: '#6B7280' }}>\n                      Retention\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(CITY_MAPPING)\n                    .filter(cityId => cityId !== 'all')\n                    .map(cityId => {\n                      // Get city data from filtered appointments\n                      const cityData = appointments\n                        .filter(a => a.cityId === cityId || normalizeCityId(a) === cityId);\n                      \n                      const totalOrders = cityData.length;\n                      const totalRevenue = cityData.reduce((sum, a) => {\n                        return sum + getAppointmentRevenue(a);\n                      }, 0);\n                      const avgOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;\n                      \n                      // Calculate unique customers\n                      const uniqueCustomers = new Set();\n                      const customerAppointments = {};\n                      \n                      cityData.forEach(a => {\n                        if (a.customerId) {\n                          uniqueCustomers.add(a.customerId);\n                          \n                          if (!customerAppointments[a.customerId]) {\n                            customerAppointments[a.customerId] = 0;\n                          }\n                          customerAppointments[a.customerId]++;\n                        }\n                      });\n                      \n                      // Calculate returning customers\n                      const totalCustomers = uniqueCustomers.size;\n                      const returningCustomers = Object.values(customerAppointments)\n                        .filter(count => count > 1).length;\n                      \n                      // Calculate retention rate\n                      const retentionRate = totalCustomers > 0 ? \n                        returningCustomers / totalCustomers : 0;\n                      \n                      // Is this the currently selected city?\n                      const isSelected = cityId === selectedCity;\n\n                      // Calculate years in operation\n                      let operationSince;\n                      let yearsInOperation;\n                      const currentDate = new Date();\n                      \n                      switch(cityId) {\n                        case 'LYGRRATQ7EGG2': // London\n                          operationSince = new Date('2022-01-01');\n                          break;\n                        case 'L4NE8GPX89J3A': // Ottawa\n                          operationSince = new Date('2023-03-15');\n                          break;\n                        case 'LDK6Z980JTKXY': // Kitchener-Waterloo\n                          operationSince = new Date('2023-06-01');\n                          break;\n                        case 'LXMC6DWVJ5N7W': // Hamilton\n                          operationSince = new Date('2023-09-10');\n                          break;\n                        case 'LG0VGFKQ25XED': // Calgary\n                          operationSince = new Date('2023-11-20');\n                          break;\n                        default:\n                          operationSince = new Date('2022-01-01');\n                      }\n                      \n                      const diffTime = Math.abs(currentDate - operationSince);\n                      const diffYears = diffTime / (1000 * 60 * 60 * 24 * 365.25);\n                      yearsInOperation = diffYears.toFixed(1);\n                      \n                      // Log debug info for revenue\n                      console.log(`REVENUE DEBUG - CITY: ${CITY_MAPPING[cityId]}, REVENUE: $${totalRevenue.toFixed(2)}`);\n                      \n                      return (\n                        <tr key={cityId} style={{ borderBottom: '1px solid #E5E7EB' }}>\n                          <td style={{ padding: '12px 16px', fontWeight: 500 }}>\n                            {isSelected && (\n                              <Icon sx={{ \n                                color: '#EAB308', \n                                verticalAlign: 'middle',\n                                marginRight: '6px',\n                                fontSize: '1.2rem'\n                              }}>\n                                star\n                              </Icon>\n                            )}\n                            {CITY_MAPPING[cityId]}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            {yearsInOperation} years\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            {totalOrders.toLocaleString()}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            ${verifiedRevenueData.cities && verifiedRevenueData.cities[cityId] ? \n                                verifiedRevenueData.cities[cityId].revenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})\n                              : totalRevenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n                            {verifiedRevenueData.cities && verifiedRevenueData.cities[cityId] &&\n                              <Typography variant=\"caption\" sx={{ display: 'block', fontSize: '0.7rem', color: 'text.secondary' }}>\n                                ({verifiedRevenueData.cities[cityId].percentage.toFixed(1)}% of total)\n                              </Typography>\n                            }\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            ${(() => {\n                                // Use verified revenue if available, otherwise use calculated totalRevenue\n                                const revenue = verifiedRevenueData.cities && verifiedRevenueData.cities[cityId] ? \n                                  verifiedRevenueData.cities[cityId].revenue : totalRevenue;\n                                // Calculate average order value using the verified revenue\n                                const avgValue = totalOrders > 0 ? revenue / totalOrders : 0;\n                                return avgValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});\n                              })()}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            {totalCustomers.toLocaleString()}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            {returningCustomers.toLocaleString()}\n                          </td>\n                          <td style={{ padding: '12px 16px', textAlign: 'right' }}>\n                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                              <span style={{ \n                                width: '12px', \n                                height: '12px', \n                                borderRadius: '50%', \n                                marginRight: '8px',\n                                backgroundColor: retentionRate >= 0.6 ? '#10B981' :\n                                             retentionRate >= 0.45 ? '#059669' :\n                                             retentionRate >= 0.35 ? '#F59E0B' :\n                                             retentionRate >= 0.25 ? '#D97706' :\n                                             retentionRate >= 0.15 ? '#DC2626' : '#B91C1C'\n                              }}></span>\n                              {(retentionRate * 100).toFixed(1)}%\n                            </div>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n            </Box>\n          </Paper>\n          \n          {/* Map Section - replaced with Coming Soon version */}\n          {renderMapSection()}\n        </Container>\n      </Box>\n\n      {/* Footer */}\n      <Box component=\"footer\" sx={{ p: 3, backgroundColor: '#F1F5F9', borderTop: '1px solid #E2E8F0' }}>\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n          Laundry Service Analytics Dashboard &bull; Last updated: {new Date().toLocaleDateString()} \n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Dashboard; ","import React, { useState, useEffect } from 'react';\nimport { Box, CircularProgress, Typography, Button } from '@mui/material';\nimport Dashboard from './components/Dashboard';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabaseUrl = 'https://cnbpmepdmtpgrbllufcb.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNuYnBtZXBkbXRwZ3JibGx1ZmNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc5MjM4MjEsImV4cCI6MjA1MzQ5OTgyMX0.UqDleR4ucntrg9x6FNgJigKZjKiATFYiMiLiZZj3B2w';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Load data from Supabase\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        console.log('Fetching data from Supabase...');\n        \n        // First try Supabase\n        const { data: supabaseData, error: supabaseError } = await supabase\n          .from('appointments')\n          .select('*');\n        \n        if (supabaseError) {\n          console.error('Supabase error:', supabaseError);\n          throw new Error(`Failed to load data from Supabase: ${supabaseError.message}`);\n        }\n        \n        if (supabaseData && supabaseData.length > 0) {\n          console.log(`Successfully loaded ${supabaseData.length} records from Supabase`);\n          setData(supabaseData);\n        } else {\n          // Fallback to local JSON file\n          console.log('No data found in Supabase, falling back to local JSON file');\n          const response = await fetch('/appointments.json');\n          if (!response.ok) {\n            throw new Error(`Failed to load local data: ${response.status} ${response.statusText}`);\n          }\n          const jsonData = await response.json();\n          setData(jsonData);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err.message || 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Handle retry when loading fails\n  const handleRetry = () => {\n    setError(null);\n    setLoading(true);\n    // Re-trigger the effect\n    const loadData = async () => {\n      try {\n        // First try Supabase\n        const { data: supabaseData, error: supabaseError } = await supabase\n          .from('appointments')\n          .select('*');\n        \n        if (supabaseError) {\n          console.error('Supabase error:', supabaseError);\n          throw new Error(`Failed to load data from Supabase: ${supabaseError.message}`);\n        }\n        \n        if (supabaseData && supabaseData.length > 0) {\n          console.log(`Successfully loaded ${supabaseData.length} records from Supabase`);\n          setData(supabaseData);\n        } else {\n          // Fallback to local JSON file\n          console.log('No data found in Supabase, falling back to local JSON file');\n          const response = await fetch('/appointments.json');\n          if (!response.ok) {\n            throw new Error(`Failed to load local data: ${response.status} ${response.statusText}`);\n          }\n          const jsonData = await response.json();\n          setData(jsonData);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err.message || 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  };\n\n  if (loading) {\n    return (\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column',\n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          backgroundColor: '#F3F4F6'\n        }}\n      >\n        <CircularProgress size={60} sx={{ mb: 3 }} />\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          Loading laundry service data...\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column',\n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          backgroundColor: '#F3F4F6',\n          p: 3\n        }}\n      >\n        <Typography variant=\"h5\" color=\"error\" gutterBottom>\n          Error Loading Data\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3, maxWidth: 600, textAlign: 'center' }}>\n          {error}\n        </Typography>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleRetry}>\n          Retry\n        </Button>\n      </Box>\n    );\n  }\n\n  return <Dashboard jsonData={data} />;\n};\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport App from './App';\n\n// Create a custom theme\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1E3A8A',\n    },\n    secondary: {\n      main: '#10B981',\n    },\n    background: {\n      default: '#F3F4F6',\n    },\n  },\n  typography: {\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n    h5: {\n      fontWeight: 600,\n    },\n    h6: {\n      fontWeight: 600,\n    },\n  },\n  components: {\n    MuiPaper: {\n      defaultProps: {\n        elevation: 0,\n      },\n      styleOverrides: {\n        root: {\n          boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.05)',\n        },\n      },\n    },\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          textTransform: 'none',\n          borderRadius: 8,\n        },\n      },\n    },\n    MuiSelect: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8,\n        },\n      },\n    },\n  },\n});\n\n// Create the root element for our React application\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Render the application\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n); "],"sourceRoot":""}